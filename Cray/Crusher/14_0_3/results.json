{
    "configs": [
        {
            "CC": "",
            "CCFlags": [],
            "CC_ACC_Version": null,
            "CPP": "",
            "CPPFlags": [],
            "CPP_ACC_Version": null,
            "FC": "ftn",
            "FCFlags": [
                "-h",
                "acc,noomp",
                "-h",
                "msgs"
            ],
            "FC_ACC_Version": "2.0",
            "PostCompileCommands": [],
            "PostRunCommands": [],
            "PreCompileCommands": [],
            "PreRunCommands": [],
            "build_dir": "/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build",
            "config_id": -1,
            "config_name": "init_config.txt",
            "env": null,
            "exclude_tags": [],
            "exclude_tests": [
                "acc_testsuite.Fh",
                "acc_testsuite.h",
                "acc_testsuite_declare.h"
            ],
            "export_format": "json",
            "fast": false,
            "id": 1,
            "include_by_default": true,
            "include_tags": [],
            "include_tests": [],
            "keep_build_dir": false,
            "keep_mutated_tests": false,
            "keep_partial_results": false,
            "keep_policy": "on-error",
            "mutated_test_dir": "/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/mutated_tests",
            "mutators": [],
            "partial": false,
            "partial_results_dir": "/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/partial_results",
            "runAll": true,
            "runtime_prefix": "",
            "seed": null,
            "system_name": null,
            "tag_evaluation": null,
            "test_dir": "/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests",
            "timeout": 10
        }
    ],
    "runs": {
        "acc_async_test.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 22 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 26 \n  A region starting at line 26 and ending at line 31 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 32 \n  A region starting at line 32 and ending at line 37 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 34 \n  A loop starting at line 34 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 74 \n  A loop starting at line 74 was fused with the loop starting at line 71.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 74 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 75 \n  A loop starting at line 75 was fused with the loop starting at line 71.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 75 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  A data region was created at line 77 and ending at line 93.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 93 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 93 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 93 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory for user shaped variable \"e\" on accelerator, copy back at line 93 (acc_copyout).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 93 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 78 \n  A region starting at line 78 and ending at line 83 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 80 \n  A loop starting at line 80 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 84 \n  A region starting at line 84 and ending at line 89 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 86 \n  A loop starting at line 86 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 95 \n  A loop starting at line 95 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 95 \n  A loop starting at line 95 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 181 \n  A loop starting at line 181 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 191 \n  A loop starting at line 191 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0157 seconds\nCray Fortran : 237 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 6.931398619024549
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:679 CRAY_ACC_ERROR - Host region (7ffffffec1c0 to 7ffffffee100) overlaps present region (7ffffffec180 to 7ffffffee0c0 index 0) but is not contained for 'a(:)' from ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90:77\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.455180617980659,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 74 \n  A loop starting at line 74 was fused with the loop starting at line 71.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 74 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 75 \n  A loop starting at line 75 was fused with the loop starting at line 71.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 75 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  A data region was created at line 77 and ending at line 93.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 93 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 93 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 93 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory for user shaped variable \"e\" on accelerator, copy back at line 93 (acc_copyout).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 93 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 78 \n  A region starting at line 78 and ending at line 83 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 80 \n  A loop starting at line 80 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 84 \n  A region starting at line 84 and ending at line 89 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 86 \n  A loop starting at line 86 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 95 \n  A loop starting at line 95 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 95 \n  A loop starting at line 95 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test.F90, Line = 191 \n  A loop starting at line 191 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0076 seconds\nCray Fortran : 228 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7661506719887257
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4245409409631975,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_async_test_all.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 20 \n   A loop nest at line 20 collapsed to a single loop.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 22 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 27 \n  A region starting at line 27 and ending at line 32 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 33 \n  A region starting at line 33 and ending at line 38 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 35 \n  A loop starting at line 35 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 46 \n  A loop starting at line 46 was collapsed into the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 47 \n  A loop starting at line 47 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 47 \n  A loop starting at line 47 was vectorized.\n\n\nftn-6066 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 79 \n   A loop nest at line 79 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 80 \n   A loop nest at line 80 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 81 \n   A loop nest at line 81 collapsed to a single loop.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 82 \n  A loop starting at line 82 was fused with the loop starting at line 79.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 82 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 83 \n  A loop starting at line 83 was fused with the loop starting at line 79.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 83 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  A data region was created at line 85 and ending at line 103.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 103 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 103 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 103 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory for user shaped variable \"e\" on accelerator, copy back at line 103 (acc_copyout).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 103 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 87 \n  A region starting at line 87 and ending at line 92 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 89 \n  A loop starting at line 89 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 93 \n  A region starting at line 93 and ending at line 98 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 95 \n  A loop starting at line 95 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6003 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 105 \n  A loop starting at line 105 was collapsed into the loop starting at line 106.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 106 \n  A loop starting at line 106 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 106 \n  A loop starting at line 106 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 200 \n  A loop starting at line 200 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 209 \n  A loop starting at line 209 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0108 seconds\nCray Fortran : 254 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9173709930037148
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:679 CRAY_ACC_ERROR - Host region (7ffffff943a0 to 7ffffffa7c20) overlaps present region (7ffffff94260 to 7ffffffa7ae0 index 0) but is not contained for 'a(:,:)' from ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90:85\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.46709216601448134,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 79 \n   A loop nest at line 79 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 80 \n   A loop nest at line 80 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 81 \n   A loop nest at line 81 collapsed to a single loop.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 82 \n  A loop starting at line 82 was fused with the loop starting at line 79.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 82 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 83 \n  A loop starting at line 83 was fused with the loop starting at line 79.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 83 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  A data region was created at line 85 and ending at line 103.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 103 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 103 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 103 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory for user shaped variable \"e\" on accelerator, copy back at line 103 (acc_copyout).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 103 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 87 \n  A region starting at line 87 and ending at line 92 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 89 \n  A loop starting at line 89 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 93 \n  A region starting at line 93 and ending at line 98 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 95 \n  A loop starting at line 95 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6003 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 105 \n  A loop starting at line 105 was collapsed into the loop starting at line 106.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 106 \n  A loop starting at line 106 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 106 \n  A loop starting at line 106 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 209 \n  A loop starting at line 209 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0073 seconds\nCray Fortran : 245 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7162647100049071
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.433299906027969,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT2 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164047320140526
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0328445719787851,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT2 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 23 \n  A data region was created at line 23 and ending at line 30.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 406 \n  A loop starting at line 406 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0072 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7159796900232323
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.37046886095777154,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 65 \n  A loop starting at line 65 was fused with the loop starting at line 64.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 65 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 70 \n  A data region was created at line 70 and ending at line 77.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 70 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 71 \n  A region starting at line 71 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 73 \n  A loop starting at line 73 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 82 \n  A loop starting at line 82 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 82 \n  A loop starting at line 82 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 415 \n  A loop starting at line 415 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0075 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6664546040119603
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42828977695899084,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT2 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 181 \n  A loop starting at line 181 was fused with the loop starting at line 180.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 181 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 186 \n  A data region was created at line 186 and ending at line 193.\n\n\nftn-6420 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 186 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 193 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 187 \n  A region starting at line 187 and ending at line 192 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 187 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 192 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 189 \n  A loop starting at line 189 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 197 \n  A loop starting at line 197 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 197 \n  A loop starting at line 197 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 433 \n  A loop starting at line 433 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0075 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6662263839971274
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4293834880227223,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT2 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 229 \n  A loop starting at line 229 was fused with the loop starting at line 228.\n\n\nftn-6231 ftn: VECTOR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 229 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 234 \n  A data region was created at line 234 and ending at line 241.\n\n\nftn-6420 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 234 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 241 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 235 \n  A region starting at line 235 and ending at line 240 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 235 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 240 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 237 \n  A loop starting at line 237 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 245 \n  A loop starting at line 245 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 245 \n  A loop starting at line 245 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 442 \n  A loop starting at line 442 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0076 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6665374850272201
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43689630704466254,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 23 \n  A data region was created at line 23 and ending at line 30.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 65 \n  A loop starting at line 65 was fused with the loop starting at line 64.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 65 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 70 \n  A data region was created at line 70 and ending at line 77.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 70 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 71 \n  A region starting at line 71 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 73 \n  A loop starting at line 73 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 82 \n  A loop starting at line 82 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 82 \n  A loop starting at line 82 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 181 \n  A loop starting at line 181 was fused with the loop starting at line 180.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 181 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 186 \n  A data region was created at line 186 and ending at line 193.\n\n\nftn-6420 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 186 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 193 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 187 \n  A region starting at line 187 and ending at line 192 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 187 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 192 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 189 \n  A loop starting at line 189 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 197 \n  A loop starting at line 197 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 197 \n  A loop starting at line 197 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 229 \n  A loop starting at line 229 was fused with the loop starting at line 228.\n\n\nftn-6231 ftn: VECTOR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 229 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 234 \n  A data region was created at line 234 and ending at line 241.\n\n\nftn-6420 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 234 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 241 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 235 \n  A region starting at line 235 and ending at line 240 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 235 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 240 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 237 \n  A loop starting at line 237 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 245 \n  A loop starting at line 245 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 245 \n  A loop starting at line 245 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 406 \n  A loop starting at line 406 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 415 \n  A loop starting at line 415 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 433 \n  A loop starting at line 433 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin.F90, Line = 442 \n  A loop starting at line 442 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0160 seconds\nCray Fortran : 515 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.916292151028756
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.482538367039524,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async.F90/acc_copyin_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164267339860089
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03331974899629131,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_async_with_len.F90/acc_copyin_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_async_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5167290479876101
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033011482970323414,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT2 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5668149389675818
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03285836102440953,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT2 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 23 \n  A data region was created at line 23 and ending at line 30.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 408 \n  A loop starting at line 408 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0072 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6658950080163777
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4157422000425868,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 67 \n  A loop starting at line 67 was fused with the loop starting at line 66.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 67 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 71 \n  A data region was created at line 71 and ending at line 78.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 78 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 72 \n  A region starting at line 72 and ending at line 77 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 74 \n  A loop starting at line 74 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 82 \n  A loop starting at line 82 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 82 \n  A loop starting at line 82 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 417 \n  A loop starting at line 417 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0076 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6659324399661273
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4313753370079212,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT2 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 183 \n  A loop starting at line 183 was fused with the loop starting at line 182.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 183 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 188 \n  A data region was created at line 188 and ending at line 195.\n\n\nftn-6420 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 188 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 195 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  A region starting at line 189 and ending at line 194 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 194 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 194 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 194 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 191 \n  A loop starting at line 191 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 199 \n  A loop starting at line 199 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 199 \n  A loop starting at line 199 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 435 \n  A loop starting at line 435 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0077 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7168647719663568
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4293186269933358,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT2 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 231 \n  A loop starting at line 231 was fused with the loop starting at line 230.\n\n\nftn-6231 ftn: VECTOR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 231 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 236 \n  A data region was created at line 236 and ending at line 243.\n\n\nftn-6420 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 236 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 243 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  A region starting at line 237 and ending at line 242 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 242 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 242 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 242 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 239 \n  A loop starting at line 239 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 247 \n  A loop starting at line 247 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 247 \n  A loop starting at line 247 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 444 \n  A loop starting at line 444 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0076 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7165149380452931
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4391053660074249,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 23 \n  A data region was created at line 23 and ending at line 30.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 67 \n  A loop starting at line 67 was fused with the loop starting at line 66.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 67 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 71 \n  A data region was created at line 71 and ending at line 78.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 78 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 72 \n  A region starting at line 72 and ending at line 77 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 74 \n  A loop starting at line 74 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 82 \n  A loop starting at line 82 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 82 \n  A loop starting at line 82 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 183 \n  A loop starting at line 183 was fused with the loop starting at line 182.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 183 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 188 \n  A data region was created at line 188 and ending at line 195.\n\n\nftn-6420 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 188 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 195 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  A region starting at line 189 and ending at line 194 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 194 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 194 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 194 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 191 \n  A loop starting at line 191 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 199 \n  A loop starting at line 199 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 199 \n  A loop starting at line 199 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 231 \n  A loop starting at line 231 was fused with the loop starting at line 230.\n\n\nftn-6231 ftn: VECTOR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 231 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 236 \n  A data region was created at line 236 and ending at line 243.\n\n\nftn-6420 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 236 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 243 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  A region starting at line 237 and ending at line 242 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 242 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 242 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 242 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 239 \n  A loop starting at line 239 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 247 \n  A loop starting at line 247 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 247 \n  A loop starting at line 247 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 408 \n  A loop starting at line 408 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 417 \n  A loop starting at line 417 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 435 \n  A loop starting at line 435 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 444 \n  A loop starting at line 444 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0161 seconds\nCray Fortran : 517 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8659337319550104
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42964879400096834,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 23 \n  A data region was created at line 23 and ending at line 30.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 65 \n  A loop starting at line 65 was fused with the loop starting at line 63.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 65 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 69 \n  A data region was created at line 69 and ending at line 76.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 70 \n  A region starting at line 70 and ending at line 75 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 75 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 75 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 75 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 72 \n  A loop starting at line 72 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 80 \n  A loop starting at line 80 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 80 \n  A loop starting at line 80 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 274 \n  A loop starting at line 274 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout.F90, Line = 283 \n  A loop starting at line 283 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0101 seconds\nCray Fortran : 347 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7666401820024475
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46010975498938933,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_async.F90/acc_copyout_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162664770032279
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03283262101467699,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_async_with_len.F90/acc_copyout_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_async_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516297486028634
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03326896403450519,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_finalize.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_finalize.F90/acc_copyout_finalize.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165870760101825
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0335060220095329,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_finalize_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_finalize_async.F90/acc_copyout_finalize_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5661909140180796
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03278153302380815,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_finalize_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_finalize_async_with_len.F90/acc_copyout_finalize_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_async_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166681729606353
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03358502400806174,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_finalize_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_finalize_with_len.F90/acc_copyout_finalize_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_finalize_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516355047991965
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03285434399731457,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_copyout_with_len.F90/acc_copyout_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 23 \n  A data region was created at line 23 and ending at line 30.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 65 \n  A loop starting at line 65 was fused with the loop starting at line 63.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 65 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 69 \n  A data region was created at line 69 and ending at line 76.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 70 \n  A region starting at line 70 and ending at line 75 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 75 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 75 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 75 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 72 \n  A loop starting at line 72 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 80 \n  A loop starting at line 80 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 80 \n  A loop starting at line 80 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 111 \n  A loop starting at line 111 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 120 \n  A loop starting at line 120 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0101 seconds\nCray Fortran : 157 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7669475249713287
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41624033101834357,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5177752809831873
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0333019380341284,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 24 \n  A data region was created at line 24 and ending at line 31.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 25 \n  A region starting at line 25 and ending at line 30 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 210 \n  A loop starting at line 210 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 266 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6660079460125417
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4189957620110363,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 66 \n  A loop starting at line 66 was fused with the loop starting at line 65.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 66 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 70 \n  A data region was created at line 70 and ending at line 77.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 70 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 70 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 71 \n  A region starting at line 71 and ending at line 76 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 73 \n  A loop starting at line 73 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 81 \n  A loop starting at line 81 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 81 \n  A loop starting at line 81 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 219 \n  A loop starting at line 219 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0072 seconds\nCray Fortran : 266 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7156955759855919
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43364554102299735,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 112 \n  A loop starting at line 112 was fused with the loop starting at line 111.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 112 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 116 \n  A data region was created at line 116 and ending at line 123.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 116 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 123 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 116 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 123 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  A region starting at line 117 and ending at line 122 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 122 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 122 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 122 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 119 \n  A loop starting at line 119 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 127 \n  A loop starting at line 127 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 127 \n  A loop starting at line 127 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 228 \n  A loop starting at line 228 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0072 seconds\nCray Fortran : 266 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7157257430371828
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4358126780134626,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 158 \n  A loop starting at line 158 was fused with the loop starting at line 157.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 158 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 162 \n  A data region was created at line 162 and ending at line 169.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 162 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 169 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 162 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 169 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  A region starting at line 163 and ending at line 168 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 168 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 168 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 168 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 165 \n  A loop starting at line 165 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 173 \n  A loop starting at line 173 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 173 \n  A loop starting at line 173 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 237 \n  A loop starting at line 237 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0072 seconds\nCray Fortran : 266 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7157203830429353
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4449853890109807,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 24 \n  A data region was created at line 24 and ending at line 31.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 25 \n  A region starting at line 25 and ending at line 30 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 66 \n  A loop starting at line 66 was fused with the loop starting at line 65.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 66 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 70 \n  A data region was created at line 70 and ending at line 77.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 70 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 70 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 71 \n  A region starting at line 71 and ending at line 76 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 73 \n  A loop starting at line 73 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 81 \n  A loop starting at line 81 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 81 \n  A loop starting at line 81 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 112 \n  A loop starting at line 112 was fused with the loop starting at line 111.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 112 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 116 \n  A data region was created at line 116 and ending at line 123.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 116 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 123 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 116 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 123 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  A region starting at line 117 and ending at line 122 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 122 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 122 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 122 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 119 \n  A loop starting at line 119 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 127 \n  A loop starting at line 127 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 127 \n  A loop starting at line 127 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 158 \n  A loop starting at line 158 was fused with the loop starting at line 157.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 158 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 162 \n  A data region was created at line 162 and ending at line 169.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 162 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 169 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 162 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 169 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  A region starting at line 163 and ending at line 168 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 168 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 168 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 168 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 165 \n  A loop starting at line 165 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 173 \n  A loop starting at line 173 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 173 \n  A loop starting at line 173 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 210 \n  A loop starting at line 210 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 219 \n  A loop starting at line 219 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 228 \n  A loop starting at line 228 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create.F90, Line = 237 \n  A loop starting at line 237 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0155 seconds\nCray Fortran : 293 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.919685892004054
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.434842201997526,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_async.F90/acc_create_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166181260137819
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03286930202739313,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_async_with_len.F90/acc_create_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_async_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.566305634973105
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03338496800279245,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164869629661553
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.032822922978084534,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 14, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 15, Column = 22 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 16, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 267 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26557036000303924
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 60, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 61, Column = 22 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 62, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 267 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2650723179685883
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 106, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 107, Column = 22 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 108, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 267 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26552638498833403
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 152, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 153, Column = 22 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 154, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 267 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2652663519838825
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5160750380018726
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06520881096366793,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete.F90/acc_delete.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 24 \n  A data region was created at line 24 and ending at line 31.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 24 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 31 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 25 \n  A region starting at line 25 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 67 \n  A loop starting at line 67 was fused with the loop starting at line 66.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 67 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 72 \n  A data region was created at line 72 and ending at line 79.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 79 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 73 \n  A region starting at line 73 and ending at line 78 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 78 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 84 \n  A loop starting at line 84 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 84 \n  A loop starting at line 84 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 115 \n  A loop starting at line 115 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete.F90, Line = 124 \n  A loop starting at line 124 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0102 seconds\nCray Fortran : 161 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7662692160229199
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.45855805999599397,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_async.F90/acc_delete_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166892950073816
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0327734780148603,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_async_with_len.F90/acc_delete_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_async_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166545770480298
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033085650007706136,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_finalize.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize.F90/acc_delete_finalize.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164462639950216
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033014773041941226,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_finalize_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_async.F90/acc_delete_finalize_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5159503259928897
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.032849464972969145,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_finalize_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_async_with_len.F90/acc_delete_finalize_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_async_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162601259653457
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03326456499053165,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_finalize_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_finalize_with_len.F90/acc_delete_finalize_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_finalize_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5161923139821738
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03338454698678106,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_delete_with_len.F90/acc_delete_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 24 \n  A data region was created at line 24 and ending at line 31.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 24 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 31 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 25 \n  A region starting at line 25 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 68 \n  A loop starting at line 68 was fused with the loop starting at line 67.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 68 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 73 \n  A data region was created at line 73 and ending at line 80.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 73 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 80 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 74 \n  A region starting at line 74 and ending at line 79 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 74 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 79 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 76 \n  A loop starting at line 76 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 115 \n  A loop starting at line 115 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 124 \n  A loop starting at line 124 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0103 seconds\nCray Fortran : 161 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7665299389627762
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46571564103942364,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_default_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_default_async.F90/acc_get_default_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_default_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5163319540442899
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0333491790224798,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_device_num.F90/acc_get_device_num.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90, Line = 42 \n  A loop starting at line 42 was unwound.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5667884279973805
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.21506231697276235,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_num_devices.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_num_devices.F90/acc_get_num_devices.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_num_devices.F90",
                    "config": 1,
                    "errors": "\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_num_devices.F90, Line = 38 \n  A loop starting at line 38 was unwound.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5668172529549338
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.21510841703275219,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_property.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_property.F90/acc_get_property.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_property.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162530909874476
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03284380299737677,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_property_string.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_get_property_string.F90/acc_get_property_string.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_get_property_string.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5170426659751683
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03338689199881628,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_init.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_init.F90/acc_init.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_init.F90",
                    "config": 1,
                    "errors": "\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_init.F90, Line = 29 \n  A loop starting at line 29 was unwound.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5158860340015963
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3654924950096756,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_is_present.F90/acc_is_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_is_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_is_present.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_is_present.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0070 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6166600220021792
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.37102854502154514,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_is_present_with_len.F90/acc_is_present_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_is_present_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_is_present_with_len.F90, Line = 14 \n  A region starting at line 14 and ending at line 16 was placed on the accelerator.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_is_present_with_len.F90, Line = 52 \n  A loop starting at line 52 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6169127399916761
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.47136318701086566,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_on_device.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_on_device.F90/acc_on_device.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_on_device.F90",
                    "config": 1,
                    "errors": "\n\nftn-1698 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_on_device.F90, Line = 13, Column = 31 \n  Type INTEGER(kind=4) is not allowed for the \"DEVICE\" argument of intrinsic ACC_ON_DEVICE.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 75 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2655123479780741
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_on_device.F90/acc_on_device.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_on_device.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.515516119019594
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06560818298021331,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_default_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_set_default_async.F90/acc_set_default_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_default_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.51628482301021
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03328500495990738,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_set_device_num.F90/acc_set_device_num.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 20, Column = 15 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-324 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 20, Column = 28 \n  Assignment of a rank 1 expression to a rank 0 variable is not allowed.\n\n\nftn-281 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 22, Column = 13 \n  The left hand side of an assignment statement must be a variable or a function result.\n\n\nftn-503 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 26, Column = 41 \n  Argument mismatch:  Actual argument \"ACC_GET_DEVICE_TYPE\" is a \"PROGRAM UNIT\".  Dummy argument \"DEVICE\" is a \"DATA OBJECT\".\n\n\nftn-281 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 27, Column = 13 \n  The left hand side of an assignment statement must be a variable or a function result.\n\n\nftn-281 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 39, Column = 13 \n  The left hand side of an assignment statement must be a variable or a function result.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 99 source lines\nCray Fortran : 5 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26639249798608944
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_set_device_num.F90/acc_set_device_num.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5155282630003057
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03279200301039964,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_type.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_set_device_type.F90/acc_set_device_type.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_type.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_type.F90, Line = 11, Column = 34 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 66 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26595260796602815
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_set_device_type.F90/acc_set_device_type.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_set_device_type.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5159003399894573
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03307260602014139,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_shutdown.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_shutdown.F90/acc_shutdown.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_shutdown.F90",
                    "config": 1,
                    "errors": "\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_shutdown.F90, Line = 29 \n  A loop starting at line 29 was unwound.\n\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5159287650021724
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: Shutdown called before init!\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03277332702418789,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_shutdown.F90/acc_shutdown.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_shutdown.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5156525810016319
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03344990301411599,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device.F90/acc_update_device.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 21 \n  A data region was created at line 21 and ending at line 30.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 30 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"a\" on accelerator, free at line 30 (acc_share).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 30 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 32 \n  A loop starting at line 32 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 58 \n  A region starting at line 58 and ending at line 60 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 65 \n  A loop starting at line 65 was fused with the loop starting at line 63.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 65 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 67 \n  A data region was created at line 67 and ending at line 88.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 67 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 67 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 67 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 88 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 68 \n  A region starting at line 68 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 70 \n  A loop starting at line 70 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 75 \n  A region starting at line 75 and ending at line 80 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 75 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 80 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 77 \n  A loop starting at line 77 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 82 \n  A region starting at line 82 and ending at line 87 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 82 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 82 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 82 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 87 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 84 \n  A loop starting at line 84 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 90 \n  A loop starting at line 90 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 90 \n  A loop starting at line 90 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 122 \n  A loop starting at line 122 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device.F90, Line = 131 \n  A loop starting at line 131 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0100 seconds\nCray Fortran : 168 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8173177390126511
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41633562196511775,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_async.F90/acc_update_device_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5159811800112948
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0328083960339427,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_async_with_len.F90/acc_update_device_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_async_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165859790286049
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033451980038080364,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_device_with_len.F90/acc_update_device_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 15 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 17 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 28 \n  A loop starting at line 28 was fused with the loop starting at line 26.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 28 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 30 \n  A data region was created at line 30 and ending at line 39.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 30 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 39 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 30 \n  If not already present: allocate memory for user shaped variable \"a\" on accelerator, free at line 39 (acc_share).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 30 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 39 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 33 \n  A region starting at line 33 and ending at line 38 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 33 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 33 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 33 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 35 \n  A loop starting at line 35 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 41 \n  A loop starting at line 41 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 41 \n  A loop starting at line 41 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 68 \n  A region starting at line 68 and ending at line 70 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 70 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 82 \n  A loop starting at line 82 was fused with the loop starting at line 80.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 82 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 84 \n  A data region was created at line 84 and ending at line 105.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 84 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 105 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 84 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 105 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 84 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 105 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 85 \n  A region starting at line 85 and ending at line 90 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 85 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 90 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 87 \n  A loop starting at line 87 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 92 \n  A region starting at line 92 and ending at line 97 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 92 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 97 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 94 \n  A loop starting at line 94 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 99 \n  A region starting at line 99 and ending at line 104 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 99 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 104 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 99 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 104 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 99 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 104 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 101 \n  A loop starting at line 101 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 107 \n  A loop starting at line 107 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 107 \n  A loop starting at line 107 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 136 \n  A loop starting at line 136 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 145 \n  A loop starting at line 145 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0104 seconds\nCray Fortran : 181 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8163270439836197
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4153498910018243,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self.F90/acc_update_self.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 23 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, free at line 31 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 33 \n  A loop starting at line 33 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 66 \n  A loop starting at line 66 was fused with the loop starting at line 64.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 66 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 68 \n  A data region was created at line 68 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 68 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 68 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 68 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 89 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 69 \n  A region starting at line 69 and ending at line 74 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 69 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 71 \n  A loop starting at line 71 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 76 \n  A region starting at line 76 and ending at line 81 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 81 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 78 \n  A loop starting at line 78 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 91 \n  A loop starting at line 91 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 91 \n  A loop starting at line 91 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self.F90, Line = 128 \n  A loop starting at line 128 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0098 seconds\nCray Fortran : 164 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8170634169946425
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4295756320352666,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_async.F90/acc_update_self_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5664188209921122
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033308101003058255,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self_async_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_async_with_len.F90/acc_update_self_async_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_async_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164922880358063
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033398005994968116,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_update_self_with_len.F90/acc_update_self_with_len.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 23 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, free at line 31 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 33 \n  A loop starting at line 33 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 66 \n  A loop starting at line 66 was fused with the loop starting at line 64.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 66 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 68 \n  A data region was created at line 68 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 68 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 68 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 68 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 89 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 69 \n  A region starting at line 69 and ending at line 74 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 69 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 71 \n  A loop starting at line 71 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 76 \n  A region starting at line 76 and ending at line 81 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 81 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 78 \n  A loop starting at line 78 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 91 \n  A loop starting at line 91 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 91 \n  A loop starting at line 91 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 128 \n  A loop starting at line 128 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0098 seconds\nCray Fortran : 164 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8167751900036819
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3696299489820376,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_wait.F90/acc_wait.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90, Line = 23 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90, Line = 27 \n  A region starting at line 27 and ending at line 32 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90, Line = 33 \n  A region starting at line 33 and ending at line 38 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90, Line = 35 \n  A loop starting at line 35 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90, Line = 43 \n  A loop starting at line 43 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait.F90, Line = 70 \n  A loop starting at line 70 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0072 seconds\nCray Fortran : 97 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170575929922052
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4353036119719036,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_all.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_wait_all.F90/acc_wait_all.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 22 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 20.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 27 \n  A data region was created at line 27 and ending at line 53.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 27 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 53 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 27 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 53 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 27 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 53 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 27 \n  If not already present: allocate memory for user shaped variable \"d\" on accelerator, copy back at line 53 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 28 \n  A region starting at line 28 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 28 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 34 \n  A region starting at line 34 and ending at line 39 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 40 \n  A region starting at line 40 and ending at line 45 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 40 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 42 \n  A loop starting at line 42 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 47 \n  A region starting at line 47 and ending at line 52 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 47 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 52 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 47 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 52 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 47 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 52 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 47 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, copy back at line 52 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 49 \n  A loop starting at line 49 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 55 \n  A loop starting at line 55 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 55 \n  A loop starting at line 55 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90, Line = 80 \n  A loop starting at line 80 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0071 seconds\nCray Fortran : 107 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7666423969785683
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42881022300571203,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_all_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_wait_all_async.F90/acc_wait_all_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 21.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 23 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 21.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 21.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 29 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 21.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 30 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 21.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 31 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 32 \n  A loop starting at line 32 was fused with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 33 \n  A loop starting at line 33 was fused with the loop starting at line 24.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 34 \n  A loop starting at line 34 was fused with the loop starting at line 27.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  A data region was created at line 36 and ending at line 88.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory for user shaped variable \"j\" on accelerator, free at line 88 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory for user shaped variable \"i\" on accelerator, free at line 88 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory for user shaped variable \"f\" on accelerator, free at line 88 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, free at line 88 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"h\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"g\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"e\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory for user shaped variable \"k\" on accelerator, copy back at line 88 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 37 \n  A region starting at line 37 and ending at line 42 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 39 \n  A loop starting at line 39 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 43 \n  A region starting at line 43 and ending at line 48 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 43 \n  If not already present: allocate memory and copy whole array \"e\" to accelerator, free at line 48 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 43 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, free at line 48 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 43 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, copy back at line 48 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 45 \n  A loop starting at line 45 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 49 \n  A region starting at line 49 and ending at line 54 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 49 \n  If not already present: allocate memory and copy whole array \"h\" to accelerator, free at line 54 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 49 \n  If not already present: allocate memory and copy whole array \"g\" to accelerator, free at line 54 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 49 \n  If not already present: allocate memory and copy whole array \"i\" to accelerator, copy back at line 54 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 51 \n  A loop starting at line 51 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 56 \n  A region starting at line 56 and ending at line 61 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 56 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, free at line 61 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 56 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 61 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 56 \n  If not already present: allocate memory and copy whole array \"i\" to accelerator, free at line 61 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 56 \n  If not already present: allocate memory and copy whole array \"j\" to accelerator, copy back at line 61 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 58 \n  A loop starting at line 58 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 62 \n  A region starting at line 62 and ending at line 67 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 62 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 62 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 62 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 64 \n  A loop starting at line 64 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 68 \n  A region starting at line 68 and ending at line 73 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"e\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 70 \n  A loop starting at line 70 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 74 \n  A region starting at line 74 and ending at line 79 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 74 \n  If not already present: allocate memory and copy whole array \"i\" to accelerator, free at line 79 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 74 \n  If not already present: allocate memory and copy whole array \"h\" to accelerator, free at line 79 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 74 \n  If not already present: allocate memory and copy whole array \"g\" to accelerator, copy back at line 79 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 76 \n  A loop starting at line 76 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"j\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"g\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"k\" to accelerator, copy back at line 86 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 83 \n  A loop starting at line 83 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 90 \n  A loop starting at line 90 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 90 \n  A loop starting at line 90 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0079 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 1.0172076690359972
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4861757520120591,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/acc_wait_async.F90/acc_wait_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 24 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 27 \n  A loop starting at line 27 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 27 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  A data region was created at line 29 and ending at line 57.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"h\" on accelerator, free at line 57 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"f\" on accelerator, free at line 57 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, free at line 57 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"g\" to accelerator, free at line 57 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"e\" to accelerator, free at line 57 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 57 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 57 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 57 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"i\" on accelerator, copy back at line 57 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 37 \n  A region starting at line 37 and ending at line 42 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"g\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"h\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 39 \n  A loop starting at line 39 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 43 \n  A region starting at line 43 and ending at line 48 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 43 \n  If not already present: allocate memory and copy whole array \"e\" to accelerator, free at line 48 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 43 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, free at line 48 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 43 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, copy back at line 48 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 45 \n  A loop starting at line 45 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 50 \n  A region starting at line 50 and ending at line 55 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 50 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, free at line 55 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 50 \n  If not already present: allocate memory and copy whole array \"h\" to accelerator, free at line 55 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 50 \n  If not already present: allocate memory and copy whole array \"i\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 52 \n  A loop starting at line 52 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 59 \n  A loop starting at line 59 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 59 \n  A loop starting at line 59 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90, Line = 84 \n  A loop starting at line 84 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0076 seconds\nCray Fortran : 111 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.866802879027091
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46219347999431193,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_and_x.F90/atomic_capture_assign_expr_and_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 17 \n  A loop starting at line 17 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 54 \n   A loop nest at line 54 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 55 \n  A loop starting at line 55 was interchanged with the loop starting at line 56.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 55 \n  A loop starting at line 55 was fused with the loop starting at line 54.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 56 \n  A loop starting at line 56 was fused with the loop starting at line 54.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 65 \n  A loop starting at line 65 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 66 \n  A loop starting at line 66 was fused with the loop starting at line 65.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 68 \n  A data region was created at line 68 and ending at line 80.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 68 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 80 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 68 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 80 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 68 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 80 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 69 \n  A region starting at line 69 and ending at line 79 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 69 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 79 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 69 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 79 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 69 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 79 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 71 \n  A loop starting at line 71 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 72 \n  A loop starting at line 72 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 82 \n  A loop starting at line 82 was interchanged with the loop starting at line 83.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 82 \n  A loop starting at line 82 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 82 \n  A loop starting at line 82 was vectorized.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 96 \n  A loop starting at line 96 was eliminated by optimization.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 125 \n  A loop starting at line 125 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 152 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7666188619914465
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4615393379935995,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_divided_x.F90/atomic_capture_assign_expr_divided_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 98 \n   A loop nest at line 98 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 100 \n  A loop starting at line 100 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 102 \n  A data region was created at line 102 and ending at line 114.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 114 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 114 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 102 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 114 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 103 \n  A region starting at line 103 and ending at line 113 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 113 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 105 \n  A loop starting at line 105 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 106 \n  A loop starting at line 106 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 156 \n  A loop starting at line 156 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0070 seconds\nCray Fortran : 183 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8165283330017701
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_divided_x.F90/atomic_capture_assign_expr_divided_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6252970219939016
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06531029200414196,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_eqv_x.F90/atomic_capture_assign_expr_eqv_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 93 \n  A loop starting at line 93 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7663175100460649
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4622309219557792,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_minus_x.F90/atomic_capture_assign_expr_minus_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 91 \n   A loop nest at line 91 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 93 \n  A loop starting at line 93 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 95 \n  A data region was created at line 95 and ending at line 107.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 107 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 107 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 95 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 107 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 96 \n  A region starting at line 96 and ending at line 106 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 106 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 98 \n  A loop starting at line 98 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 99 \n  A loop starting at line 99 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 110 \n  A loop starting at line 110 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 113, Column = 52 \n  Procedure \"IS_POSSIBLE\" is defined at line 37 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 148 \n  A loop starting at line 148 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0072 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8168174109887332
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_minus_x.F90/atomic_capture_assign_expr_minus_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 166 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5742731190402992
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06546250596875325,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_neqv_x.F90/atomic_capture_assign_expr_neqv_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 58 \n  A loop starting at line 58 was interchanged with the loop starting at line 59.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 58 \n  A loop starting at line 58 was fused with the loop starting at line 57.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 57.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 68 \n  A loop starting at line 68 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 69 \n  A loop starting at line 69 was fused with the loop starting at line 68.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 71 \n  A data region was created at line 71 and ending at line 83.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 71 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 83 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 72 \n  A region starting at line 72 and ending at line 82 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 74 \n  A loop starting at line 74 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 75 \n  A loop starting at line 75 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 99 \n  A loop starting at line 99 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7669013070408255
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3707385089946911,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_or_x.F90/atomic_capture_assign_expr_or_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 100 \n  A loop starting at line 100 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7667049680021591
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4341827780008316,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_plus_x.F90/atomic_capture_assign_expr_plus_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7663352240342647
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4637982299900614,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_times_x.F90/atomic_capture_assign_expr_times_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7667054889607243
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4312670470098965,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_iand_expr_x.F90/atomic_capture_assign_iand_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 51 \n   A loop nest at line 51 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 52 \n   A loop nest at line 52 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 52 \n  A loop starting at line 52 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 53 \n  A loop starting at line 53 was interchanged with the loop starting at line 55.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 53 \n  A loop starting at line 53 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 53 \n  A loop starting at line 53 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 54 \n  A loop starting at line 54 was collapsed into the loop starting at line 53.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 62 \n  A loop starting at line 62 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 64 \n  A loop starting at line 64 was fused with the loop starting at line 62.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 65 \n  A loop starting at line 65 was vectorized as part of the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 71 \n  A data region was created at line 71 and ending at line 83.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 71 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 83 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 72 \n  A region starting at line 72 and ending at line 82 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 74 \n  A loop starting at line 74 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 75 \n  A loop starting at line 75 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 84 \n  A loop starting at line 84 was interchanged with the loop starting at line 85.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 84 \n  A loop starting at line 84 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 84 \n  A loop starting at line 84 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 97 \n  A loop starting at line 97 was unwound.\n\n\nftn-6205 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 102 \n  A loop starting at line 102 was vectorized with a single vector iteration.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7666152449673973
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42423168098321185,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_iand_x_expr.F90/atomic_capture_assign_iand_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 69 \n  A loop starting at line 69 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 71 \n  A loop starting at line 71 was fused with the loop starting at line 69.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 72 \n  A loop starting at line 72 was vectorized as part of the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 78 \n  A data region was created at line 78 and ending at line 90.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 90 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 90 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 78 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 90 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 79 \n  A region starting at line 79 and ending at line 89 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 81 \n  A loop starting at line 81 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 82 \n  A loop starting at line 82 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 91 \n  A loop starting at line 91 was interchanged with the loop starting at line 92.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 91 \n  A loop starting at line 91 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 91 \n  A loop starting at line 91 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 104 \n  A loop starting at line 104 was unwound.\n\n\nftn-6205 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 109 \n  A loop starting at line 109 was vectorized with a single vector iteration.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 136 \n  A loop starting at line 136 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 163 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8171997989993542
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4357065709773451,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_ior_expr_x.F90/atomic_capture_assign_ior_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7670385020319372
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4337230100063607,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_ior_x_expr.F90/atomic_capture_assign_ior_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7666403040057048
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43151330400723964,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_ixor_expr_x.F90/atomic_capture_assign_ixor_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8166601969860494
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46728172700386494,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_ixor_x_expr.F90/atomic_capture_assign_ixor_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7668424229486845
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43878428504103795,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_expr_list_x.F90/atomic_capture_assign_max_expr_list_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 61 \n  A loop starting at line 61 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 62 \n  A loop starting at line 62 was fused with the loop starting at line 61.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 64 \n  A data region was created at line 64 and ending at line 76.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 64 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 64 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 64 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 64 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 76 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 65 \n  A region starting at line 65 and ending at line 75 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 75 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 75 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 75 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 75 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 67 \n  A loop starting at line 67 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 68 \n  A loop starting at line 68 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 77 \n  A loop starting at line 77 was interchanged with the loop starting at line 78.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 77 \n  A loop starting at line 77 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 77 \n  A loop starting at line 77 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 90 \n  A loop starting at line 90 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 123 \n  A loop starting at line 123 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 150 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8169853450381197
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43293604103382677,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_expr_x.F90/atomic_capture_assign_max_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7666722749709152
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42544567602453753,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_x_expr.F90/atomic_capture_assign_max_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7668965079938062
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4402467079926282,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_x_expr_list.F90/atomic_capture_assign_max_x_expr_list.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 60 \n   A loop nest at line 60 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 62 \n  A loop starting at line 62 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 65 \n  A data region was created at line 65 and ending at line 77.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 66 \n  A region starting at line 66 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 68 \n  A loop starting at line 68 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 69 \n  A loop starting at line 69 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 78 \n  A loop starting at line 78 was interchanged with the loop starting at line 79.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 78 \n  A loop starting at line 78 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 78 \n  A loop starting at line 78 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.816571376984939
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.424993471999187,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_expr_list_x.F90/atomic_capture_assign_min_expr_list_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 60 \n   A loop nest at line 60 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 62 \n  A loop starting at line 62 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 65 \n  A data region was created at line 65 and ending at line 77.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 66 \n  A region starting at line 66 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 68 \n  A loop starting at line 68 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 69 \n  A loop starting at line 69 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 78 \n  A loop starting at line 78 was interchanged with the loop starting at line 79.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 78 \n  A loop starting at line 78 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 78 \n  A loop starting at line 78 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8163703479804099
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.48619071196299046,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_expr_x.F90/atomic_capture_assign_min_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.767042791005224
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4457981580053456,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_x_expr.F90/atomic_capture_assign_min_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7671093689859845
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.48959090799326077,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_x_expr_list.F90/atomic_capture_assign_min_x_expr_list.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 60 \n   A loop nest at line 60 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 62 \n  A loop starting at line 62 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 65 \n  A data region was created at line 65 and ending at line 77.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 66 \n  A region starting at line 66 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 68 \n  A loop starting at line 68 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 69 \n  A loop starting at line 69 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 78 \n  A loop starting at line 78 was interchanged with the loop starting at line 79.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 78 \n  A loop starting at line 78 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 78 \n  A loop starting at line 78 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7670801830245182
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46917854802450165,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_and_expr.F90/atomic_capture_assign_x_and_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 17 \n  A loop starting at line 17 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 55 \n   A loop nest at line 55 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 56 \n  A loop starting at line 56 was interchanged with the loop starting at line 57.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 56 \n  A loop starting at line 56 was fused with the loop starting at line 55.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 57 \n  A loop starting at line 57 was fused with the loop starting at line 55.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 66 \n  A loop starting at line 66 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 67 \n  A loop starting at line 67 was fused with the loop starting at line 66.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 69 \n  A data region was created at line 69 and ending at line 81.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 81 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 81 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 69 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 81 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 70 \n  A region starting at line 70 and ending at line 80 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 80 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 80 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 80 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 72 \n  A loop starting at line 72 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 73 \n  A loop starting at line 73 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 83 \n  A loop starting at line 83 was interchanged with the loop starting at line 84.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 97 \n  A loop starting at line 97 was eliminated by optimization.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 126 \n  A loop starting at line 126 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 153 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7666387100471184
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4601143039762974,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_divided_expr.F90/atomic_capture_assign_x_divided_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 98 \n   A loop nest at line 98 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 100 \n  A loop starting at line 100 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 102 \n  A data region was created at line 102 and ending at line 114.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 114 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 114 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 102 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 114 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 103 \n  A region starting at line 103 and ending at line 113 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 113 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 105 \n  A loop starting at line 105 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 106 \n  A loop starting at line 106 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 156 \n  A loop starting at line 156 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0071 seconds\nCray Fortran : 183 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8164029500330798
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_divided_expr.F90/atomic_capture_assign_x_divided_expr.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6245315209962428
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0649056090041995,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_eqv_expr.F90/atomic_capture_assign_x_eqv_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 93 \n  A loop starting at line 93 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7664541600388475
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.44086011400213465,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_minus_expr.F90/atomic_capture_assign_x_minus_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 91 \n   A loop nest at line 91 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 93 \n  A loop starting at line 93 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 95 \n  A data region was created at line 95 and ending at line 107.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 107 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 107 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 95 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 107 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 96 \n  A region starting at line 96 and ending at line 106 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 106 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 98 \n  A loop starting at line 98 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 99 \n  A loop starting at line 99 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 110 \n  A loop starting at line 110 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 113, Column = 46 \n  Procedure \"IS_POSSIBLE\" is defined at line 37 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 148 \n  A loop starting at line 148 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9173504799837247
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_minus_expr.F90/atomic_capture_assign_x_minus_expr.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 166 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6295690099941567
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06550810200860724,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_neqv_expr.F90/atomic_capture_assign_x_neqv_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 58 \n  A loop starting at line 58 was interchanged with the loop starting at line 59.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 58 \n  A loop starting at line 58 was fused with the loop starting at line 57.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 57.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 68 \n  A loop starting at line 68 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 69 \n  A loop starting at line 69 was fused with the loop starting at line 68.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 71 \n  A data region was created at line 71 and ending at line 83.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 71 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 83 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 72 \n  A region starting at line 72 and ending at line 82 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 74 \n  A loop starting at line 74 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 75 \n  A loop starting at line 75 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 99 \n  A loop starting at line 99 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0061 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7667963599669747
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.44899378198897466,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_or_expr.F90/atomic_capture_assign_x_or_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 100 \n  A loop starting at line 100 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7667942869593389
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42819107696413994,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_plus_expr.F90/atomic_capture_assign_x_plus_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7670326569932513
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43079259200021625,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_times_expr.F90/atomic_capture_assign_x_times_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7669032789999619
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.43116820603609085,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_and_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_and_x_assign.F90/atomic_capture_expr_and_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 17 \n  A loop starting at line 17 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 54 \n  A loop starting at line 54 was interchanged with the loop starting at line 55.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 54 \n  A loop starting at line 54 was fused with the loop starting at line 53.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 55 \n  A loop starting at line 55 was fused with the loop starting at line 53.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 64 \n  A loop starting at line 64 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 65 \n  A loop starting at line 65 was fused with the loop starting at line 64.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 67 \n  A data region was created at line 67 and ending at line 79.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 67 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 79 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 67 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 79 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 67 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 79 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 68 \n  A region starting at line 68 and ending at line 78 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 78 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 78 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 78 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 70 \n  A loop starting at line 70 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 71 \n  A loop starting at line 71 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 81 \n  A loop starting at line 81 was interchanged with the loop starting at line 82.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 81 \n  A loop starting at line 81 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 81 \n  A loop starting at line 81 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 146 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7669699160032906
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43209698097780347,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_divided_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_divided_x_assign.F90/atomic_capture_expr_divided_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 98 \n   A loop nest at line 98 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 100 \n  A loop starting at line 100 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 102 \n  A data region was created at line 102 and ending at line 114.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 114 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 114 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 102 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 114 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 103 \n  A region starting at line 103 and ending at line 113 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 113 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 105 \n  A loop starting at line 105 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 106 \n  A loop starting at line 106 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 156 \n  A loop starting at line 156 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0070 seconds\nCray Fortran : 183 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8163683279999532
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_divided_x_assign.F90/atomic_capture_expr_divided_x_assign.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6236409010016359
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06519190198741853,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_eqv_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_eqv_x_assign.F90/atomic_capture_expr_eqv_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 93 \n  A loop starting at line 93 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7667045239941217
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4618033909937367,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_minus_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_minus_x_assign.F90/atomic_capture_expr_minus_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 91 \n   A loop nest at line 91 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 93 \n  A loop starting at line 93 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 95 \n  A data region was created at line 95 and ending at line 107.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 107 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 107 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 95 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 107 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 96 \n  A region starting at line 96 and ending at line 106 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 106 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 98 \n  A loop starting at line 98 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 99 \n  A loop starting at line 99 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 110 \n  A loop starting at line 110 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 113, Column = 52 \n  Procedure \"IS_POSSIBLE\" is defined at line 37 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 148 \n  A loop starting at line 148 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8163976049982011
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_minus_x_assign.F90/atomic_capture_expr_minus_x_assign.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 166 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6263565859990194
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06498226703843102,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_neqv_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_neqv_x_assign.F90/atomic_capture_expr_neqv_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 58 \n  A loop starting at line 58 was interchanged with the loop starting at line 59.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 58 \n  A loop starting at line 58 was fused with the loop starting at line 57.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 57.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 68 \n  A loop starting at line 68 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 69 \n  A loop starting at line 69 was fused with the loop starting at line 68.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 71 \n  A data region was created at line 71 and ending at line 83.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 71 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 83 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 72 \n  A region starting at line 72 and ending at line 82 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 74 \n  A loop starting at line 74 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 75 \n  A loop starting at line 75 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 99 \n  A loop starting at line 99 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7669535650056787
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4389999120030552,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_or_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_or_x_assign.F90/atomic_capture_expr_or_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 100 \n  A loop starting at line 100 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8169308240176179
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4349519740208052,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_plus_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_plus_x_assign.F90/atomic_capture_expr_plus_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7669276049709879
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43516898300731555,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_times_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_expr_times_x_assign.F90/atomic_capture_expr_times_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7671999299782328
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4286809539771639,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_iand_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_iand_expr_x_assign.F90/atomic_capture_iand_expr_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 69 \n  A loop starting at line 69 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 71 \n  A loop starting at line 71 was fused with the loop starting at line 69.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 72 \n  A loop starting at line 72 was vectorized as part of the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 78 \n  A data region was created at line 78 and ending at line 90.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 90 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 90 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 78 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 90 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 79 \n  A region starting at line 79 and ending at line 89 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 81 \n  A loop starting at line 81 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 82 \n  A loop starting at line 82 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 91 \n  A loop starting at line 91 was interchanged with the loop starting at line 92.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 91 \n  A loop starting at line 91 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 91 \n  A loop starting at line 91 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 104 \n  A loop starting at line 104 was unwound.\n\n\nftn-6205 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 109 \n  A loop starting at line 109 was vectorized with a single vector iteration.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 136 \n  A loop starting at line 136 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 163 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8167072520009242
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46841215499443933,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_iand_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_iand_x_expr_assign.F90/atomic_capture_iand_x_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 69 \n  A loop starting at line 69 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 71 \n  A loop starting at line 71 was fused with the loop starting at line 69.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 72 \n  A loop starting at line 72 was vectorized as part of the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 78 \n  A data region was created at line 78 and ending at line 90.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 90 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 90 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 78 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 90 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 79 \n  A region starting at line 79 and ending at line 89 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 81 \n  A loop starting at line 81 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 82 \n  A loop starting at line 82 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 91 \n  A loop starting at line 91 was interchanged with the loop starting at line 92.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 91 \n  A loop starting at line 91 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 91 \n  A loop starting at line 91 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 104 \n  A loop starting at line 104 was unwound.\n\n\nftn-6205 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 109 \n  A loop starting at line 109 was vectorized with a single vector iteration.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 136 \n  A loop starting at line 136 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 163 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8169995860080235
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4375394720118493,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ior_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_ior_expr_x_assign.F90/atomic_capture_ior_expr_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8168714590137824
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43810139602283016,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ior_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_ior_x_expr_assign.F90/atomic_capture_ior_x_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7675667990115471
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4249180479673669,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ixor_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_ixor_expr_x_assign.F90/atomic_capture_ixor_expr_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8173144349711947
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.48020097700646147,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ixor_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_ixor_x_expr_assign.F90/atomic_capture_ixor_x_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8172847569803707
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4647336750058457,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_expr_list_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_max_expr_list_x_assign.F90/atomic_capture_max_expr_list_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 60 \n   A loop nest at line 60 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 62 \n  A loop starting at line 62 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 65 \n  A data region was created at line 65 and ending at line 77.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 66 \n  A region starting at line 66 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 68 \n  A loop starting at line 68 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 69 \n  A loop starting at line 69 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 78 \n  A loop starting at line 78 was interchanged with the loop starting at line 79.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 78 \n  A loop starting at line 78 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 78 \n  A loop starting at line 78 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8167355009936728
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4307606859947555,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_max_expr_x_assign.F90/atomic_capture_max_expr_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8167868350283243
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4648795899702236,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_max_x_expr_assign.F90/atomic_capture_max_x_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7666086370008998
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4714876399957575,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_x_expr_list_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_max_x_expr_list_assign.F90/atomic_capture_max_x_expr_list_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 60 \n   A loop nest at line 60 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 62 \n  A loop starting at line 62 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 65 \n  A data region was created at line 65 and ending at line 77.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 66 \n  A region starting at line 66 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 68 \n  A loop starting at line 68 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 69 \n  A loop starting at line 69 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 78 \n  A loop starting at line 78 was interchanged with the loop starting at line 79.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 78 \n  A loop starting at line 78 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 78 \n  A loop starting at line 78 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8166092410101555
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.47228778596036136,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_expr_list_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_min_expr_list_x_assign.F90/atomic_capture_min_expr_list_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 60 \n   A loop nest at line 60 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 62 \n  A loop starting at line 62 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 65 \n  A data region was created at line 65 and ending at line 77.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 66 \n  A region starting at line 66 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 68 \n  A loop starting at line 68 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 69 \n  A loop starting at line 69 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 78 \n  A loop starting at line 78 was interchanged with the loop starting at line 79.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 78 \n  A loop starting at line 78 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 78 \n  A loop starting at line 78 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8164894690271467
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46969803201500326,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_min_expr_x_assign.F90/atomic_capture_min_expr_x_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7664371359860525
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4816244390094653,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_min_x_expr_assign.F90/atomic_capture_min_x_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0061 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7666136670159176
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43941351800458506,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_x_expr_list_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_min_x_expr_list_assign.F90/atomic_capture_min_x_expr_list_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 60 \n   A loop nest at line 60 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 62 \n  A loop starting at line 62 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 65 \n  A data region was created at line 65 and ending at line 77.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 66 \n  A region starting at line 66 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 68 \n  A loop starting at line 68 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 69 \n  A loop starting at line 69 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 78 \n  A loop starting at line 78 was interchanged with the loop starting at line 79.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 78 \n  A loop starting at line 78 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 78 \n  A loop starting at line 78 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.816622467013076
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4525152069982141,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_and_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_and_expr_assign.F90/atomic_capture_x_and_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 17 \n  A loop starting at line 17 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 55 \n   A loop nest at line 55 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 56 \n  A loop starting at line 56 was interchanged with the loop starting at line 57.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 56 \n  A loop starting at line 56 was fused with the loop starting at line 55.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 57 \n  A loop starting at line 57 was fused with the loop starting at line 55.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 66 \n  A loop starting at line 66 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 67 \n  A loop starting at line 67 was fused with the loop starting at line 66.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 69 \n  A data region was created at line 69 and ending at line 81.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 81 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 81 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 69 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 81 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 70 \n  A region starting at line 70 and ending at line 80 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 80 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 80 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 80 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 72 \n  A loop starting at line 72 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 73 \n  A loop starting at line 73 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 83 \n  A loop starting at line 83 was interchanged with the loop starting at line 84.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 97 \n  A loop starting at line 97 was eliminated by optimization.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 126 \n  A loop starting at line 126 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0061 seconds\nCray Fortran : 153 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7670974219799973
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4229967020219192,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_divided_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_divided_expr_assign.F90/atomic_capture_x_divided_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 98 \n   A loop nest at line 98 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 100 \n  A loop starting at line 100 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 102 \n  A data region was created at line 102 and ending at line 114.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 114 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 114 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 102 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 114 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 103 \n  A region starting at line 103 and ending at line 113 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 113 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 105 \n  A loop starting at line 105 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 106 \n  A loop starting at line 106 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 156 \n  A loop starting at line 156 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0070 seconds\nCray Fortran : 183 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8165360799757764
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_divided_expr_assign.F90/atomic_capture_x_divided_expr_assign.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6230759540339932
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06529338395921513,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_eqv_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_eqv_expr_assign.F90/atomic_capture_x_eqv_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 93 \n  A loop starting at line 93 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7670740709872916
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36826215201290324,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_minus_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_minus_expr_assign.F90/atomic_capture_x_minus_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 91 \n   A loop nest at line 91 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 93 \n  A loop starting at line 93 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 95 \n  A data region was created at line 95 and ending at line 107.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 107 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 107 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 95 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 107 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 96 \n  A region starting at line 96 and ending at line 106 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 106 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 98 \n  A loop starting at line 98 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 99 \n  A loop starting at line 99 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 110 \n  A loop starting at line 110 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 113, Column = 46 \n  Procedure \"IS_POSSIBLE\" is defined at line 37 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 148 \n  A loop starting at line 148 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0070 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8165510499966331
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_minus_expr_assign.F90/atomic_capture_x_minus_expr_assign.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 166 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.625065044965595
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06509663397446275,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_neqv_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_neqv_expr_assign.F90/atomic_capture_x_neqv_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 58 \n  A loop starting at line 58 was interchanged with the loop starting at line 59.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 58 \n  A loop starting at line 58 was fused with the loop starting at line 57.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 57.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 68 \n  A loop starting at line 68 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 69 \n  A loop starting at line 69 was fused with the loop starting at line 68.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 71 \n  A data region was created at line 71 and ending at line 83.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 71 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 83 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 72 \n  A region starting at line 72 and ending at line 82 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 74 \n  A loop starting at line 74 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 75 \n  A loop starting at line 75 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 99 \n  A loop starting at line 99 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7664743839995936
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.44044728501467034,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_or_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_or_expr_assign.F90/atomic_capture_x_or_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 100 \n  A loop starting at line 100 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7664173539960757
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4298684839741327,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_plus_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_plus_expr_assign.F90/atomic_capture_x_plus_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0061 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7668218850158155
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.44959603203460574,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_times_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_capture_x_times_expr_assign.F90/atomic_capture_x_times_expr_assign.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0061 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7675987440161407
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4571545490180142,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_and_x.F90/atomic_expr_and_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170717580011114
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4263105239951983,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_and_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_and_x_end.F90/atomic_expr_and_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6662239509751089
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4291944829747081,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_divided_x.F90/atomic_expr_divided_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 57 \n  A data region was created at line 57 and ending at line 67.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 58 \n  A region starting at line 58 and ending at line 66 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 66 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 66 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 71 \n  A loop starting at line 71 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 74, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7169030309887603
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_divided_x.F90/atomic_expr_divided_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Tue Jan 10, 2023  16:46:42\nCray Fortran : Compile time:  0.0500 seconds\nCray Fortran : 116 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5249375600251369
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06498297501821071,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_divided_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_divided_x_end.F90/atomic_expr_divided_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 57 \n  A data region was created at line 57 and ending at line 68.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 68 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 68 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 58 \n  A region starting at line 58 and ending at line 67 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 72 \n  A loop starting at line 72 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 75, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 99 \n  A loop starting at line 99 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 126 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7166548319510184
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_divided_x_end.F90/atomic_expr_divided_x_end.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Tue Jan 10, 2023  16:46:53\nCray Fortran : Compile time:  0.0502 seconds\nCray Fortran : 117 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5752416520263068
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06550640502246097,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_eqv_x.F90/atomic_expr_eqv_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6667234299820848
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.45639354398008436,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_eqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_eqv_x_end.F90/atomic_expr_eqv_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7166418829583563
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.425263706012629,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_minus_x.F90/atomic_expr_minus_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 57 \n  A data region was created at line 57 and ending at line 67.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 58 \n  A region starting at line 58 and ending at line 66 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 66 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 66 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 70 \n  A loop starting at line 70 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 73, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 97 \n  A loop starting at line 97 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 124 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7162356069893576
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_minus_x.F90/atomic_expr_minus_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Tue Jan 10, 2023  16:47:07\nCray Fortran : Compile time:  0.0491 seconds\nCray Fortran : 115 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5746898360084742
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06563384202308953,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_minus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_minus_x_end.F90/atomic_expr_minus_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 57 \n  A data region was created at line 57 and ending at line 68.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 68 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 68 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 58 \n  A region starting at line 58 and ending at line 67 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 71 \n  A loop starting at line 71 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 74, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170140519738197
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_minus_x_end.F90/atomic_expr_minus_x_end.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Tue Jan 10, 2023  16:47:19\nCray Fortran : Compile time:  0.0503 seconds\nCray Fortran : 116 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5762163839535788
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06543828401481733,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x.F90/atomic_expr_neqv_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-303 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x.F90, Line = 52, Column = 36 \n  Data type LOGICAL is not allowed with LOGICAL for the operation \"ne\".\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 104 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26607695600250736
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x.F90/atomic_expr_neqv_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5158917860244401
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03349007701035589,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_neqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x_end.F90/atomic_expr_neqv_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-303 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90, Line = 53, Column = 36 \n  Data type LOGICAL is not allowed with LOGICAL for the operation \"ne\".\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 105 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2662066060001962
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x_end.F90/atomic_expr_neqv_x_end.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5159620509948581
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0330438640085049,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_or_x.F90/atomic_expr_or_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6669439759571105
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.429820324992761,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_or_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_or_x_end.F90/atomic_expr_or_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6669851960032247
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4345179979573004,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_plus_x.F90/atomic_expr_plus_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6668054289766587
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42635970300761983,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_plus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_plus_x_end.F90/atomic_expr_plus_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6662586139864288
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4323210639995523,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_times_x.F90/atomic_expr_times_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6661576890037395
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42999792000046,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_times_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_expr_times_x_end.F90/atomic_expr_times_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7173564620316029
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4316204320057295,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_iand_expr_x.F90/atomic_iand_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 37 \n  A data region was created at line 37 and ending at line 45.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 38 \n  A region starting at line 38 and ending at line 44 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 46 \n  A loop starting at line 46 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 75 \n  A loop starting at line 75 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7176375859999098
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.48254058801103383,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_iand_expr_x_end.F90/atomic_iand_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 37 \n  A data region was created at line 37 and ending at line 46.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 46 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 46 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 38 \n  A region starting at line 38 and ending at line 45 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 47 \n  A loop starting at line 47 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 76 \n  A loop starting at line 76 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6662410789867863
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43055325996829197,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_iand_x_expr.F90/atomic_iand_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 37 \n  A data region was created at line 37 and ending at line 45.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 38 \n  A region starting at line 38 and ending at line 44 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 46 \n  A loop starting at line 46 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 75 \n  A loop starting at line 75 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170163250411861
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43679661804344505,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_iand_x_expr_end.F90/atomic_iand_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 37 \n  A data region was created at line 37 and ending at line 46.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 46 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 46 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 38 \n  A region starting at line 38 and ending at line 45 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 47 \n  A loop starting at line 47 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 76 \n  A loop starting at line 76 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7165326029644348
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42723071499494836,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ior_expr_x.F90/atomic_ior_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6663120760349557
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4373430829728022,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ior_expr_x_end.F90/atomic_ior_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7171436919597909
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.45874958200147375,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ior_x_expr.F90/atomic_ior_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7166626119869761
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4384834759985097,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ior_x_expr_end.F90/atomic_ior_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.666620020987466
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4325472110067494,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ixor_expr_x.F90/atomic_ixor_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7167816829751246
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4369801520369947,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ixor_expr_x_end.F90/atomic_ixor_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7171088039758615
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43186653702287003,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ixor_x_expr.F90/atomic_ixor_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7164352330146357
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4325673000421375,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_ixor_x_expr_end.F90/atomic_ixor_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6666732130106539
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43263766705058515,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_expr_list_x.F90/atomic_max_expr_list_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 32 \n  A loop starting at line 32 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6665850940044038
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4299275130033493,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_expr_list_x_end.F90/atomic_max_expr_list_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6668298459844664
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4292612169519998,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_expr_x.F90/atomic_max_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6664151849690825
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43001628504134715,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_expr_x_end.F90/atomic_max_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.666326854028739
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4309798849863,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_x_expr.F90/atomic_max_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6663804790005088
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42712914798175916,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_x_expr_end.F90/atomic_max_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6669851659680717
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4340024719713256,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_x_expr_list.F90/atomic_max_x_expr_list.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 25 \n  A region starting at line 25 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7162241360056214
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4302455370198004,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_max_x_expr_list_end.F90/atomic_max_x_expr_list_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8697687200037763
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4767559969914146,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_expr_list_x.F90/atomic_min_expr_list_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 25 \n  A region starting at line 25 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6663522739545442
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.48239398503210396,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_expr_list_x_end.F90/atomic_min_expr_list_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7166115649743006
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46274175198050216,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_expr_x.F90/atomic_min_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7172087070066482
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.472980945953168,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_expr_x_end.F90/atomic_min_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6669859270332381
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43267577997175977,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_x_expr.F90/atomic_min_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6662131159682758
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42809715698240325,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_x_expr_end.F90/atomic_min_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6664928949903697
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4319335479522124,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_x_expr_list.F90/atomic_min_x_expr_list.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 25 \n  A region starting at line 25 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170303839957342
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4721208169939928,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_min_x_expr_list_end.F90/atomic_min_x_expr_list_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.666957042994909
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4350297869532369,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_and_x.F90/atomic_update_expr_and_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6670176709885709
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.455831617990043,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_and_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_and_x_end.F90/atomic_update_expr_and_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.666852050984744
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4675813509966247,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x.F90/atomic_update_expr_divided_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 57 \n  A data region was created at line 57 and ending at line 67.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 58 \n  A region starting at line 58 and ending at line 66 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 66 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 66 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 71 \n  A loop starting at line 71 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 74, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170365470228717
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x.F90/atomic_update_expr_divided_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Tue Jan 10, 2023  16:48:13\nCray Fortran : Compile time:  0.0495 seconds\nCray Fortran : 116 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5736971410224214
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06500291399424896,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_divided_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x_end.F90/atomic_update_expr_divided_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 57 \n  A data region was created at line 57 and ending at line 68.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 68 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 68 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 58 \n  A region starting at line 58 and ending at line 67 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 72 \n  A loop starting at line 72 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 75, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 99 \n  A loop starting at line 99 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 126 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7164623370044865
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x_end.F90/atomic_update_expr_divided_x_end.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Tue Jan 10, 2023  16:48:25\nCray Fortran : Compile time:  0.0499 seconds\nCray Fortran : 117 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7301189709687606
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06535503297345713,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_eqv_x.F90/atomic_update_expr_eqv_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.917011356970761
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4728526209946722,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_eqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_eqv_x_end.F90/atomic_update_expr_eqv_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0075 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 1.4175221099867485
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4724564650095999,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x.F90/atomic_update_expr_minus_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 57 \n  A data region was created at line 57 and ending at line 67.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 58 \n  A region starting at line 58 and ending at line 66 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 66 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 66 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 70 \n  A loop starting at line 70 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 73, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 97 \n  A loop starting at line 97 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 124 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8171214900212362
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x.F90/atomic_update_expr_minus_x.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Tue Jan 10, 2023  16:48:40\nCray Fortran : Compile time:  0.0491 seconds\nCray Fortran : 115 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8270460559870116
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11575145903043449,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_minus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x_end.F90/atomic_update_expr_minus_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 57 \n  A data region was created at line 57 and ending at line 68.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 68 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 68 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 58 \n  A region starting at line 58 and ending at line 67 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 71 \n  A loop starting at line 71 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 74, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8164990679943003
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x_end.F90/atomic_update_expr_minus_x_end.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Tue Jan 10, 2023  16:48:52\nCray Fortran : Compile time:  0.0491 seconds\nCray Fortran : 116 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.581230869051069
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06524177402025089,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_neqv_x.F90/atomic_update_expr_neqv_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6661789109930396
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.45818530302494764,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_neqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_neqv_x_end.F90/atomic_update_expr_neqv_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6668414800078608
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43728944001486525,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_or_x.F90/atomic_update_expr_or_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6667606940027326
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4313981030136347,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_or_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_or_x_end.F90/atomic_update_expr_or_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7169923710171133
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4313252330175601,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_plus_x.F90/atomic_update_expr_plus_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9674395039910451
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.48248199705267325,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_plus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_plus_x_end.F90/atomic_update_expr_plus_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.816782325040549
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4739188599633053,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_times_x.F90/atomic_update_expr_times_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.926957335032057
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43191939999815077,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_times_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_expr_times_x_end.F90/atomic_update_expr_times_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8666393579915166
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43464781902730465,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_iand_expr_x.F90/atomic_update_iand_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 37 \n  A data region was created at line 37 and ending at line 45.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 38 \n  A region starting at line 38 and ending at line 44 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 46 \n  A loop starting at line 46 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 75 \n  A loop starting at line 75 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9734474559663795
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42769795801723376,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_iand_expr_x_end.F90/atomic_update_iand_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 37 \n  A data region was created at line 37 and ending at line 46.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 46 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 46 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 38 \n  A region starting at line 38 and ending at line 45 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 47 \n  A loop starting at line 47 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 76 \n  A loop starting at line 76 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9672929489752278
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4322713289875537,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_iand_x_expr.F90/atomic_update_iand_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 37 \n  A data region was created at line 37 and ending at line 45.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 38 \n  A region starting at line 38 and ending at line 44 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 46 \n  A loop starting at line 46 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 75 \n  A loop starting at line 75 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7669453700073063
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4334905130090192,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_iand_x_expr_end.F90/atomic_update_iand_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 37 \n  A data region was created at line 37 and ending at line 46.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 46 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 46 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 38 \n  A region starting at line 38 and ending at line 45 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 47 \n  A loop starting at line 47 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 76 \n  A loop starting at line 76 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.867176474945154
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4343109979527071,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ior_expr_x.F90/atomic_update_ior_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8744969610124826
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4684874989907257,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ior_expr_x_end.F90/atomic_update_ior_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6662173540098593
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4299351269728504,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ior_x_expr.F90/atomic_update_ior_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7165731610148214
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4288088820176199,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ior_x_expr_end.F90/atomic_update_ior_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6664277800009586
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4282188720535487,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ixor_expr_x.F90/atomic_update_ixor_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7165778299677186
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42737167701125145,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ixor_expr_x_end.F90/atomic_update_ixor_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7167436799500138
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.440721768012736,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ixor_x_expr.F90/atomic_update_ixor_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7163052539690398
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4371728040277958,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_ixor_x_expr_end.F90/atomic_update_ixor_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8167028210009448
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43561168102314696,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_expr_list_x.F90/atomic_update_max_expr_list_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 25 \n  A region starting at line 25 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9764663749956526
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42499759304337204,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_expr_list_x_end.F90/atomic_update_max_expr_list_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8165030560339801
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.49920042301528156,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_expr_x.F90/atomic_update_max_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8666781620122492
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4731526100076735,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_expr_x_end.F90/atomic_update_max_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7727071160334162
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4266540120006539,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr.F90/atomic_update_max_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8166783929918893
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42199586500646546,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_end.F90/atomic_update_max_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9171861030044965
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4292147560045123,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_list.F90/atomic_update_max_x_expr_list.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 25 \n  A region starting at line 25 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7668458470143378
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4352578870020807,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_list_end.F90/atomic_update_max_x_expr_list_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 1.070404888014309
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4282305260421708,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_expr_list_x.F90/atomic_update_min_expr_list_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 25 \n  A region starting at line 25 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8210745230317116
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42806634900625795,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_expr_list_x_end.F90/atomic_update_min_expr_list_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7168471289915033
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4339149529696442,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_expr_x.F90/atomic_update_min_expr_x.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6662848849664442
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4314343520090915,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_expr_x_end.F90/atomic_update_min_expr_x_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6662711869576015
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4244082249933854,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr.F90/atomic_update_min_x_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6661389219807461
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43205980001948774,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_end.F90/atomic_update_min_x_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7259392379783094
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43044393096351996,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_list.F90/atomic_update_min_x_expr_list.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 25 \n  A region starting at line 25 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9172384139965288
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.494687566999346,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_list_end.F90/atomic_update_min_x_expr_list_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 1.067773706978187
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43004275602288544,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_and_expr.F90/atomic_update_x_and_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7676159139955416
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.44138307601679116,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_and_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_and_expr_end.F90/atomic_update_x_and_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7665821780101396
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43484674295177683,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_divided_expr.F90/atomic_update_x_divided_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.721510054951068
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": " 2617.9938116663398\n 165337.17277252747\n 1335.0505698692396\n 890.12989781510657\n 1567.342985267414\n 1277.2002194076661\n 1729355.5166650824\n 8569.7158605928962\n 3602.4675633515426\n 30351137.567601915\n 6741.397180879525\n 95.981147053473833\n 660.42721143889423\n 294.33053213757887\n 32514.143932746134\n 99202.202491071061\n 62538859.333144389\n 105233.27329136351\n 142840.80571744553\n 3541.5473582779987\n 36707.163691406473\n 310.78047111155951\n 735.1806109477717\n 2448.5832724247607\n 2257.1117029340926\n 733.05221316678717\n 9550085.4631721321\n 79434.701153774833\n 1310.632211786047\n 440.92144655727907\n 5705.0168247456013\n 65992.512040740272\n 566048.52192825498\n 3565.0843481839925\n 3103.0792342526397\n 2783.6219854300803\n 78475335.797015592\n 74348.036201656461\n 1645076.8322576934\n 47279.542538734924\n 76995.085625878637\n 42634.469247693967\n 1049.0206072525095\n 10038.644397839447\n 5530385.6334116152\n 314608.1833106706\n 118392901.58818762\n 1638.3494361318583\n 8302.8285057219982\n 10192.423321138267\n 7569.1249953736524\n 3353327.5430429494\n 4155523.1188418497\n 785.46865834377377\n 30695.548822393561\n 594199.3942493737\n 1923.0285789669401\n 932.51676184586165\n 46175.108754303394\n 123584.79752866182\n 971.18602853881089\n 4144.785139345774\n 2805.366788085953\n 602.52245925392981\n 1826211.3972661407\n 14235.384565530099\n 15314.268081428387\n 233.9370055278622\n 47060.718212157975\n 582.93166897887329\n 32266.235808237889\n 18942.595278805496\n 2462.1310588906267\n 900705.19885265664\n 308741.1448523869\n 20364645.867401719\n 94025.909091344176\n 31350.255465035072\n 30086.186199335698\n 2094.1039299346153\n 6536.5080817610124\n 500734.83039016364\n 20063.598185221312\n 64713.534425082515\n 36704.757343840167\n 12171.830788763797\n 741184.6793477796\n 3218596.2481702268\n 142981.50523075042\n 9273.5499534228784\n 709590.96785270097\n 5938.0561228560537\n 60683.449595518694\n 25531.258929641383\n 2543.9533706725606\n 157.40180867679669\n 8372.9868561354779\n 49.652639318711273\n 433456.06624914787\n 546341.32814763044\n 1603.2547967046005\n 6104.4891593607717\n 2930.4862627190546\n 11664.766725373202\n 4148.6077645110818\n 2458.2708274428278\n 120580.18055619429\n 17824.270494852859\n 213.14644349787858\n 468.42801938824402\n 21575.079885371735\n 4708.4053696645151\n 810.86676875743524\n 83.244372398558156\n 6126.760496296446\n 71648.42478799494\n 689.23523965953382\n 1706.0828555504872\n 5103.5377170738884\n 41771.582882321949\n 15094.537732303175\n 19295.120432639484\n 108233.62425018483\n 53663.323051562424\n 198841.73110275972\n 3399.0470811787136\n 47581.379791794112\n 10159866.07971888\n 8996269.5409535635\n 279.05479779989287\n 73579.13327867302\n 642.07958732429131\n 11100.406459700351\n 12979.707199142847\n 566.55377551812467\n 35580.568786650401\n 5209.2521121466007\n 47889.624790165341\n 73179.656312581719\n 149934.44819732194\n 3992.5522911150665\n 418.0391516176955\n 1977.3633996688011\n 2493.7541196100419\n 741.97437319516655\n 79919.641275321905\n 126.23353761494113\n 26117.094412415456\n 2470.0857601691596\n 2387713835.0010114\n 2765.5840477285474\n 10589.234371181774\n 116086.26344662266\n 8539.9871466722198\n 34378.326766706436\n 29723.044882957547\n 1825.9765594887419\n 36687.492631491841\n 9967.945891880252\n 5532.9725031777389\n 16046.06194967997\n 62097.278336548108\n 171205.71041517635\n 31786.41302865525\n 4884.9843342815193\n 903.25410351273149\n 2509.90693909838\n 86.456194049018961\n 13005.273589432703\n 51490.72194591006\n 101976.68305773915\n 887.15100330824237\n 13420.085814122092\n 997.76874522850892\n 178503.7724859663\n 293223.28708105133\n 5374.9584700094756\n 1149.120204479\n 5395.409945163653\n 58200.122324386459\n 576505.35348011123\n 464.41962795109919\n 1650.9239687563111\n 124669113.39070979\n 1478837.8010065979\n 42025.031289062259\n 22590.130277242439\n 84.739118442199157\n 1563.3533793211984\n 42088.67011537886\n 3735.5644371151598\n 367.07629493983853\n 675895.10280589107\n 2702773.9749647612\n 173.69140883228798\n 352051.65228951426\n 9297.7220280222227\n 109022.01181986398\n 7700.0105472695841\n 619.67765417357691\n 461348.03470604122\n 274.44915928128722\n 3521.2874093548098\n 123901.43952208993\n 2190.4821046466004\n 1408627.6360970838\n 9593.2090210165152\n 747.99407593049511\n 2871.4277697031662\n 21908438.8102086\n 619.13812795334331\n 19317282.991028458\n 12329.090308101922\n 23973.520527966251\n 1783.3044785444827\n 1920173.251802393\n 242.81220317522565\n 9334.6580808036942\n 8335.8930225971781\n 192.26705963195224\n 155518.50090364076\n 3946.2737841984199\n 52231.472946070586\n 100738.07052699626\n 15.597794276730101\n 1838.5479602088901\n 2182633.1089006644\n 1500.8868091137115\n 6512.5706322524165\n 17263.362775468442\n 18823.752791045332\n 2489.8901912712181\n 1470.8435197041958\n 204.51271616760451\n 40057.442630028476\n 297003.45576044515\n 243.88637647482838\n 50589.777871786922\n 879.36531601780678\n 105.3064795023292\n 23744359.486094762\n 2921715.0259286924\n 10049.921452727409\n 12334.059211140811\n 1680.5814667009654\n 12462.168848388394\n 1940.702862389744\n 2687574.0634519039\n 283.02253359956035\n 171838.97786651866\n 3393.2740835730096\n 22169.805101431346\n 14561.783475550164\n 192095.62041044666\n 1236.6135984273521\n 460.6789822122239\n 11272.741972203416\n 247.08194488010977\n 1255359.492975323\n 98285.577449023884\n 207785.6778349753\n 596.42568081501588\n 1155.8361615080798\n 124.63135828260711\n 9534.7781178494824\n 759.87276576929901\n 2456.048487998944\n 7536.852241392603\n 6799821.7733616587\n 218926.58925003817\n 1100.0393501756273\n 10750.161232251819\n 5016.5811358117026\n 173984.55801815997\n 11004.414782115757\n 2732.6769311123753\n 369710.48546426796\n 432067.69766768703\n 149234.85391042451\n 217967.35242436774\n 27905.098918942993\n 35006.877924818386\n 12827.928351620612\n 369878275.82953751\n 4022.4008258826962\n 2957.2350226217536\n 13811.397934843246\n 5970.7371938683273\n 43495.662293594767\n 28704.825744908932\n 2825.5413159664245\n 1545.302983058376\n 1614590.3842796735\n 315.11472665925487\n 54333.138423170742\n 670.63632034701936\n 360896.2584730488\n 2382.3505382857452\n 24041.120581776871\n 46.007532483242379\n 44892.465142789508\n 396869.68883502827\n 978293.48492491269\n 289566.44004520972\n 39098.72469011823\n 64698.279397467006\n 220364.23174929642\n 174632.57674483582\n 128280.06832772505\n 8002.3249687348807\n 6863.1927265289605\n 5634.8326384041511\n 7465.5382409855811\n 2384.2150151261685\n 33660.786630457944\n 26152.288685424352\n 1970.2112884024045\n 1434923.69687386\n 1306027.7110657408\n 9183.0451297872805\n 6313601.6800858742\n 267792.34856180305\n 4941.9842303462619\n 2896.2219380965557\n 203773.78299709919\n 5672.7203212173445\n 77939.647537037134\n 3406.3730649264271\n 12064.71082898044\n 640910.53966564988\n 485.7287986442102\n 1992849.90894137\n 114856.77559501334\n 236413.7924875193\n 206706.63832452963\n 920.24321065910237\n 46542.998107712352\n 392.6219466692221\n 12993.433173880429\n 13592.604018900938\n 13568.707744194908\n 49857.128089271057\n 34625.998491398663\n 3387.9847156667815\n 164072.93954103073\n 881.4611337748529\n 1711707.6393791356\n 587.67270204777992\n 1093138.2086699393\n 30500.852896574885\n 750.19083849330798\n 1074615.6140973081\n 148541.92859101327\n 32561.199043240395\n 3310.4590744650018\n 1961.6587107388439\n 137037.8356431484\n 8304.3687624396862\n 7502.491365761457\n 116866.20504420012\n 56862.978803702019\n 4478732.9353104355\n 34934.170662190132\n 216800.88230193412\n 58589.078390552044\n 362.43108288142344\n 3190.7449077173014\n 4880.3993747892227\n 176826.51493147828\n 2796.1526630734324\n 58950.754735813818\n 6697.4669329889248\n 12647.918398094862\n 17467.977974971029\n 1324.3687683241401\n 9626.5082442921266\n 6575.2991040642682\n 3839.6692128467257\n 65113.832688096591\n 574.43765238101287\n 665.27982527512791\n 368.5565140612751\n 1098.131625451276\n 9011.7002846738815\n 676028.60251701379\n 36953.147560447644\n 158287.04613293815\n 1188.2964627293527\n 250.84018931166125\n 129.31798582961397\n 22232.096490799137\n 779.61238540276588\n 3000103.2340147318\n 18903.239424795571\n 291553.53285523364\n 807.85381764876968\n 266.41839200160081\n 477.91124194633159\n 10714.427893634575\n 13079.054069713437\n 1846.6530157934026\n 2240796.1046524546\n 50.886321091429693\n 1342902.5860679117\n 65145.395571507761\n 108293.60562649825\n 747701.03545123769\n 6490.1744969410438\n 9341.3221495751914\n 60879.880537493431\n 1925.7571206826024\n 2495.6170715534076\n 1793.8339954286855\n 103803.70717519862\n 1190.1800525702636\n 585.33244907891788\n 57.029689457236223\n 45775.472870489066\n 5765161208.502471\n 40454.075713988961\n 155937.90557012981\n 107142.4794655569\n 397.27362539617428\n 1035.759907868925\n 21163.006218497198\n 3261.2878135208011\n 137135.32392798481\n 85.687976822122252\n 20491.055805684955\n 36722.506825930206\n 5235.1457073593783\n 2246.184031364679\n 1760319.7099616099\n 24121.546411397903\n 50421.353944825496\n 78654425.10641636\n 12374099.672625678\n 553.45808919809679\n 3337.8276395388712\n 211.35507889578903\n 6094.0481631260627\n 79.854510590280867\n 169651.00555776377\n 84768.58391366541\n 466788.39838329027\n 3492.0175456713328\n 342.86361412501088\n 94.120261753220547\n 312347.05297906819\n 234873.72925477143\n 632.03874824628303\n 12586807.777816441\n 1260.1869655026624\n 71430.748416697272\n 7790.8195617912043\n 1511.2179735041493\n 3068.5407533071707\n 41004.391564362522\n 3921.9616786722986\n 2807.2041324406\n 8453.2321042383555\n 255.80421812345966\n 11103.579476621726\n 7974.8283928473911\n 767.48102756170226\n 762.17445355583368\n 2683307.512603045\n 44.815266436484585\n 22654.528867702043\n 313307.73932023434\n 1288413.62899386\n 1814761.5886156221\n 149508.60716791937\n 13170.136848783561\n 3947209.6652993727\n 1872756.5771623398\n 123450028.23919988\n 167.78256746268471\n 6790.5254394595595\n 26319.347184329417\n 203.35626237343251\n 1070675.1676999847\n 26842.508092215994\n 487.88397974094642\n 427253.25886820635\n 15164.716756686859\n 34665.623593513716\n 19779.943045549855\n 439585.49029183516\n 357.38856141380995\n 509.48093388653808\n 214066.83872274976\n 182560.30146726704\n 3623.4849181600844\n 4418.0391344535919\n 8287.2559794504468\n 7670.7525276391507\n 171639.87006178047\n 3129.5821085550551\n 26774.314378564352\n 3410.1918638289258\n 5850.3847741031987\n 15024.866076493225\n 5513.5432552482971\n 7806.9070329777833\n 9704.5582514419621\n 1506.7809630546035\n 1747.3529457958018\n 3092.1389359872978\n 55384.222625231188\n 1557.3450118231351\n 11954.774968184045\n 1784.184411875794\n 119.16340803193557\n 370293.38166716998\n 286.25727922916548\n 84591.608286291405\n 1834.5984202797324\n 453076061.26598001\n 1103986.0831513791\n 23460.62957974197\n 58945.317575184527\n 155850.74169454814\n 4777.8322227528815\n 12484.276596035828\n 417.41035088591792\n 251755.0096007908\n 4336.5096382506918\n 21639.727855111578\n 5105.6117219251028\n 969834.89971521916\n 22286.373201078542\n 7875.8436097031408\n 23485.873266727474\n 5085.5664910787746\n 110112357.93094794\n 51662.993474174706\n 42671.081209928248\n 599066.05947672273\n 56422.914177022903\n 22242.716212404044\n 302377.19744697656\n 745.86039112784738\n 2885.2938938726197\n 6524.7753953384263\n 31708.976874788255\n 70974349.875422463\n 286429.71953564521\n 85084733.11315681\n 1630.2583556518689\n 16114.318303737267\n 9085.7448193886885\n 70039.167840955779\n 3606.0597570314876\n 54836.050306638994\n 10925.105191136734\n 252725.88919920978\n 2287.2552172903652\n 3741.3763801015361\n 700.28933893938256\n 248663.56579375482\n 6343.5027457132819\n 66716.924056977179\n 10205.562863296704\n 94921.96048882803\n 127146.07013012083\n 159052.20439351778\n 97978.298984692548\n 51385.182562962895\n 5236.1311336870376\n 13274.069066648373\n 312.73780476032442\n 1000.6744268561233\n 5765.1689113188031\n 202.69636396050197\n 3522.6908454590293\n 79825.239427592634\n 10954.106605213181\n 291.06329694588885\n 11263.696449293995\n 1602.4315861728564\n 158480.14049797232\n 1160.8937071381988\n 991.81731832691662\n 13783.678329864362\n 1578.8188797821254\n 246.1425853147675\n 78.289560881915094\n 669.10246956213155\n 79843970.741642877\n 138920.46091062552\n 1085256.6410571339\n 170467.09657745709\n 570.16538199873196\n 7710.5403816563958\n 8208.8043562872226\n 2699.4176656308914\n 2359.6579185256287\n 6324070.2516253665\n 771134.14125015284\n 37168.083265180561\n 13264.261443279847\n 1404.9461433971717\n 92.466834676622184\n 22642.399931277399\n 1236.451256800219\n 21090.185861895297\n 3193.8230205504588\n 409574.19670964876\n 231016.99831991483\n 515.42032565966599\n 99206.314127201098\n 105864.97335609228\n 1048.699901622216\n 6770.1259196410383\n 948250.23021649302\n 622.80528431215714\n 28748.395324992969\n 434073.6320069019\n 42391.68452098775\n 43244.27449747327\n 550.53878525709354\n 5721.0889910175083\n 2428.4123827708463\n 20842.562791162909\n 32386.542266603148\n 579798.11858847237\n 12295.363845220909\n 226399.4415989012\n 102283.71288813124\n 5644079.3152342206\n 1954.9878864747668\n 557.72565993006526\n 10275327.338085553\n 15848.309928275259\n 356523.1173939447\n 14654400.836177392\n 9965.9361140435522\n 818.049817468524\n 26391.262266672478\n 4830.458816019679\n 143033.9286787748\n 734305.01302424213\n 49762.27990279541\n 1872.8801862712151\n 11320.101954156547\n 61543.604662712605\n 7888.9799393871999\n 31307.587862807031\n 5992.4634944685995\n 93169254.677896708\n 52431.984537791024\n 252.14400417126163\n 77260.861242823637\n 29696.462314976259\n 323472.8015406949\n 8186.8379194266836\n 446488.76630350208\n 487.49425040903168\n 5538.6224795864691\n 5101.8622798399274\n 974.29889110402962\n 22235.827908746069\n 7131538.2232945114\n 22695.349108346629\n 16218.121826421442\n 17590.345528325768\n 1898206.3764970256\n 787.43306632695919\n 3721.1476022533939\n 33221.318354775765\n 751673.60926442116\n 6677.2979974155478\n 6427497.8651486943\n 12704.051143060407\n 5162.9657251440576\n 4632.980568454137\n 156.16559824455118\n 516495.78813510441\n 42009.694248222368\n 860.98424030134686\n 3392.934155917711\n 5182.3349506403993\n 170623.51780092262\n 306.77369084392899\n 1925.4034083657727\n 629.09808333522733\n 4459.3316205750434\n 399361.08432221593\n 703.51942960379392\n 3837.9406048547789\n 3257.3109590145145\n 5648003.1979847923\n 504850.68703429459\n 1974839.5896050439\n 25.21577867385804\n 103703.61659392566\n 1530260.6098018712\n 10627.182333970713\n 175.55388528074548\n 1699.8461718135597\n 28283.764566428956\n 2767.1584482227654\n 6837.6331346659827\n 2389367.9569912655\n 18285.381739215863\n 693807.22355208197\n 179704470.92841581\n 12776.739314634311\n 34250.372604286953\n 3247.6511214978686\n 2220.8110370049694\n 1812979.7005435152\n 197.72589568643983\n 20593.8285129367\n 66286996.819601372\n 21891464.544918563\n 979.04705728942702\n 1214.296103904295\n 5096373.9527144749\n 160.72984688017428\n 108634.39352144071\n 1679.0309731007378\n",
                    "result": 1,
                    "runtime": 0.43018267495790496,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_divided_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_divided_expr_end.F90/atomic_update_x_divided_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9169876499800012
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": " 2617.9938116663398\n 165337.17277252747\n 1335.0505698692396\n 890.12989781510657\n 1567.342985267414\n 1277.2002194076661\n 1729355.5166650824\n 8569.7158605928962\n 3602.4675633515426\n 30351137.567601915\n 6741.397180879525\n 95.981147053473833\n 660.42721143889423\n 294.33053213757887\n 32514.143932746134\n 99202.202491071061\n 62538859.333144389\n 105233.27329136351\n 142840.80571744553\n 3541.5473582779987\n 36707.163691406473\n 310.78047111155951\n 735.1806109477717\n 2448.5832724247607\n 2257.1117029340926\n 733.05221316678717\n 9550085.4631721321\n 79434.701153774833\n 1310.632211786047\n 440.92144655727907\n 5705.0168247456013\n 65992.512040740272\n 566048.52192825498\n 3565.0843481839925\n 3103.0792342526397\n 2783.6219854300803\n 78475335.797015592\n 74348.036201656461\n 1645076.8322576934\n 47279.542538734924\n 76995.085625878637\n 42634.469247693967\n 1049.0206072525095\n 10038.644397839447\n 5530385.6334116152\n 314608.1833106706\n 118392901.58818762\n 1638.3494361318583\n 8302.8285057219982\n 10192.423321138267\n 7569.1249953736524\n 3353327.5430429494\n 4155523.1188418497\n 785.46865834377377\n 30695.548822393561\n 594199.3942493737\n 1923.0285789669401\n 932.51676184586165\n 46175.108754303394\n 123584.79752866182\n 971.18602853881089\n 4144.785139345774\n 2805.366788085953\n 602.52245925392981\n 1826211.3972661407\n 14235.384565530099\n 15314.268081428387\n 233.9370055278622\n 47060.718212157975\n 582.93166897887329\n 32266.235808237889\n 18942.595278805496\n 2462.1310588906267\n 900705.19885265664\n 308741.1448523869\n 20364645.867401719\n 94025.909091344176\n 31350.255465035072\n 30086.186199335698\n 2094.1039299346153\n 6536.5080817610124\n 500734.83039016364\n 20063.598185221312\n 64713.534425082515\n 36704.757343840167\n 12171.830788763797\n 741184.6793477796\n 3218596.2481702268\n 142981.50523075042\n 9273.5499534228784\n 709590.96785270097\n 5938.0561228560537\n 60683.449595518694\n 25531.258929641383\n 2543.9533706725606\n 157.40180867679669\n 8372.9868561354779\n 49.652639318711273\n 433456.06624914787\n 546341.32814763044\n 1603.2547967046005\n 6104.4891593607717\n 2930.4862627190546\n 11664.766725373202\n 4148.6077645110818\n 2458.2708274428278\n 120580.18055619429\n 17824.270494852859\n 213.14644349787858\n 468.42801938824402\n 21575.079885371735\n 4708.4053696645151\n 810.86676875743524\n 83.244372398558156\n 6126.760496296446\n 71648.42478799494\n 689.23523965953382\n 1706.0828555504872\n 5103.5377170738884\n 41771.582882321949\n 15094.537732303175\n 19295.120432639484\n 108233.62425018483\n 53663.323051562424\n 198841.73110275972\n 3399.0470811787136\n 47581.379791794112\n 10159866.07971888\n 8996269.5409535635\n 279.05479779989287\n 73579.13327867302\n 642.07958732429131\n 11100.406459700351\n 12979.707199142847\n 566.55377551812467\n 35580.568786650401\n 5209.2521121466007\n 47889.624790165341\n 73179.656312581719\n 149934.44819732194\n 3992.5522911150665\n 418.0391516176955\n 1977.3633996688011\n 2493.7541196100419\n 741.97437319516655\n 79919.641275321905\n 126.23353761494113\n 26117.094412415456\n 2470.0857601691596\n 2387713835.0010114\n 2765.5840477285474\n 10589.234371181774\n 116086.26344662266\n 8539.9871466722198\n 34378.326766706436\n 29723.044882957547\n 1825.9765594887419\n 36687.492631491841\n 9967.945891880252\n 5532.9725031777389\n 16046.06194967997\n 62097.278336548108\n 171205.71041517635\n 31786.41302865525\n 4884.9843342815193\n 903.25410351273149\n 2509.90693909838\n 86.456194049018961\n 13005.273589432703\n 51490.72194591006\n 101976.68305773915\n 887.15100330824237\n 13420.085814122092\n 997.76874522850892\n 178503.7724859663\n 293223.28708105133\n 5374.9584700094756\n 1149.120204479\n 5395.409945163653\n 58200.122324386459\n 576505.35348011123\n 464.41962795109919\n 1650.9239687563111\n 124669113.39070979\n 1478837.8010065979\n 42025.031289062259\n 22590.130277242439\n 84.739118442199157\n 1563.3533793211984\n 42088.67011537886\n 3735.5644371151598\n 367.07629493983853\n 675895.10280589107\n 2702773.9749647612\n 173.69140883228798\n 352051.65228951426\n 9297.7220280222227\n 109022.01181986398\n 7700.0105472695841\n 619.67765417357691\n 461348.03470604122\n 274.44915928128722\n 3521.2874093548098\n 123901.43952208993\n 2190.4821046466004\n 1408627.6360970838\n 9593.2090210165152\n 747.99407593049511\n 2871.4277697031662\n 21908438.8102086\n 619.13812795334331\n 19317282.991028458\n 12329.090308101922\n 23973.520527966251\n 1783.3044785444827\n 1920173.251802393\n 242.81220317522565\n 9334.6580808036942\n 8335.8930225971781\n 192.26705963195224\n 155518.50090364076\n 3946.2737841984199\n 52231.472946070586\n 100738.07052699626\n 15.597794276730101\n 1838.5479602088901\n 2182633.1089006644\n 1500.8868091137115\n 6512.5706322524165\n 17263.362775468442\n 18823.752791045332\n 2489.8901912712181\n 1470.8435197041958\n 204.51271616760451\n 40057.442630028476\n 297003.45576044515\n 243.88637647482838\n 50589.777871786922\n 879.36531601780678\n 105.3064795023292\n 23744359.486094762\n 2921715.0259286924\n 10049.921452727409\n 12334.059211140811\n 1680.5814667009654\n 12462.168848388394\n 1940.702862389744\n 2687574.0634519039\n 283.02253359956035\n 171838.97786651866\n 3393.2740835730096\n 22169.805101431346\n 14561.783475550164\n 192095.62041044666\n 1236.6135984273521\n 460.6789822122239\n 11272.741972203416\n 247.08194488010977\n 1255359.492975323\n 98285.577449023884\n 207785.6778349753\n 596.42568081501588\n 1155.8361615080798\n 124.63135828260711\n 9534.7781178494824\n 759.87276576929901\n 2456.048487998944\n 7536.852241392603\n 6799821.7733616587\n 218926.58925003817\n 1100.0393501756273\n 10750.161232251819\n 5016.5811358117026\n 173984.55801815997\n 11004.414782115757\n 2732.6769311123753\n 369710.48546426796\n 432067.69766768703\n 149234.85391042451\n 217967.35242436774\n 27905.098918942993\n 35006.877924818386\n 12827.928351620612\n 369878275.82953751\n 4022.4008258826962\n 2957.2350226217536\n 13811.397934843246\n 5970.7371938683273\n 43495.662293594767\n 28704.825744908932\n 2825.5413159664245\n 1545.302983058376\n 1614590.3842796735\n 315.11472665925487\n 54333.138423170742\n 670.63632034701936\n 360896.2584730488\n 2382.3505382857452\n 24041.120581776871\n 46.007532483242379\n 44892.465142789508\n 396869.68883502827\n 978293.48492491269\n 289566.44004520972\n 39098.72469011823\n 64698.279397467006\n 220364.23174929642\n 174632.57674483582\n 128280.06832772505\n 8002.3249687348807\n 6863.1927265289605\n 5634.8326384041511\n 7465.5382409855811\n 2384.2150151261685\n 33660.786630457944\n 26152.288685424352\n 1970.2112884024045\n 1434923.69687386\n 1306027.7110657408\n 9183.0451297872805\n 6313601.6800858742\n 267792.34856180305\n 4941.9842303462619\n 2896.2219380965557\n 203773.78299709919\n 5672.7203212173445\n 77939.647537037134\n 3406.3730649264271\n 12064.71082898044\n 640910.53966564988\n 485.7287986442102\n 1992849.90894137\n 114856.77559501334\n 236413.7924875193\n 206706.63832452963\n 920.24321065910237\n 46542.998107712352\n 392.6219466692221\n 12993.433173880429\n 13592.604018900938\n 13568.707744194908\n 49857.128089271057\n 34625.998491398663\n 3387.9847156667815\n 164072.93954103073\n 881.4611337748529\n 1711707.6393791356\n 587.67270204777992\n 1093138.2086699393\n 30500.852896574885\n 750.19083849330798\n 1074615.6140973081\n 148541.92859101327\n 32561.199043240395\n 3310.4590744650018\n 1961.6587107388439\n 137037.8356431484\n 8304.3687624396862\n 7502.491365761457\n 116866.20504420012\n 56862.978803702019\n 4478732.9353104355\n 34934.170662190132\n 216800.88230193412\n 58589.078390552044\n 362.43108288142344\n 3190.7449077173014\n 4880.3993747892227\n 176826.51493147828\n 2796.1526630734324\n 58950.754735813818\n 6697.4669329889248\n 12647.918398094862\n 17467.977974971029\n 1324.3687683241401\n 9626.5082442921266\n 6575.2991040642682\n 3839.6692128467257\n 65113.832688096591\n 574.43765238101287\n 665.27982527512791\n 368.5565140612751\n 1098.131625451276\n 9011.7002846738815\n 676028.60251701379\n 36953.147560447644\n 158287.04613293815\n 1188.2964627293527\n 250.84018931166125\n 129.31798582961397\n 22232.096490799137\n 779.61238540276588\n 3000103.2340147318\n 18903.239424795571\n 291553.53285523364\n 807.85381764876968\n 266.41839200160081\n 477.91124194633159\n 10714.427893634575\n 13079.054069713437\n 1846.6530157934026\n 2240796.1046524546\n 50.886321091429693\n 1342902.5860679117\n 65145.395571507761\n 108293.60562649825\n 747701.03545123769\n 6490.1744969410438\n 9341.3221495751914\n 60879.880537493431\n 1925.7571206826024\n 2495.6170715534076\n 1793.8339954286855\n 103803.70717519862\n 1190.1800525702636\n 585.33244907891788\n 57.029689457236223\n 45775.472870489066\n 5765161208.502471\n 40454.075713988961\n 155937.90557012981\n 107142.4794655569\n 397.27362539617428\n 1035.759907868925\n 21163.006218497198\n 3261.2878135208011\n 137135.32392798481\n 85.687976822122252\n 20491.055805684955\n 36722.506825930206\n 5235.1457073593783\n 2246.184031364679\n 1760319.7099616099\n 24121.546411397903\n 50421.353944825496\n 78654425.10641636\n 12374099.672625678\n 553.45808919809679\n 3337.8276395388712\n 211.35507889578903\n 6094.0481631260627\n 79.854510590280867\n 169651.00555776377\n 84768.58391366541\n 466788.39838329027\n 3492.0175456713328\n 342.86361412501088\n 94.120261753220547\n 312347.05297906819\n 234873.72925477143\n 632.03874824628303\n 12586807.777816441\n 1260.1869655026624\n 71430.748416697272\n 7790.8195617912043\n 1511.2179735041493\n 3068.5407533071707\n 41004.391564362522\n 3921.9616786722986\n 2807.2041324406\n 8453.2321042383555\n 255.80421812345966\n 11103.579476621726\n 7974.8283928473911\n 767.48102756170226\n 762.17445355583368\n 2683307.512603045\n 44.815266436484585\n 22654.528867702043\n 313307.73932023434\n 1288413.62899386\n 1814761.5886156221\n 149508.60716791937\n 13170.136848783561\n 3947209.6652993727\n 1872756.5771623398\n 123450028.23919988\n 167.78256746268471\n 6790.5254394595595\n 26319.347184329417\n 203.35626237343251\n 1070675.1676999847\n 26842.508092215994\n 487.88397974094642\n 427253.25886820635\n 15164.716756686859\n 34665.623593513716\n 19779.943045549855\n 439585.49029183516\n 357.38856141380995\n 509.48093388653808\n 214066.83872274976\n 182560.30146726704\n 3623.4849181600844\n 4418.0391344535919\n 8287.2559794504468\n 7670.7525276391507\n 171639.87006178047\n 3129.5821085550551\n 26774.314378564352\n 3410.1918638289258\n 5850.3847741031987\n 15024.866076493225\n 5513.5432552482971\n 7806.9070329777833\n 9704.5582514419621\n 1506.7809630546035\n 1747.3529457958018\n 3092.1389359872978\n 55384.222625231188\n 1557.3450118231351\n 11954.774968184045\n 1784.184411875794\n 119.16340803193557\n 370293.38166716998\n 286.25727922916548\n 84591.608286291405\n 1834.5984202797324\n 453076061.26598001\n 1103986.0831513791\n 23460.62957974197\n 58945.317575184527\n 155850.74169454814\n 4777.8322227528815\n 12484.276596035828\n 417.41035088591792\n 251755.0096007908\n 4336.5096382506918\n 21639.727855111578\n 5105.6117219251028\n 969834.89971521916\n 22286.373201078542\n 7875.8436097031408\n 23485.873266727474\n 5085.5664910787746\n 110112357.93094794\n 51662.993474174706\n 42671.081209928248\n 599066.05947672273\n 56422.914177022903\n 22242.716212404044\n 302377.19744697656\n 745.86039112784738\n 2885.2938938726197\n 6524.7753953384263\n 31708.976874788255\n 70974349.875422463\n 286429.71953564521\n 85084733.11315681\n 1630.2583556518689\n 16114.318303737267\n 9085.7448193886885\n 70039.167840955779\n 3606.0597570314876\n 54836.050306638994\n 10925.105191136734\n 252725.88919920978\n 2287.2552172903652\n 3741.3763801015361\n 700.28933893938256\n 248663.56579375482\n 6343.5027457132819\n 66716.924056977179\n 10205.562863296704\n 94921.96048882803\n 127146.07013012083\n 159052.20439351778\n 97978.298984692548\n 51385.182562962895\n 5236.1311336870376\n 13274.069066648373\n 312.73780476032442\n 1000.6744268561233\n 5765.1689113188031\n 202.69636396050197\n 3522.6908454590293\n 79825.239427592634\n 10954.106605213181\n 291.06329694588885\n 11263.696449293995\n 1602.4315861728564\n 158480.14049797232\n 1160.8937071381988\n 991.81731832691662\n 13783.678329864362\n 1578.8188797821254\n 246.1425853147675\n 78.289560881915094\n 669.10246956213155\n 79843970.741642877\n 138920.46091062552\n 1085256.6410571339\n 170467.09657745709\n 570.16538199873196\n 7710.5403816563958\n 8208.8043562872226\n 2699.4176656308914\n 2359.6579185256287\n 6324070.2516253665\n 771134.14125015284\n 37168.083265180561\n 13264.261443279847\n 1404.9461433971717\n 92.466834676622184\n 22642.399931277399\n 1236.451256800219\n 21090.185861895297\n 3193.8230205504588\n 409574.19670964876\n 231016.99831991483\n 515.42032565966599\n 99206.314127201098\n 105864.97335609228\n 1048.699901622216\n 6770.1259196410383\n 948250.23021649302\n 622.80528431215714\n 28748.395324992969\n 434073.6320069019\n 42391.68452098775\n 43244.27449747327\n 550.53878525709354\n 5721.0889910175083\n 2428.4123827708463\n 20842.562791162909\n 32386.542266603148\n 579798.11858847237\n 12295.363845220909\n 226399.4415989012\n 102283.71288813124\n 5644079.3152342206\n 1954.9878864747668\n 557.72565993006526\n 10275327.338085553\n 15848.309928275259\n 356523.1173939447\n 14654400.836177392\n 9965.9361140435522\n 818.049817468524\n 26391.262266672478\n 4830.458816019679\n 143033.9286787748\n 734305.01302424213\n 49762.27990279541\n 1872.8801862712151\n 11320.101954156547\n 61543.604662712605\n 7888.9799393871999\n 31307.587862807031\n 5992.4634944685995\n 93169254.677896708\n 52431.984537791024\n 252.14400417126163\n 77260.861242823637\n 29696.462314976259\n 323472.8015406949\n 8186.8379194266836\n 446488.76630350208\n 487.49425040903168\n 5538.6224795864691\n 5101.8622798399274\n 974.29889110402962\n 22235.827908746069\n 7131538.2232945114\n 22695.349108346629\n 16218.121826421442\n 17590.345528325768\n 1898206.3764970256\n 787.43306632695919\n 3721.1476022533939\n 33221.318354775765\n 751673.60926442116\n 6677.2979974155478\n 6427497.8651486943\n 12704.051143060407\n 5162.9657251440576\n 4632.980568454137\n 156.16559824455118\n 516495.78813510441\n 42009.694248222368\n 860.98424030134686\n 3392.934155917711\n 5182.3349506403993\n 170623.51780092262\n 306.77369084392899\n 1925.4034083657727\n 629.09808333522733\n 4459.3316205750434\n 399361.08432221593\n 703.51942960379392\n 3837.9406048547789\n 3257.3109590145145\n 5648003.1979847923\n 504850.68703429459\n 1974839.5896050439\n 25.21577867385804\n 103703.61659392566\n 1530260.6098018712\n 10627.182333970713\n 175.55388528074548\n 1699.8461718135597\n 28283.764566428956\n 2767.1584482227654\n 6837.6331346659827\n 2389367.9569912655\n 18285.381739215863\n 693807.22355208197\n 179704470.92841581\n 12776.739314634311\n 34250.372604286953\n 3247.6511214978686\n 2220.8110370049694\n 1812979.7005435152\n 197.72589568643983\n 20593.8285129367\n 66286996.819601372\n 21891464.544918563\n 979.04705728942702\n 1214.296103904295\n 5096373.9527144749\n 160.72984688017428\n 108634.39352144071\n 1679.0309731007378\n",
                    "result": 1,
                    "runtime": 0.43082663899986073,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_eqv_expr.F90/atomic_update_x_eqv_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8240184390451759
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4321400659973733,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_eqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_eqv_expr_end.F90/atomic_update_x_eqv_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8166659999988042
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4320248629665002,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_minus_expr.F90/atomic_update_x_minus_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7732141849701293
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4329523849883117,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_minus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_minus_expr_end.F90/atomic_update_x_minus_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8168433519895189
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42377870704513043,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_neqv_expr.F90/atomic_update_x_neqv_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6670942479977384
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4390328669687733,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_neqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_neqv_expr_end.F90/atomic_update_x_neqv_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7172169839614071
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46891214000061154,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_or_expr.F90/atomic_update_x_or_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7165702150086872
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4642678000382148,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_or_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_or_expr_end.F90/atomic_update_x_or_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9669063920155168
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4627937839832157,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_plus_expr.F90/atomic_update_x_plus_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9233776300097816
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43241204001242295,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_plus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_plus_expr_end.F90/atomic_update_x_plus_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7171936390222982
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4333594710333273,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_times_expr.F90/atomic_update_x_times_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7765384950325824
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4404596419772133,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_times_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_update_x_times_expr_end.F90/atomic_update_x_times_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7670074090128765
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4793181840213947,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_and_expr.F90/atomic_x_and_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7162798650097102
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42750303098000586,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_and_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_and_expr_end.F90/atomic_x_and_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8673119070008397
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.428916078992188,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_divided_expr.F90/atomic_x_divided_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8670985249918886
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": " 2617.9938116663398\n 165337.17277252747\n 1335.0505698692396\n 890.12989781510657\n 1567.342985267414\n 1277.2002194076661\n 1729355.5166650824\n 8569.7158605928962\n 3602.4675633515426\n 30351137.567601915\n 6741.397180879525\n 95.981147053473833\n 660.42721143889423\n 294.33053213757887\n 32514.143932746134\n 99202.202491071061\n 62538859.333144389\n 105233.27329136351\n 142840.80571744553\n 3541.5473582779987\n 36707.163691406473\n 310.78047111155951\n 735.1806109477717\n 2448.5832724247607\n 2257.1117029340926\n 733.05221316678717\n 9550085.4631721321\n 79434.701153774833\n 1310.632211786047\n 440.92144655727907\n 5705.0168247456013\n 65992.512040740272\n 566048.52192825498\n 3565.0843481839925\n 3103.0792342526397\n 2783.6219854300803\n 78475335.797015592\n 74348.036201656461\n 1645076.8322576934\n 47279.542538734924\n 76995.085625878637\n 42634.469247693967\n 1049.0206072525095\n 10038.644397839447\n 5530385.6334116152\n 314608.1833106706\n 118392901.58818762\n 1638.3494361318583\n 8302.8285057219982\n 10192.423321138267\n 7569.1249953736524\n 3353327.5430429494\n 4155523.1188418497\n 785.46865834377377\n 30695.548822393561\n 594199.3942493737\n 1923.0285789669401\n 932.51676184586165\n 46175.108754303394\n 123584.79752866182\n 971.18602853881089\n 4144.785139345774\n 2805.366788085953\n 602.52245925392981\n 1826211.3972661407\n 14235.384565530099\n 15314.268081428387\n 233.9370055278622\n 47060.718212157975\n 582.93166897887329\n 32266.235808237889\n 18942.595278805496\n 2462.1310588906267\n 900705.19885265664\n 308741.1448523869\n 20364645.867401719\n 94025.909091344176\n 31350.255465035072\n 30086.186199335698\n 2094.1039299346153\n 6536.5080817610124\n 500734.83039016364\n 20063.598185221312\n 64713.534425082515\n 36704.757343840167\n 12171.830788763797\n 741184.6793477796\n 3218596.2481702268\n 142981.50523075042\n 9273.5499534228784\n 709590.96785270097\n 5938.0561228560537\n 60683.449595518694\n 25531.258929641383\n 2543.9533706725606\n 157.40180867679669\n 8372.9868561354779\n 49.652639318711273\n 433456.06624914787\n 546341.32814763044\n 1603.2547967046005\n 6104.4891593607717\n 2930.4862627190546\n 11664.766725373202\n 4148.6077645110818\n 2458.2708274428278\n 120580.18055619429\n 17824.270494852859\n 213.14644349787858\n 468.42801938824402\n 21575.079885371735\n 4708.4053696645151\n 810.86676875743524\n 83.244372398558156\n 6126.760496296446\n 71648.42478799494\n 689.23523965953382\n 1706.0828555504872\n 5103.5377170738884\n 41771.582882321949\n 15094.537732303175\n 19295.120432639484\n 108233.62425018483\n 53663.323051562424\n 198841.73110275972\n 3399.0470811787136\n 47581.379791794112\n 10159866.07971888\n 8996269.5409535635\n 279.05479779989287\n 73579.13327867302\n 642.07958732429131\n 11100.406459700351\n 12979.707199142847\n 566.55377551812467\n 35580.568786650401\n 5209.2521121466007\n 47889.624790165341\n 73179.656312581719\n 149934.44819732194\n 3992.5522911150665\n 418.0391516176955\n 1977.3633996688011\n 2493.7541196100419\n 741.97437319516655\n 79919.641275321905\n 126.23353761494113\n 26117.094412415456\n 2470.0857601691596\n 2387713835.0010114\n 2765.5840477285474\n 10589.234371181774\n 116086.26344662266\n 8539.9871466722198\n 34378.326766706436\n 29723.044882957547\n 1825.9765594887419\n 36687.492631491841\n 9967.945891880252\n 5532.9725031777389\n 16046.06194967997\n 62097.278336548108\n 171205.71041517635\n 31786.41302865525\n 4884.9843342815193\n 903.25410351273149\n 2509.90693909838\n 86.456194049018961\n 13005.273589432703\n 51490.72194591006\n 101976.68305773915\n 887.15100330824237\n 13420.085814122092\n 997.76874522850892\n 178503.7724859663\n 293223.28708105133\n 5374.9584700094756\n 1149.120204479\n 5395.409945163653\n 58200.122324386459\n 576505.35348011123\n 464.41962795109919\n 1650.9239687563111\n 124669113.39070979\n 1478837.8010065979\n 42025.031289062259\n 22590.130277242439\n 84.739118442199157\n 1563.3533793211984\n 42088.67011537886\n 3735.5644371151598\n 367.07629493983853\n 675895.10280589107\n 2702773.9749647612\n 173.69140883228798\n 352051.65228951426\n 9297.7220280222227\n 109022.01181986398\n 7700.0105472695841\n 619.67765417357691\n 461348.03470604122\n 274.44915928128722\n 3521.2874093548098\n 123901.43952208993\n 2190.4821046466004\n 1408627.6360970838\n 9593.2090210165152\n 747.99407593049511\n 2871.4277697031662\n 21908438.8102086\n 619.13812795334331\n 19317282.991028458\n 12329.090308101922\n 23973.520527966251\n 1783.3044785444827\n 1920173.251802393\n 242.81220317522565\n 9334.6580808036942\n 8335.8930225971781\n 192.26705963195224\n 155518.50090364076\n 3946.2737841984199\n 52231.472946070586\n 100738.07052699626\n 15.597794276730101\n 1838.5479602088901\n 2182633.1089006644\n 1500.8868091137115\n 6512.5706322524165\n 17263.362775468442\n 18823.752791045332\n 2489.8901912712181\n 1470.8435197041958\n 204.51271616760451\n 40057.442630028476\n 297003.45576044515\n 243.88637647482838\n 50589.777871786922\n 879.36531601780678\n 105.3064795023292\n 23744359.486094762\n 2921715.0259286924\n 10049.921452727409\n 12334.059211140811\n 1680.5814667009654\n 12462.168848388394\n 1940.702862389744\n 2687574.0634519039\n 283.02253359956035\n 171838.97786651866\n 3393.2740835730096\n 22169.805101431346\n 14561.783475550164\n 192095.62041044666\n 1236.6135984273521\n 460.6789822122239\n 11272.741972203416\n 247.08194488010977\n 1255359.492975323\n 98285.577449023884\n 207785.6778349753\n 596.42568081501588\n 1155.8361615080798\n 124.63135828260711\n 9534.7781178494824\n 759.87276576929901\n 2456.048487998944\n 7536.852241392603\n 6799821.7733616587\n 218926.58925003817\n 1100.0393501756273\n 10750.161232251819\n 5016.5811358117026\n 173984.55801815997\n 11004.414782115757\n 2732.6769311123753\n 369710.48546426796\n 432067.69766768703\n 149234.85391042451\n 217967.35242436774\n 27905.098918942993\n 35006.877924818386\n 12827.928351620612\n 369878275.82953751\n 4022.4008258826962\n 2957.2350226217536\n 13811.397934843246\n 5970.7371938683273\n 43495.662293594767\n 28704.825744908932\n 2825.5413159664245\n 1545.302983058376\n 1614590.3842796735\n 315.11472665925487\n 54333.138423170742\n 670.63632034701936\n 360896.2584730488\n 2382.3505382857452\n 24041.120581776871\n 46.007532483242379\n 44892.465142789508\n 396869.68883502827\n 978293.48492491269\n 289566.44004520972\n 39098.72469011823\n 64698.279397467006\n 220364.23174929642\n 174632.57674483582\n 128280.06832772505\n 8002.3249687348807\n 6863.1927265289605\n 5634.8326384041511\n 7465.5382409855811\n 2384.2150151261685\n 33660.786630457944\n 26152.288685424352\n 1970.2112884024045\n 1434923.69687386\n 1306027.7110657408\n 9183.0451297872805\n 6313601.6800858742\n 267792.34856180305\n 4941.9842303462619\n 2896.2219380965557\n 203773.78299709919\n 5672.7203212173445\n 77939.647537037134\n 3406.3730649264271\n 12064.71082898044\n 640910.53966564988\n 485.7287986442102\n 1992849.90894137\n 114856.77559501334\n 236413.7924875193\n 206706.63832452963\n 920.24321065910237\n 46542.998107712352\n 392.6219466692221\n 12993.433173880429\n 13592.604018900938\n 13568.707744194908\n 49857.128089271057\n 34625.998491398663\n 3387.9847156667815\n 164072.93954103073\n 881.4611337748529\n 1711707.6393791356\n 587.67270204777992\n 1093138.2086699393\n 30500.852896574885\n 750.19083849330798\n 1074615.6140973081\n 148541.92859101327\n 32561.199043240395\n 3310.4590744650018\n 1961.6587107388439\n 137037.8356431484\n 8304.3687624396862\n 7502.491365761457\n 116866.20504420012\n 56862.978803702019\n 4478732.9353104355\n 34934.170662190132\n 216800.88230193412\n 58589.078390552044\n 362.43108288142344\n 3190.7449077173014\n 4880.3993747892227\n 176826.51493147828\n 2796.1526630734324\n 58950.754735813818\n 6697.4669329889248\n 12647.918398094862\n 17467.977974971029\n 1324.3687683241401\n 9626.5082442921266\n 6575.2991040642682\n 3839.6692128467257\n 65113.832688096591\n 574.43765238101287\n 665.27982527512791\n 368.5565140612751\n 1098.131625451276\n 9011.7002846738815\n 676028.60251701379\n 36953.147560447644\n 158287.04613293815\n 1188.2964627293527\n 250.84018931166125\n 129.31798582961397\n 22232.096490799137\n 779.61238540276588\n 3000103.2340147318\n 18903.239424795571\n 291553.53285523364\n 807.85381764876968\n 266.41839200160081\n 477.91124194633159\n 10714.427893634575\n 13079.054069713437\n 1846.6530157934026\n 2240796.1046524546\n 50.886321091429693\n 1342902.5860679117\n 65145.395571507761\n 108293.60562649825\n 747701.03545123769\n 6490.1744969410438\n 9341.3221495751914\n 60879.880537493431\n 1925.7571206826024\n 2495.6170715534076\n 1793.8339954286855\n 103803.70717519862\n 1190.1800525702636\n 585.33244907891788\n 57.029689457236223\n 45775.472870489066\n 5765161208.502471\n 40454.075713988961\n 155937.90557012981\n 107142.4794655569\n 397.27362539617428\n 1035.759907868925\n 21163.006218497198\n 3261.2878135208011\n 137135.32392798481\n 85.687976822122252\n 20491.055805684955\n 36722.506825930206\n 5235.1457073593783\n 2246.184031364679\n 1760319.7099616099\n 24121.546411397903\n 50421.353944825496\n 78654425.10641636\n 12374099.672625678\n 553.45808919809679\n 3337.8276395388712\n 211.35507889578903\n 6094.0481631260627\n 79.854510590280867\n 169651.00555776377\n 84768.58391366541\n 466788.39838329027\n 3492.0175456713328\n 342.86361412501088\n 94.120261753220547\n 312347.05297906819\n 234873.72925477143\n 632.03874824628303\n 12586807.777816441\n 1260.1869655026624\n 71430.748416697272\n 7790.8195617912043\n 1511.2179735041493\n 3068.5407533071707\n 41004.391564362522\n 3921.9616786722986\n 2807.2041324406\n 8453.2321042383555\n 255.80421812345966\n 11103.579476621726\n 7974.8283928473911\n 767.48102756170226\n 762.17445355583368\n 2683307.512603045\n 44.815266436484585\n 22654.528867702043\n 313307.73932023434\n 1288413.62899386\n 1814761.5886156221\n 149508.60716791937\n 13170.136848783561\n 3947209.6652993727\n 1872756.5771623398\n 123450028.23919988\n 167.78256746268471\n 6790.5254394595595\n 26319.347184329417\n 203.35626237343251\n 1070675.1676999847\n 26842.508092215994\n 487.88397974094642\n 427253.25886820635\n 15164.716756686859\n 34665.623593513716\n 19779.943045549855\n 439585.49029183516\n 357.38856141380995\n 509.48093388653808\n 214066.83872274976\n 182560.30146726704\n 3623.4849181600844\n 4418.0391344535919\n 8287.2559794504468\n 7670.7525276391507\n 171639.87006178047\n 3129.5821085550551\n 26774.314378564352\n 3410.1918638289258\n 5850.3847741031987\n 15024.866076493225\n 5513.5432552482971\n 7806.9070329777833\n 9704.5582514419621\n 1506.7809630546035\n 1747.3529457958018\n 3092.1389359872978\n 55384.222625231188\n 1557.3450118231351\n 11954.774968184045\n 1784.184411875794\n 119.16340803193557\n 370293.38166716998\n 286.25727922916548\n 84591.608286291405\n 1834.5984202797324\n 453076061.26598001\n 1103986.0831513791\n 23460.62957974197\n 58945.317575184527\n 155850.74169454814\n 4777.8322227528815\n 12484.276596035828\n 417.41035088591792\n 251755.0096007908\n 4336.5096382506918\n 21639.727855111578\n 5105.6117219251028\n 969834.89971521916\n 22286.373201078542\n 7875.8436097031408\n 23485.873266727474\n 5085.5664910787746\n 110112357.93094794\n 51662.993474174706\n 42671.081209928248\n 599066.05947672273\n 56422.914177022903\n 22242.716212404044\n 302377.19744697656\n 745.86039112784738\n 2885.2938938726197\n 6524.7753953384263\n 31708.976874788255\n 70974349.875422463\n 286429.71953564521\n 85084733.11315681\n 1630.2583556518689\n 16114.318303737267\n 9085.7448193886885\n 70039.167840955779\n 3606.0597570314876\n 54836.050306638994\n 10925.105191136734\n 252725.88919920978\n 2287.2552172903652\n 3741.3763801015361\n 700.28933893938256\n 248663.56579375482\n 6343.5027457132819\n 66716.924056977179\n 10205.562863296704\n 94921.96048882803\n 127146.07013012083\n 159052.20439351778\n 97978.298984692548\n 51385.182562962895\n 5236.1311336870376\n 13274.069066648373\n 312.73780476032442\n 1000.6744268561233\n 5765.1689113188031\n 202.69636396050197\n 3522.6908454590293\n 79825.239427592634\n 10954.106605213181\n 291.06329694588885\n 11263.696449293995\n 1602.4315861728564\n 158480.14049797232\n 1160.8937071381988\n 991.81731832691662\n 13783.678329864362\n 1578.8188797821254\n 246.1425853147675\n 78.289560881915094\n 669.10246956213155\n 79843970.741642877\n 138920.46091062552\n 1085256.6410571339\n 170467.09657745709\n 570.16538199873196\n 7710.5403816563958\n 8208.8043562872226\n 2699.4176656308914\n 2359.6579185256287\n 6324070.2516253665\n 771134.14125015284\n 37168.083265180561\n 13264.261443279847\n 1404.9461433971717\n 92.466834676622184\n 22642.399931277399\n 1236.451256800219\n 21090.185861895297\n 3193.8230205504588\n 409574.19670964876\n 231016.99831991483\n 515.42032565966599\n 99206.314127201098\n 105864.97335609228\n 1048.699901622216\n 6770.1259196410383\n 948250.23021649302\n 622.80528431215714\n 28748.395324992969\n 434073.6320069019\n 42391.68452098775\n 43244.27449747327\n 550.53878525709354\n 5721.0889910175083\n 2428.4123827708463\n 20842.562791162909\n 32386.542266603148\n 579798.11858847237\n 12295.363845220909\n 226399.4415989012\n 102283.71288813124\n 5644079.3152342206\n 1954.9878864747668\n 557.72565993006526\n 10275327.338085553\n 15848.309928275259\n 356523.1173939447\n 14654400.836177392\n 9965.9361140435522\n 818.049817468524\n 26391.262266672478\n 4830.458816019679\n 143033.9286787748\n 734305.01302424213\n 49762.27990279541\n 1872.8801862712151\n 11320.101954156547\n 61543.604662712605\n 7888.9799393871999\n 31307.587862807031\n 5992.4634944685995\n 93169254.677896708\n 52431.984537791024\n 252.14400417126163\n 77260.861242823637\n 29696.462314976259\n 323472.8015406949\n 8186.8379194266836\n 446488.76630350208\n 487.49425040903168\n 5538.6224795864691\n 5101.8622798399274\n 974.29889110402962\n 22235.827908746069\n 7131538.2232945114\n 22695.349108346629\n 16218.121826421442\n 17590.345528325768\n 1898206.3764970256\n 787.43306632695919\n 3721.1476022533939\n 33221.318354775765\n 751673.60926442116\n 6677.2979974155478\n 6427497.8651486943\n 12704.051143060407\n 5162.9657251440576\n 4632.980568454137\n 156.16559824455118\n 516495.78813510441\n 42009.694248222368\n 860.98424030134686\n 3392.934155917711\n 5182.3349506403993\n 170623.51780092262\n 306.77369084392899\n 1925.4034083657727\n 629.09808333522733\n 4459.3316205750434\n 399361.08432221593\n 703.51942960379392\n 3837.9406048547789\n 3257.3109590145145\n 5648003.1979847923\n 504850.68703429459\n 1974839.5896050439\n 25.21577867385804\n 103703.61659392566\n 1530260.6098018712\n 10627.182333970713\n 175.55388528074548\n 1699.8461718135597\n 28283.764566428956\n 2767.1584482227654\n 6837.6331346659827\n 2389367.9569912655\n 18285.381739215863\n 693807.22355208197\n 179704470.92841581\n 12776.739314634311\n 34250.372604286953\n 3247.6511214978686\n 2220.8110370049694\n 1812979.7005435152\n 197.72589568643983\n 20593.8285129367\n 66286996.819601372\n 21891464.544918563\n 979.04705728942702\n 1214.296103904295\n 5096373.9527144749\n 160.72984688017428\n 108634.39352144071\n 1679.0309731007378\n",
                    "result": 1,
                    "runtime": 0.43818565097171813,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_divided_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_divided_expr_end.F90/atomic_x_divided_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8173420250532217
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": " 2617.9938116663398\n 165337.17277252747\n 1335.0505698692396\n 890.12989781510657\n 1567.342985267414\n 1277.2002194076661\n 1729355.5166650824\n 8569.7158605928962\n 3602.4675633515426\n 30351137.567601915\n 6741.397180879525\n 95.981147053473833\n 660.42721143889423\n 294.33053213757887\n 32514.143932746134\n 99202.202491071061\n 62538859.333144389\n 105233.27329136351\n 142840.80571744553\n 3541.5473582779987\n 36707.163691406473\n 310.78047111155951\n 735.1806109477717\n 2448.5832724247607\n 2257.1117029340926\n 733.05221316678717\n 9550085.4631721321\n 79434.701153774833\n 1310.632211786047\n 440.92144655727907\n 5705.0168247456013\n 65992.512040740272\n 566048.52192825498\n 3565.0843481839925\n 3103.0792342526397\n 2783.6219854300803\n 78475335.797015592\n 74348.036201656461\n 1645076.8322576934\n 47279.542538734924\n 76995.085625878637\n 42634.469247693967\n 1049.0206072525095\n 10038.644397839447\n 5530385.6334116152\n 314608.1833106706\n 118392901.58818762\n 1638.3494361318583\n 8302.8285057219982\n 10192.423321138267\n 7569.1249953736524\n 3353327.5430429494\n 4155523.1188418497\n 785.46865834377377\n 30695.548822393561\n 594199.3942493737\n 1923.0285789669401\n 932.51676184586165\n 46175.108754303394\n 123584.79752866182\n 971.18602853881089\n 4144.785139345774\n 2805.366788085953\n 602.52245925392981\n 1826211.3972661407\n 14235.384565530099\n 15314.268081428387\n 233.9370055278622\n 47060.718212157975\n 582.93166897887329\n 32266.235808237889\n 18942.595278805496\n 2462.1310588906267\n 900705.19885265664\n 308741.1448523869\n 20364645.867401719\n 94025.909091344176\n 31350.255465035072\n 30086.186199335698\n 2094.1039299346153\n 6536.5080817610124\n 500734.83039016364\n 20063.598185221312\n 64713.534425082515\n 36704.757343840167\n 12171.830788763797\n 741184.6793477796\n 3218596.2481702268\n 142981.50523075042\n 9273.5499534228784\n 709590.96785270097\n 5938.0561228560537\n 60683.449595518694\n 25531.258929641383\n 2543.9533706725606\n 157.40180867679669\n 8372.9868561354779\n 49.652639318711273\n 433456.06624914787\n 546341.32814763044\n 1603.2547967046005\n 6104.4891593607717\n 2930.4862627190546\n 11664.766725373202\n 4148.6077645110818\n 2458.2708274428278\n 120580.18055619429\n 17824.270494852859\n 213.14644349787858\n 468.42801938824402\n 21575.079885371735\n 4708.4053696645151\n 810.86676875743524\n 83.244372398558156\n 6126.760496296446\n 71648.42478799494\n 689.23523965953382\n 1706.0828555504872\n 5103.5377170738884\n 41771.582882321949\n 15094.537732303175\n 19295.120432639484\n 108233.62425018483\n 53663.323051562424\n 198841.73110275972\n 3399.0470811787136\n 47581.379791794112\n 10159866.07971888\n 8996269.5409535635\n 279.05479779989287\n 73579.13327867302\n 642.07958732429131\n 11100.406459700351\n 12979.707199142847\n 566.55377551812467\n 35580.568786650401\n 5209.2521121466007\n 47889.624790165341\n 73179.656312581719\n 149934.44819732194\n 3992.5522911150665\n 418.0391516176955\n 1977.3633996688011\n 2493.7541196100419\n 741.97437319516655\n 79919.641275321905\n 126.23353761494113\n 26117.094412415456\n 2470.0857601691596\n 2387713835.0010114\n 2765.5840477285474\n 10589.234371181774\n 116086.26344662266\n 8539.9871466722198\n 34378.326766706436\n 29723.044882957547\n 1825.9765594887419\n 36687.492631491841\n 9967.945891880252\n 5532.9725031777389\n 16046.06194967997\n 62097.278336548108\n 171205.71041517635\n 31786.41302865525\n 4884.9843342815193\n 903.25410351273149\n 2509.90693909838\n 86.456194049018961\n 13005.273589432703\n 51490.72194591006\n 101976.68305773915\n 887.15100330824237\n 13420.085814122092\n 997.76874522850892\n 178503.7724859663\n 293223.28708105133\n 5374.9584700094756\n 1149.120204479\n 5395.409945163653\n 58200.122324386459\n 576505.35348011123\n 464.41962795109919\n 1650.9239687563111\n 124669113.39070979\n 1478837.8010065979\n 42025.031289062259\n 22590.130277242439\n 84.739118442199157\n 1563.3533793211984\n 42088.67011537886\n 3735.5644371151598\n 367.07629493983853\n 675895.10280589107\n 2702773.9749647612\n 173.69140883228798\n 352051.65228951426\n 9297.7220280222227\n 109022.01181986398\n 7700.0105472695841\n 619.67765417357691\n 461348.03470604122\n 274.44915928128722\n 3521.2874093548098\n 123901.43952208993\n 2190.4821046466004\n 1408627.6360970838\n 9593.2090210165152\n 747.99407593049511\n 2871.4277697031662\n 21908438.8102086\n 619.13812795334331\n 19317282.991028458\n 12329.090308101922\n 23973.520527966251\n 1783.3044785444827\n 1920173.251802393\n 242.81220317522565\n 9334.6580808036942\n 8335.8930225971781\n 192.26705963195224\n 155518.50090364076\n 3946.2737841984199\n 52231.472946070586\n 100738.07052699626\n 15.597794276730101\n 1838.5479602088901\n 2182633.1089006644\n 1500.8868091137115\n 6512.5706322524165\n 17263.362775468442\n 18823.752791045332\n 2489.8901912712181\n 1470.8435197041958\n 204.51271616760451\n 40057.442630028476\n 297003.45576044515\n 243.88637647482838\n 50589.777871786922\n 879.36531601780678\n 105.3064795023292\n 23744359.486094762\n 2921715.0259286924\n 10049.921452727409\n 12334.059211140811\n 1680.5814667009654\n 12462.168848388394\n 1940.702862389744\n 2687574.0634519039\n 283.02253359956035\n 171838.97786651866\n 3393.2740835730096\n 22169.805101431346\n 14561.783475550164\n 192095.62041044666\n 1236.6135984273521\n 460.6789822122239\n 11272.741972203416\n 247.08194488010977\n 1255359.492975323\n 98285.577449023884\n 207785.6778349753\n 596.42568081501588\n 1155.8361615080798\n 124.63135828260711\n 9534.7781178494824\n 759.87276576929901\n 2456.048487998944\n 7536.852241392603\n 6799821.7733616587\n 218926.58925003817\n 1100.0393501756273\n 10750.161232251819\n 5016.5811358117026\n 173984.55801815997\n 11004.414782115757\n 2732.6769311123753\n 369710.48546426796\n 432067.69766768703\n 149234.85391042451\n 217967.35242436774\n 27905.098918942993\n 35006.877924818386\n 12827.928351620612\n 369878275.82953751\n 4022.4008258826962\n 2957.2350226217536\n 13811.397934843246\n 5970.7371938683273\n 43495.662293594767\n 28704.825744908932\n 2825.5413159664245\n 1545.302983058376\n 1614590.3842796735\n 315.11472665925487\n 54333.138423170742\n 670.63632034701936\n 360896.2584730488\n 2382.3505382857452\n 24041.120581776871\n 46.007532483242379\n 44892.465142789508\n 396869.68883502827\n 978293.48492491269\n 289566.44004520972\n 39098.72469011823\n 64698.279397467006\n 220364.23174929642\n 174632.57674483582\n 128280.06832772505\n 8002.3249687348807\n 6863.1927265289605\n 5634.8326384041511\n 7465.5382409855811\n 2384.2150151261685\n 33660.786630457944\n 26152.288685424352\n 1970.2112884024045\n 1434923.69687386\n 1306027.7110657408\n 9183.0451297872805\n 6313601.6800858742\n 267792.34856180305\n 4941.9842303462619\n 2896.2219380965557\n 203773.78299709919\n 5672.7203212173445\n 77939.647537037134\n 3406.3730649264271\n 12064.71082898044\n 640910.53966564988\n 485.7287986442102\n 1992849.90894137\n 114856.77559501334\n 236413.7924875193\n 206706.63832452963\n 920.24321065910237\n 46542.998107712352\n 392.6219466692221\n 12993.433173880429\n 13592.604018900938\n 13568.707744194908\n 49857.128089271057\n 34625.998491398663\n 3387.9847156667815\n 164072.93954103073\n 881.4611337748529\n 1711707.6393791356\n 587.67270204777992\n 1093138.2086699393\n 30500.852896574885\n 750.19083849330798\n 1074615.6140973081\n 148541.92859101327\n 32561.199043240395\n 3310.4590744650018\n 1961.6587107388439\n 137037.8356431484\n 8304.3687624396862\n 7502.491365761457\n 116866.20504420012\n 56862.978803702019\n 4478732.9353104355\n 34934.170662190132\n 216800.88230193412\n 58589.078390552044\n 362.43108288142344\n 3190.7449077173014\n 4880.3993747892227\n 176826.51493147828\n 2796.1526630734324\n 58950.754735813818\n 6697.4669329889248\n 12647.918398094862\n 17467.977974971029\n 1324.3687683241401\n 9626.5082442921266\n 6575.2991040642682\n 3839.6692128467257\n 65113.832688096591\n 574.43765238101287\n 665.27982527512791\n 368.5565140612751\n 1098.131625451276\n 9011.7002846738815\n 676028.60251701379\n 36953.147560447644\n 158287.04613293815\n 1188.2964627293527\n 250.84018931166125\n 129.31798582961397\n 22232.096490799137\n 779.61238540276588\n 3000103.2340147318\n 18903.239424795571\n 291553.53285523364\n 807.85381764876968\n 266.41839200160081\n 477.91124194633159\n 10714.427893634575\n 13079.054069713437\n 1846.6530157934026\n 2240796.1046524546\n 50.886321091429693\n 1342902.5860679117\n 65145.395571507761\n 108293.60562649825\n 747701.03545123769\n 6490.1744969410438\n 9341.3221495751914\n 60879.880537493431\n 1925.7571206826024\n 2495.6170715534076\n 1793.8339954286855\n 103803.70717519862\n 1190.1800525702636\n 585.33244907891788\n 57.029689457236223\n 45775.472870489066\n 5765161208.502471\n 40454.075713988961\n 155937.90557012981\n 107142.4794655569\n 397.27362539617428\n 1035.759907868925\n 21163.006218497198\n 3261.2878135208011\n 137135.32392798481\n 85.687976822122252\n 20491.055805684955\n 36722.506825930206\n 5235.1457073593783\n 2246.184031364679\n 1760319.7099616099\n 24121.546411397903\n 50421.353944825496\n 78654425.10641636\n 12374099.672625678\n 553.45808919809679\n 3337.8276395388712\n 211.35507889578903\n 6094.0481631260627\n 79.854510590280867\n 169651.00555776377\n 84768.58391366541\n 466788.39838329027\n 3492.0175456713328\n 342.86361412501088\n 94.120261753220547\n 312347.05297906819\n 234873.72925477143\n 632.03874824628303\n 12586807.777816441\n 1260.1869655026624\n 71430.748416697272\n 7790.8195617912043\n 1511.2179735041493\n 3068.5407533071707\n 41004.391564362522\n 3921.9616786722986\n 2807.2041324406\n 8453.2321042383555\n 255.80421812345966\n 11103.579476621726\n 7974.8283928473911\n 767.48102756170226\n 762.17445355583368\n 2683307.512603045\n 44.815266436484585\n 22654.528867702043\n 313307.73932023434\n 1288413.62899386\n 1814761.5886156221\n 149508.60716791937\n 13170.136848783561\n 3947209.6652993727\n 1872756.5771623398\n 123450028.23919988\n 167.78256746268471\n 6790.5254394595595\n 26319.347184329417\n 203.35626237343251\n 1070675.1676999847\n 26842.508092215994\n 487.88397974094642\n 427253.25886820635\n 15164.716756686859\n 34665.623593513716\n 19779.943045549855\n 439585.49029183516\n 357.38856141380995\n 509.48093388653808\n 214066.83872274976\n 182560.30146726704\n 3623.4849181600844\n 4418.0391344535919\n 8287.2559794504468\n 7670.7525276391507\n 171639.87006178047\n 3129.5821085550551\n 26774.314378564352\n 3410.1918638289258\n 5850.3847741031987\n 15024.866076493225\n 5513.5432552482971\n 7806.9070329777833\n 9704.5582514419621\n 1506.7809630546035\n 1747.3529457958018\n 3092.1389359872978\n 55384.222625231188\n 1557.3450118231351\n 11954.774968184045\n 1784.184411875794\n 119.16340803193557\n 370293.38166716998\n 286.25727922916548\n 84591.608286291405\n 1834.5984202797324\n 453076061.26598001\n 1103986.0831513791\n 23460.62957974197\n 58945.317575184527\n 155850.74169454814\n 4777.8322227528815\n 12484.276596035828\n 417.41035088591792\n 251755.0096007908\n 4336.5096382506918\n 21639.727855111578\n 5105.6117219251028\n 969834.89971521916\n 22286.373201078542\n 7875.8436097031408\n 23485.873266727474\n 5085.5664910787746\n 110112357.93094794\n 51662.993474174706\n 42671.081209928248\n 599066.05947672273\n 56422.914177022903\n 22242.716212404044\n 302377.19744697656\n 745.86039112784738\n 2885.2938938726197\n 6524.7753953384263\n 31708.976874788255\n 70974349.875422463\n 286429.71953564521\n 85084733.11315681\n 1630.2583556518689\n 16114.318303737267\n 9085.7448193886885\n 70039.167840955779\n 3606.0597570314876\n 54836.050306638994\n 10925.105191136734\n 252725.88919920978\n 2287.2552172903652\n 3741.3763801015361\n 700.28933893938256\n 248663.56579375482\n 6343.5027457132819\n 66716.924056977179\n 10205.562863296704\n 94921.96048882803\n 127146.07013012083\n 159052.20439351778\n 97978.298984692548\n 51385.182562962895\n 5236.1311336870376\n 13274.069066648373\n 312.73780476032442\n 1000.6744268561233\n 5765.1689113188031\n 202.69636396050197\n 3522.6908454590293\n 79825.239427592634\n 10954.106605213181\n 291.06329694588885\n 11263.696449293995\n 1602.4315861728564\n 158480.14049797232\n 1160.8937071381988\n 991.81731832691662\n 13783.678329864362\n 1578.8188797821254\n 246.1425853147675\n 78.289560881915094\n 669.10246956213155\n 79843970.741642877\n 138920.46091062552\n 1085256.6410571339\n 170467.09657745709\n 570.16538199873196\n 7710.5403816563958\n 8208.8043562872226\n 2699.4176656308914\n 2359.6579185256287\n 6324070.2516253665\n 771134.14125015284\n 37168.083265180561\n 13264.261443279847\n 1404.9461433971717\n 92.466834676622184\n 22642.399931277399\n 1236.451256800219\n 21090.185861895297\n 3193.8230205504588\n 409574.19670964876\n 231016.99831991483\n 515.42032565966599\n 99206.314127201098\n 105864.97335609228\n 1048.699901622216\n 6770.1259196410383\n 948250.23021649302\n 622.80528431215714\n 28748.395324992969\n 434073.6320069019\n 42391.68452098775\n 43244.27449747327\n 550.53878525709354\n 5721.0889910175083\n 2428.4123827708463\n 20842.562791162909\n 32386.542266603148\n 579798.11858847237\n 12295.363845220909\n 226399.4415989012\n 102283.71288813124\n 5644079.3152342206\n 1954.9878864747668\n 557.72565993006526\n 10275327.338085553\n 15848.309928275259\n 356523.1173939447\n 14654400.836177392\n 9965.9361140435522\n 818.049817468524\n 26391.262266672478\n 4830.458816019679\n 143033.9286787748\n 734305.01302424213\n 49762.27990279541\n 1872.8801862712151\n 11320.101954156547\n 61543.604662712605\n 7888.9799393871999\n 31307.587862807031\n 5992.4634944685995\n 93169254.677896708\n 52431.984537791024\n 252.14400417126163\n 77260.861242823637\n 29696.462314976259\n 323472.8015406949\n 8186.8379194266836\n 446488.76630350208\n 487.49425040903168\n 5538.6224795864691\n 5101.8622798399274\n 974.29889110402962\n 22235.827908746069\n 7131538.2232945114\n 22695.349108346629\n 16218.121826421442\n 17590.345528325768\n 1898206.3764970256\n 787.43306632695919\n 3721.1476022533939\n 33221.318354775765\n 751673.60926442116\n 6677.2979974155478\n 6427497.8651486943\n 12704.051143060407\n 5162.9657251440576\n 4632.980568454137\n 156.16559824455118\n 516495.78813510441\n 42009.694248222368\n 860.98424030134686\n 3392.934155917711\n 5182.3349506403993\n 170623.51780092262\n 306.77369084392899\n 1925.4034083657727\n 629.09808333522733\n 4459.3316205750434\n 399361.08432221593\n 703.51942960379392\n 3837.9406048547789\n 3257.3109590145145\n 5648003.1979847923\n 504850.68703429459\n 1974839.5896050439\n 25.21577867385804\n 103703.61659392566\n 1530260.6098018712\n 10627.182333970713\n 175.55388528074548\n 1699.8461718135597\n 28283.764566428956\n 2767.1584482227654\n 6837.6331346659827\n 2389367.9569912655\n 18285.381739215863\n 693807.22355208197\n 179704470.92841581\n 12776.739314634311\n 34250.372604286953\n 3247.6511214978686\n 2220.8110370049694\n 1812979.7005435152\n 197.72589568643983\n 20593.8285129367\n 66286996.819601372\n 21891464.544918563\n 979.04705728942702\n 1214.296103904295\n 5096373.9527144749\n 160.72984688017428\n 108634.39352144071\n 1679.0309731007378\n",
                    "result": 1,
                    "runtime": 0.4335012640221976,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_eqv_expr.F90/atomic_x_eqv_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6668401660281233
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4365156449493952,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_eqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_eqv_expr_end.F90/atomic_x_eqv_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7163913800031878
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4436976160504855,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_minus_expr.F90/atomic_x_minus_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6668739720480517
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43493556301109493,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_minus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_minus_expr_end.F90/atomic_x_minus_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6664894289569929
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.47496369597502053,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_neqv_expr.F90/atomic_x_neqv_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6665902200038545
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.45591956801945344,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_neqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_neqv_expr_end.F90/atomic_x_neqv_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.667075316014234
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42618301999755204,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_or_expr.F90/atomic_x_or_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9672837620018981
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4481330720009282,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_or_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_or_expr_end.F90/atomic_x_or_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8671437110169791
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4286172809661366,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_plus_expr.F90/atomic_x_plus_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7176198179950006
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4345435560098849,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_plus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_plus_expr_end.F90/atomic_x_plus_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8167913280194625
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.44130497600417584,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_times_expr.F90/atomic_x_times_expr.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.716775837005116
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.44009757199091837,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_times_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/atomic_x_times_expr_end.F90/atomic_x_times_expr_end.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7674596389988437
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43410119198961183,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copy_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_copy_no_lower_bound.F90/data_copy_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 21 \n  A data region was created at line 21 and ending at line 28.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 28 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 22 \n  A region starting at line 22 and ending at line 27 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 29 \n  A loop starting at line 29 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 29 \n  A loop starting at line 29 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 54 \n  A loop starting at line 54 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9171612249920145
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43471997702727094,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyin_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_copyin_no_lower_bound.F90/data_copyin_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 21 \n  A data region was created at line 21 and ending at line 28.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 28 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 22 \n  A region starting at line 22 and ending at line 27 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 30 \n  A loop starting at line 30 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.766572165011894
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.48118675500154495,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyout_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_copyout_no_lower_bound.F90/data_copyout_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 21 \n  A data region was created at line 21 and ending at line 28.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 28 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 22 \n  A region starting at line 22 and ending at line 27 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 29 \n  A loop starting at line 29 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 29 \n  A loop starting at line 29 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 54 \n  A loop starting at line 54 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8169118009973317
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.44411227595992386,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyout_reference_counts.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 27 \n  A loop starting at line 27 was fused with the loop starting at line 25.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 27 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 28 \n  A data region was created at line 28 and ending at line 37.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  A data region was created at line 29 and ending at line 36.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 36 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 66 \n  A region starting at line 66 and ending at line 68 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 79 \n  A loop starting at line 79 was fused with the loop starting at line 77.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 79 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  A data region was created at line 82 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 89 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 125 \n  A region starting at line 125 and ending at line 127 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 138 \n  A loop starting at line 138 was fused with the loop starting at line 136.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 138 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  A data region was created at line 141 and ending at line 149.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 149 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  A region starting at line 142 and ending at line 147 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 147 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 147 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 147 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 144 \n  A loop starting at line 144 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 183 \n  A loop starting at line 183 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 192 \n  A loop starting at line 192 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 201 \n  A loop starting at line 201 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0084 seconds\nCray Fortran : 246 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9185410100035369
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:980 CRAY_ACC_ERROR - Invalid reference count in present table\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4342663620482199,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 66 \n  A region starting at line 66 and ending at line 68 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 79 \n  A loop starting at line 79 was fused with the loop starting at line 77.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 79 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  A data region was created at line 82 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 89 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 125 \n  A region starting at line 125 and ending at line 127 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 138 \n  A loop starting at line 138 was fused with the loop starting at line 136.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 138 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  A data region was created at line 141 and ending at line 149.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 149 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  A region starting at line 142 and ending at line 147 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 147 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 147 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 147 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 144 \n  A loop starting at line 144 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 192 \n  A loop starting at line 192 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 201 \n  A loop starting at line 201 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 237 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7665982650360093
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:980 CRAY_ACC_ERROR - Invalid reference count in present table\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.433159613981843,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 27 \n  A loop starting at line 27 was fused with the loop starting at line 25.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 27 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 28 \n  A data region was created at line 28 and ending at line 37.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  A data region was created at line 29 and ending at line 36.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 36 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 125 \n  A region starting at line 125 and ending at line 127 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 138 \n  A loop starting at line 138 was fused with the loop starting at line 136.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 138 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  A data region was created at line 141 and ending at line 149.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 149 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  A region starting at line 142 and ending at line 147 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 147 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 147 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 147 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 144 \n  A loop starting at line 144 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 183 \n  A loop starting at line 183 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 201 \n  A loop starting at line 201 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 237 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7664018559735268
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:980 CRAY_ACC_ERROR - Invalid reference count in present table\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4304357529617846,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 66 \n  A region starting at line 66 and ending at line 68 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 79 \n  A loop starting at line 79 was fused with the loop starting at line 77.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 79 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  A data region was created at line 82 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 89 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 125 \n  A region starting at line 125 and ending at line 127 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 138 \n  A loop starting at line 138 was fused with the loop starting at line 136.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 138 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  A data region was created at line 141 and ending at line 149.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 149 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  A region starting at line 142 and ending at line 147 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 147 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 147 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 147 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 144 \n  A loop starting at line 144 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 192 \n  A loop starting at line 192 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 201 \n  A loop starting at line 201 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 237 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 1.0170037819771096
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:980 CRAY_ACC_ERROR - Invalid reference count in present table\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.43626327702077106,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 27 \n  A loop starting at line 27 was fused with the loop starting at line 25.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 27 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 28 \n  A data region was created at line 28 and ending at line 37.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  A data region was created at line 29 and ending at line 36.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 36 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 66 \n  A region starting at line 66 and ending at line 68 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 79 \n  A loop starting at line 79 was fused with the loop starting at line 77.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 79 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  A data region was created at line 82 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 89 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 183 \n  A loop starting at line 183 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 192 \n  A loop starting at line 192 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 237 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8162606740370393
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46593924798071384,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 21 \n  A data region was created at line 21 and ending at line 38.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 38 (acc_share).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 22 \n  A data region was created at line 22 and ending at line 29.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 23 \n  A region starting at line 23 and ending at line 28 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 28 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 30 \n  A data region was created at line 30 and ending at line 37.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 30 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 37 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 31 \n  A region starting at line 31 and ending at line 36 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 71 \n  A loop starting at line 71 was fused with the loop starting at line 70.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 71 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 72 \n  A loop starting at line 72 was fused with the loop starting at line 70.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 72 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 74 \n  A data region was created at line 74 and ending at line 91.\n\n\nftn-6422 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 74 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 91 (acc_share).\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 75 \n  A data region was created at line 75 and ending at line 82.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 76 \n  A region starting at line 76 and ending at line 81 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 81 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 81 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 78 \n  A loop starting at line 78 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 83 \n  A data region was created at line 83 and ending at line 90.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 83 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 90 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 84 \n  A region starting at line 84 and ending at line 89 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 86 \n  A loop starting at line 86 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 124 \n  A loop starting at line 124 was fused with the loop starting at line 123.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 124 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 125 \n  A loop starting at line 125 was fused with the loop starting at line 123.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 125 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 127 \n  A data region was created at line 127 and ending at line 144.\n\n\nftn-6422 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 127 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 144 (acc_share).\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 128 \n  A data region was created at line 128 and ending at line 135.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 128 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 135 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 129 \n  A region starting at line 129 and ending at line 134 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 129 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 134 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 129 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 134 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 131 \n  A loop starting at line 131 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 136 \n  A data region was created at line 136 and ending at line 143.\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 136 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 143 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 137 \n  A region starting at line 137 and ending at line 142 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 137 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 142 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 137 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 142 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 139 \n  A loop starting at line 139 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 178 \n  A loop starting at line 178 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 187 \n  A loop starting at line 187 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create.F90, Line = 196 \n  A loop starting at line 196 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0083 seconds\nCray Fortran : 241 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8672009110450745
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42827162402682006,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_create_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_create_no_lower_bound.F90/data_create_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, free at line 34 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory for user shaped variable \"e\" on accelerator, copy back at line 34 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"e\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 60 \n  A loop starting at line 60 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 87 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 1.0766008669743314
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4636196889914572,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_present_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_present_no_lower_bound.F90/data_present_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 22 \n  A data region was created at line 22 and ending at line 29.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 23 \n  A region starting at line 23 and ending at line 28 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 28 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 31 \n  A loop starting at line 31 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 31 \n  A loop starting at line 31 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 56 \n  A loop starting at line 56 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8165376689867117
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4347913949750364,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_with_changing_subscript.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_with_changing_subscript.F90/data_with_changing_subscript.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 22 \n  A data region was created at line 22 and ending at line 30.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 30 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 23 \n  A region starting at line 23 and ending at line 29 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 31 \n  A loop starting at line 31 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 31 \n  A loop starting at line 31 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 56 \n  A loop starting at line 56 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9173742959974334
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4379651650087908,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_with_derived_type.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/data_with_derived_type.F90/data_with_derived_type.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 28 \n  A data region was created at line 28 and ending at line 35.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 29 \n  A region starting at line 29 and ending at line 34 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 36 \n  A loop starting at line 36 was partially vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7163801030255854
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4291442389949225,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 246 source lines\nCray Fortran : 1 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31615635397611186
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 15, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 32, Column = 69 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"FIXED_SIZE_ARRAY\".\n\n\nftn-511 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 36, Column = 23 \n  \"FIXED_SIZE_ARRAY\" is scalar, but it is being used as an array or function reference.\n\n\nftn-511 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 42, Column = 28 \n  \"FIXED_SIZE_ARRAY\" is scalar, but it is being used as an array or function reference.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0255 seconds\nCray Fortran : 255 source lines\nCray Fortran : 5 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.47030687402002513
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 58, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 74, Column = 69 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SCALAR\".\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 77, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 78, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 78, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 84, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 84, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0087 seconds\nCray Fortran : 255 source lines\nCray Fortran : 8 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3155966949998401
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 100, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 119, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 126, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 126, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0085 seconds\nCray Fortran : 255 source lines\nCray Fortran : 5 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3159121930366382
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 142, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 161, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 162, Column = 9 \n  Program unit \"MULTIPLYDATA\" is defined as a FUNCTION at line 2 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 168, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 168, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0086 seconds\nCray Fortran : 255 source lines\nCray Fortran : 6 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31628058501519263
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT4 -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0037 seconds\nCray Fortran : 246 source lines\nCray Fortran : 1 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3155442039715126
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_copyin_mod.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_copyin_mod.F90/declare_copyin_mod.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_copyin_mod.F90",
                    "config": 1,
                    "errors": "/opt/cray/pe/cce/14.0.3/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /usr/lib64//crt1.o: in function `_start':\n/home/abuild/rpmbuild/BUILD/glibc-2.31/csu/../sysdeps/x86_64/start.S:104: undefined reference to `main'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7166232129675336
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0037 seconds\nCray Fortran : 251 source lines\nCray Fortran : 4 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26616597396787256
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 33, Column = 69 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"FIXED_SIZE_ARRAY\".\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 36, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-724 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 37, Column = 25 \n  Unknown statement.  Expected assignment statement but found \"(\" instead of \"=\" or \"=>\".\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 43, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 43, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-557 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 43, Column = 23 \n  \"FIXED_SIZE_ARRAY\" has been used as a variable, therefore it must not be declared or used as a procedure.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 49, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 49, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0074 seconds\nCray Fortran : 260 source lines\nCray Fortran : 12 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.32399702799739316
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 79, Column = 3 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SCALAR\".\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 84, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 85, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 85, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 91, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 91, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0071 seconds\nCray Fortran : 260 source lines\nCray Fortran : 10 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31582046701805666
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-1725 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 121, Column = 15 \n  Unexpected syntax while parsing the DIRECTIVE statement : \"HOST, DEVICE, IF and/or ASYNC\" was expected but found \"EOS\".\n\n\nftn-113 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 125, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 132, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 132, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0071 seconds\nCray Fortran : 260 source lines\nCray Fortran : 8 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36532026098575443
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 166, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 167, Column = 9 \n  Program unit \"MULTIPLYDATA\" is defined as a FUNCTION at line 6 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 173, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 173, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0069 seconds\nCray Fortran : 260 source lines\nCray Fortran : 8 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4157491510268301
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT4 -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0037 seconds\nCray Fortran : 251 source lines\nCray Fortran : 4 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3676254829624668
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 289 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36724596098065376
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 44, Column = 7 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0074 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31525174796115607
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 93, Column = 9 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0072 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2651300129946321
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 145, Column = 11 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0074 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656539449817501
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 200, Column = 11 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0075 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2652263889904134
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT4 -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0037 seconds\nCray Fortran : 289 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2656402979628183
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0129 seconds\nCray Fortran : 288 source lines\nCray Fortran : 5 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2659842720022425
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0108 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31540749897249043
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0104 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2657361039891839
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0106 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.265158457972575
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0111 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26541005400940776
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0108 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26517253497149795
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0106 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26543061301345006
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F907 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0107 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2651813420234248
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0122 seconds\nCray Fortran : 247 source lines\nCray Fortran : 4 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.2661718149902299
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0102 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26513489201897755
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0098 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31541437294799834
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0096 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.41575715597718954
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0099 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3657442810363136
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0101 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3652771880151704
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0098 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.46544239902868867
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F907 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0100 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3656173149938695
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0138 seconds\nCray Fortran : 276 source lines\nCray Fortran : 4 errors, 12 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.41583306301617995
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0115 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3652564079966396
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0114 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3205232189502567
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0112 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3656684140441939
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0118 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31577753397868946
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0131 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3665459390031174
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0112 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3154776149895042
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F907 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0118 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36547278601210564
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 22 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 28 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0113 seconds\nCray Fortran : 188 source lines\nCray Fortran : 2 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36609947599936277
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0079 seconds\nCray Fortran : 179 source lines\nCray Fortran : 2 errors, 4 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4745619900058955
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 22 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 28 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0076 seconds\nCray Fortran : 179 source lines\nCray Fortran : 2 errors, 4 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31999939697561786
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0076 seconds\nCray Fortran : 179 source lines\nCray Fortran : 2 errors, 4 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26541789900511503
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_copyin_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_copyin_no_lower_bound.F90/enter_data_copyin_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 22 \n  A data region was created at line 22 and ending at line 29.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 29 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 23 \n  A region starting at line 23 and ending at line 28 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 28 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 32 \n  A loop starting at line 32 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 57 \n  A loop starting at line 57 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 84 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7164973799954168
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.45168499101419,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 22 \n  A data region was created at line 22 and ending at line 29.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 23 \n  A region starting at line 23 and ending at line 28 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 30 \n  A data region was created at line 30 and ending at line 37.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 30 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 37 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 31 \n  A region starting at line 31 and ending at line 36 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 71 \n  A loop starting at line 71 was fused with the loop starting at line 70.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 71 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 72 \n  A loop starting at line 72 was fused with the loop starting at line 70.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 72 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 74 \n  A data region was created at line 74 and ending at line 81.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 74 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 81 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 75 \n  A region starting at line 75 and ending at line 80 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 75 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 80 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 77 \n  A loop starting at line 77 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 82 \n  A data region was created at line 82 and ending at line 89.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 82 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 89 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 123 \n  A loop starting at line 123 was fused with the loop starting at line 122.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 123 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 124 \n  A loop starting at line 124 was fused with the loop starting at line 122.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 124 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 127 \n  A data region was created at line 127 and ending at line 134.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 127 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 134 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 128 \n  A region starting at line 128 and ending at line 133 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 128 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 133 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 130 \n  A loop starting at line 130 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 135 \n  A data region was created at line 135 and ending at line 142.\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 135 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 142 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 136 \n  A region starting at line 136 and ending at line 141 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 136 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 141 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 138 \n  A loop starting at line 138 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 177 \n  A loop starting at line 177 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 186 \n  A loop starting at line 186 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create.F90, Line = 195 \n  A loop starting at line 195 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0081 seconds\nCray Fortran : 240 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.866714300995227
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42834813200170174,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_create_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_create_no_lower_bound.F90/enter_data_create_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 24 \n  A data region was created at line 24 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory for user shaped variable \"e\" on accelerator, copy back at line 35 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 25 \n  A region starting at line 25 and ending at line 34 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"e\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7180466110003181
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42634735797764733,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_if.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5663850799901411
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0335085520055145,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 15 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 17 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 28 \n  A loop starting at line 28 was fused with the loop starting at line 26.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 28 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  A data region was created at line 31 and ending at line 38.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 38 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  If not already present: allocate memory for user shaped variable \"a\" on accelerator, free at line 38 (acc_share).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 38 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  A region starting at line 32 and ending at line 37 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 37 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 34 \n  A loop starting at line 34 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 40 \n  A loop starting at line 40 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 40 \n  A loop starting at line 40 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 305 \n  A loop starting at line 305 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7162693489808589
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.37236921302974224,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT3 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 67 \n  A region starting at line 67 and ending at line 69 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 67 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 69 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 80 \n  A loop starting at line 80 was fused with the loop starting at line 78.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 80 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  A data region was created at line 83 and ending at line 90.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 90 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 90 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 90 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  A region starting at line 84 and ending at line 89 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 86 \n  A loop starting at line 86 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 93 \n  A loop starting at line 93 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 93 \n  A loop starting at line 93 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 314 \n  A loop starting at line 314 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.766029377002269
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4283125930232927,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT4 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 120 \n  A region starting at line 120 and ending at line 122 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 120 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 122 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 133 \n  A loop starting at line 133 was fused with the loop starting at line 132.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 135 \n  A loop starting at line 135 was fused with the loop starting at line 134.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 136 \n  A loop starting at line 136 was fused with the loop starting at line 132.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 136 \n  A statement was replaced by a library call.\n\n\nftn-6230 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 140 \n  A loop starting at line 140 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 141 \n  A loop starting at line 141 was fused with the loop starting at line 140.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  A data region was created at line 143 and ending at line 150.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 150 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 150 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 150 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  A region starting at line 144 and ending at line 149 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 149 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 146 \n  A loop starting at line 146 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 153 \n  A loop starting at line 153 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 153 \n  A loop starting at line 153 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 323 \n  A loop starting at line 323 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7160400860011578
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.48490596702322364,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT5 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 181 \n  A region starting at line 181 and ending at line 183 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 181 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 183 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 195 \n  A loop starting at line 195 was fused with the loop starting at line 193.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 195 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 199 \n  A loop starting at line 199 was fused with the loop starting at line 198.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 201 \n  A loop starting at line 201 was fused with the loop starting at line 200.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  A data region was created at line 203 and ending at line 210.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 210 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 210 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 210 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  A region starting at line 204 and ending at line 209 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 209 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 209 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 209 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 206 \n  A loop starting at line 206 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 213 \n  A loop starting at line 213 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 213 \n  A loop starting at line 213 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 332 \n  A loop starting at line 332 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7161951150046661
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43152428697794676,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 241 \n  A region starting at line 241 and ending at line 243 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 241 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 243 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 255 \n  A loop starting at line 255 was fused with the loop starting at line 253.\n\n\nftn-6231 ftn: VECTOR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 255 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  A data region was created at line 258 and ending at line 265.\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 265 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 265 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 265 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  A region starting at line 259 and ending at line 264 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 264 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 264 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 264 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 261 \n  A loop starting at line 261 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 267 \n  A loop starting at line 267 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 267 \n  A loop starting at line 267 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 341 \n  A loop starting at line 341 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7160177130135708
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4675245899707079,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 15 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 17 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 28 \n  A loop starting at line 28 was fused with the loop starting at line 26.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 28 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  A data region was created at line 31 and ending at line 38.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 38 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  If not already present: allocate memory for user shaped variable \"a\" on accelerator, free at line 38 (acc_share).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 38 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  A region starting at line 32 and ending at line 37 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 37 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 34 \n  A loop starting at line 34 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 40 \n  A loop starting at line 40 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 40 \n  A loop starting at line 40 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 67 \n  A region starting at line 67 and ending at line 69 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 67 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 69 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 80 \n  A loop starting at line 80 was fused with the loop starting at line 78.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 80 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  A data region was created at line 83 and ending at line 90.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 90 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 90 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 90 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  A region starting at line 84 and ending at line 89 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 86 \n  A loop starting at line 86 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 93 \n  A loop starting at line 93 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 93 \n  A loop starting at line 93 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 120 \n  A region starting at line 120 and ending at line 122 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 120 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 122 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 133 \n  A loop starting at line 133 was fused with the loop starting at line 132.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 135 \n  A loop starting at line 135 was fused with the loop starting at line 134.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 136 \n  A loop starting at line 136 was fused with the loop starting at line 132.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 136 \n  A statement was replaced by a library call.\n\n\nftn-6230 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 140 \n  A loop starting at line 140 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 141 \n  A loop starting at line 141 was fused with the loop starting at line 140.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  A data region was created at line 143 and ending at line 150.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 150 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 150 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 150 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  A region starting at line 144 and ending at line 149 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 149 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 146 \n  A loop starting at line 146 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 153 \n  A loop starting at line 153 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 153 \n  A loop starting at line 153 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 181 \n  A region starting at line 181 and ending at line 183 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 181 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 183 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 195 \n  A loop starting at line 195 was fused with the loop starting at line 193.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 195 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 199 \n  A loop starting at line 199 was fused with the loop starting at line 198.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 201 \n  A loop starting at line 201 was fused with the loop starting at line 200.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  A data region was created at line 203 and ending at line 210.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 210 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 210 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 210 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  A region starting at line 204 and ending at line 209 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 209 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 209 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 209 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 206 \n  A loop starting at line 206 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 213 \n  A loop starting at line 213 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 213 \n  A loop starting at line 213 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 241 \n  A region starting at line 241 and ending at line 243 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 241 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 243 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 255 \n  A loop starting at line 255 was fused with the loop starting at line 253.\n\n\nftn-6231 ftn: VECTOR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 255 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  A data region was created at line 258 and ending at line 265.\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 265 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 265 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 265 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  A region starting at line 259 and ending at line 264 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 264 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 264 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 264 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 261 \n  A loop starting at line 261 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 267 \n  A loop starting at line 267 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST5, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 267 \n  A loop starting at line 267 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 305 \n  A loop starting at line 305 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 314 \n  A loop starting at line 314 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 323 \n  A loop starting at line 323 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 332 \n  A loop starting at line 332 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90, Line = 341 \n  A loop starting at line 341 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0117 seconds\nCray Fortran : 404 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 1.1170880859717727
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:679 CRAY_ACC_ERROR - Host region (7fffffff4280 to 7fffffff61c0) overlaps present region (7fffffff5f9c to 7fffffff5fa0 index 0) but is not contained for 'c(:)' from ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/enter_data_if.F90:83\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.43837454600725323,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data.F90/exit_data.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 12 \n  A region starting at line 12 and ending at line 14 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 12 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 14 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 23.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 28 \n  A region starting at line 28 and ending at line 33 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 61 \n  A region starting at line 61 and ending at line 63 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 61 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 63 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 73 \n  A loop starting at line 73 was fused with the loop starting at line 72.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 75 \n  A region starting at line 75 and ending at line 80 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 77 \n  A loop starting at line 77 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 111 \n  A loop starting at line 111 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data.F90, Line = 120 \n  A loop starting at line 120 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7667826809920371
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42455524700926617,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_copyout_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_copyout_no_lower_bound.F90/exit_data_copyout_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 21 \n  A data region was created at line 21 and ending at line 28.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 22 \n  A region starting at line 22 and ending at line 27 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 30 \n  A loop starting at line 30 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6668841359787621
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4300153120420873,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_copyout_reference_counts.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 30 \n  A data region was created at line 30 and ending at line 38.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  A region starting at line 31 and ending at line 36 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 67 \n  A region starting at line 67 and ending at line 69 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 80 \n  A loop starting at line 80 was fused with the loop starting at line 78.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 80 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 82 \n  A data region was created at line 82 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 118 \n  A region starting at line 118 and ending at line 120 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A loop starting at line 131 was fused with the loop starting at line 129.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  A region starting at line 135 and ending at line 140 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 140 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 137 \n  A loop starting at line 137 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 176 \n  A loop starting at line 176 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 185 \n  A loop starting at line 185 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 194 \n  A loop starting at line 194 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0081 seconds\nCray Fortran : 239 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9169770189910196
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:980 CRAY_ACC_ERROR - Invalid reference count in present table\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4300574829685502,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 67 \n  A region starting at line 67 and ending at line 69 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 80 \n  A loop starting at line 80 was fused with the loop starting at line 78.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 80 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 82 \n  A data region was created at line 82 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 118 \n  A region starting at line 118 and ending at line 120 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A loop starting at line 131 was fused with the loop starting at line 129.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  A region starting at line 135 and ending at line 140 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 140 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 137 \n  A loop starting at line 137 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 185 \n  A loop starting at line 185 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 194 \n  A loop starting at line 194 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 230 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8162678480148315
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC:            find_in_present_table failed for 'c(:)' (0x7fffffff40c0-0x7fffffff6000) from ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90:142\nACC: libcrayacc/acc_runtime.c:664 CRAY_ACC_ERROR - Variable not found in present table\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4283460070146248,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 30 \n  A data region was created at line 30 and ending at line 38.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  A region starting at line 31 and ending at line 36 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 118 \n  A region starting at line 118 and ending at line 120 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A loop starting at line 131 was fused with the loop starting at line 129.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  A region starting at line 135 and ending at line 140 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 140 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 137 \n  A loop starting at line 137 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 176 \n  A loop starting at line 176 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 194 \n  A loop starting at line 194 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 230 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7664841649821028
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:980 CRAY_ACC_ERROR - Invalid reference count in present table\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.43191109399776906,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 67 \n  A region starting at line 67 and ending at line 69 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 80 \n  A loop starting at line 80 was fused with the loop starting at line 78.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 80 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 82 \n  A data region was created at line 82 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 118 \n  A region starting at line 118 and ending at line 120 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A loop starting at line 131 was fused with the loop starting at line 129.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  A region starting at line 135 and ending at line 140 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 140 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 137 \n  A loop starting at line 137 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 185 \n  A loop starting at line 185 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 194 \n  A loop starting at line 194 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 230 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8176749259582721
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC:            find_in_present_table failed for 'c(:)' (0x7fffffff40c0-0x7fffffff6000) from ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90:142\nACC: libcrayacc/acc_runtime.c:664 CRAY_ACC_ERROR - Variable not found in present table\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.430033105018083,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 30 \n  A data region was created at line 30 and ending at line 38.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  A region starting at line 31 and ending at line 36 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 67 \n  A region starting at line 67 and ending at line 69 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 80 \n  A loop starting at line 80 was fused with the loop starting at line 78.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 80 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 82 \n  A data region was created at line 82 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 176 \n  A loop starting at line 176 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 185 \n  A loop starting at line 185 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 230 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8161794870393351
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:980 CRAY_ACC_ERROR - Invalid reference count in present table\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.43229283898836,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 67 \n  A region starting at line 67 and ending at line 69 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 80 \n  A loop starting at line 80 was fused with the loop starting at line 78.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 80 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 82 \n  A data region was created at line 82 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 118 \n  A region starting at line 118 and ending at line 120 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A loop starting at line 131 was fused with the loop starting at line 129.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  A region starting at line 135 and ending at line 140 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 140 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 137 \n  A loop starting at line 137 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 185 \n  A loop starting at line 185 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 194 \n  A loop starting at line 194 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 230 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7666072120191529
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC:            find_in_present_table failed for 'c(:)' (0x7fffffff40c0-0x7fffffff6000) from ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90:142\nACC: libcrayacc/acc_runtime.c:664 CRAY_ACC_ERROR - Variable not found in present table\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4417847510194406,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 30 \n  A data region was created at line 30 and ending at line 38.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  A region starting at line 31 and ending at line 36 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 118 \n  A region starting at line 118 and ending at line 120 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A loop starting at line 131 was fused with the loop starting at line 129.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  A region starting at line 135 and ending at line 140 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 140 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 137 \n  A loop starting at line 137 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 176 \n  A loop starting at line 176 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 194 \n  A loop starting at line 194 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0069 seconds\nCray Fortran : 230 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8162485400098376
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:980 CRAY_ACC_ERROR - Invalid reference count in present table\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.43166248698253185,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F907 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 67 \n  A region starting at line 67 and ending at line 69 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 80 \n  A loop starting at line 80 was fused with the loop starting at line 78.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 80 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 82 \n  A data region was created at line 82 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 118 \n  A region starting at line 118 and ending at line 120 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A loop starting at line 131 was fused with the loop starting at line 129.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  A region starting at line 135 and ending at line 140 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 140 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 137 \n  A loop starting at line 137 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 185 \n  A loop starting at line 185 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 194 \n  A loop starting at line 194 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0069 seconds\nCray Fortran : 230 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8163332300027832
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC:            find_in_present_table failed for 'c(:)' (0x7fffffff40c0-0x7fffffff6000) from ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90:142\nACC: libcrayacc/acc_runtime.c:664 CRAY_ACC_ERROR - Variable not found in present table\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4527891780016944,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_delete_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_delete_no_lower_bound.F90/exit_data_delete_no_lower_bound.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 29 \n  A data region was created at line 29 and ending at line 36.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 36 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 38 \n  A loop starting at line 38 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 38 \n  A loop starting at line 38 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 63 \n  A region starting at line 63 and ending at line 65 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 77 \n  A loop starting at line 77 was fused with the loop starting at line 75.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 77 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 80 \n  A data region was created at line 80 and ending at line 87.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 80 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 80 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 86 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 83 \n  A loop starting at line 83 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 90 \n  A loop starting at line 90 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 90 \n  A loop starting at line 90 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 128 \n  A loop starting at line 128 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 164 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8164749940042384
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:679 CRAY_ACC_ERROR - Host region (7fffffff40c0 to 7fffffff6000) overlaps present region (7fffffff5f5c to 7fffffff5f60 index 0) but is not contained for 'c(:)' from ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90:79\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.42866109998431057,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_delete_no_lower_bound.F90/exit_data_delete_no_lower_bound.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 63 \n  A region starting at line 63 and ending at line 65 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 77 \n  A loop starting at line 77 was fused with the loop starting at line 75.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 77 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 80 \n  A data region was created at line 80 and ending at line 87.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 80 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 80 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 86 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 83 \n  A loop starting at line 83 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 90 \n  A loop starting at line 90 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 90 \n  A loop starting at line 90 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 128 \n  A loop starting at line 128 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 155 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7167397679877467
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42622099799336866,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_finalize.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_finalize.F90/exit_data_finalize.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 38 \n  A loop starting at line 38 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 38 \n  A loop starting at line 38 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 157 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7169244950055145
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC:            find_in_present_table failed for 'a(:)' (0x7fffffff01c0-0x7fffffff2100) from ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90:44\nACC: libcrayacc/acc_runtime.c:664 CRAY_ACC_ERROR - Variable not found in present table\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4759961470263079,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/exit_data_finalize.F90/exit_data_finalize.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5159312719479203
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03334947698749602,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/init.F90/init.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164019230287522
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0332053080201149,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/init_device_num.F90/init_device_num.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_num.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5661056520184502
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033196510979905725,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/init_device_type.F90/init_device_type.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_type.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164668270153925
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03340239898534492,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/init_device_type_num.F90/init_device_type_num.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_type_num.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5160404639900662
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03354007500456646,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type_num_nvidia.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/init_device_type_num_nvidia.F90/init_device_type_num_nvidia.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_type_num_nvidia.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166676850058138
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03331174299819395,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "init_device_type_nvidia.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/init_device_type_nvidia.F90/init_device_type_nvidia.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/init_device_type_nvidia.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162693259771913
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.032992486958391964,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_async.F90/kernels_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 22 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 23 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 25 \n  A data region was created at line 25 and ending at line 44.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"e\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 26 \n  A data region was created at line 26 and ending at line 31.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 28 \n  A loop starting at line 28 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 32 \n  A data region was created at line 32 and ending at line 37.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"e\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, copy back at line 37 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 34 \n  A loop starting at line 34 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 34 \n  A loop starting at line 34 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 38 \n  A data region was created at line 38 and ending at line 43.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"g\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 40 \n  A loop starting at line 40 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_async.F90, Line = 86 \n  A loop starting at line 86 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 113 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7669027159572579
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.451940378989093,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 13 \n  A data region was created at line 13 and ending at line 15.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 14 \n  A region starting at line 14 and ending at line 14 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 28 \n  A data region was created at line 28 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 29 \n  A data region was created at line 29 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 31 \n  A loop starting at line 31 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 62 \n  A data region was created at line 62 and ending at line 64.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 63 \n  A region starting at line 63 and ending at line 63 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 76 \n  A loop starting at line 76 was fused with the loop starting at line 74.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 76 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 78 \n  A data region was created at line 78 and ending at line 85.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 85 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 85 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 85 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 79 \n  A data region was created at line 79 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 81 \n  A loop starting at line 81 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 81 \n  A loop starting at line 81 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 87 \n  A loop starting at line 87 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 87 \n  A loop starting at line 87 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 115 \n  A data region was created at line 115 and ending at line 117.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 116 \n  A region starting at line 116 and ending at line 116 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 129 \n  A loop starting at line 129 was fused with the loop starting at line 127.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 129 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 131 \n  A data region was created at line 131 and ending at line 146.\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 131 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 146 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 131 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 146 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 131 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 146 (acc_copyin).\n\n\nftn-6202 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 132 \n  A loop starting at line 132 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 135 \n  A data region was created at line 135 and ending at line 140.\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 135 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 140 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 137 \n  A loop starting at line 137 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 137 \n  A loop starting at line 137 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 141 \n  A loop starting at line 141 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 141 \n  A loop starting at line 141 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 148 \n  A loop starting at line 148 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 148 \n  A loop starting at line 148 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copy.F90, Line = 198 \n  A loop starting at line 198 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0083 seconds\nCray Fortran : 243 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8174861570005305
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4302504500374198,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 25 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 27 \n  A data region was created at line 27 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 27 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 28 \n  A data region was created at line 28 and ending at line 33.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 28 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 30 \n  A loop starting at line 30 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 90 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 90 (acc_copy).\n\n\nftn-6002 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 76 \n  A loop starting at line 76 was eliminated by optimization.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6002 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 81 \n  A loop starting at line 81 was eliminated by optimization.\n\n\nftn-6002 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 85 \n  A loop starting at line 85 was eliminated by optimization.\n\n\nftn-6002 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 91 \n  A loop starting at line 91 was eliminated by optimization.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 132 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 137 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 132 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 137 (acc_copyin).\n\n\nftn-6002 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 134 \n  A loop starting at line 134 was eliminated by optimization.\n\n\nftn-6002 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 139 \n  A loop starting at line 139 was eliminated by optimization.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 171 \n  A loop starting at line 171 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0082 seconds\nCray Fortran : 234 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7163578310282901
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4328613419784233,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_copyout.F90/kernels_copyout.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 13 \n  A data region was created at line 13 and ending at line 15.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 14 \n  A region starting at line 14 and ending at line 14 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 25 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 27 \n  A data region was created at line 27 and ending at line 34.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 27 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 28 \n  A data region was created at line 28 and ending at line 33.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 28 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 33 (acc_copyout).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 28 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 30 \n  A loop starting at line 30 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 61 \n  A data region was created at line 61 and ending at line 63.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 62 \n  A region starting at line 62 and ending at line 62 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 74 \n  A loop starting at line 74 was fused with the loop starting at line 73.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 74 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 76 \n  A data region was created at line 76 and ending at line 83.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 76 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 76 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 77 \n  A data region was created at line 77 and ending at line 82.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 77 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 82 (acc_copyout).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 77 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 79 \n  A loop starting at line 79 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 79 \n  A loop starting at line 79 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 114 \n  A loop starting at line 114 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90, Line = 123 \n  A loop starting at line 123 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 159 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7671418680110946
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43372172402450815,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 13 \n  A data region was created at line 13 and ending at line 15.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 14 \n  A region starting at line 14 and ending at line 14 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 25.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 28 \n  A data region was created at line 28 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 29 \n  A data region was created at line 29 and ending at line 34.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 34 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 31 \n  A loop starting at line 31 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 62 \n  A data region was created at line 62 and ending at line 64.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 63 \n  A region starting at line 63 and ending at line 63 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 74 \n  A loop starting at line 74 was fused with the loop starting at line 73.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 74 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 75 \n  A data region was created at line 75 and ending at line 82.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 75 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 82 (acc_copyout).\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 76 \n  A data region was created at line 76 and ending at line 81.\n\n\nftn-6422 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 76 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 81 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 81 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 78 \n  A loop starting at line 78 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 78 \n  A loop starting at line 78 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 108 \n  A data region was created at line 108 and ending at line 110.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 109 \n  A region starting at line 109 and ending at line 109 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 120 \n  A loop starting at line 120 was fused with the loop starting at line 119.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 120 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 122 \n  A data region was created at line 122 and ending at line 133.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 122 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 133 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 122 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 133 (acc_copyout).\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 123 \n  A data region was created at line 123 and ending at line 132.\n\n\nftn-6422 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 123 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 132 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 123 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 132 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 123 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 132 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 125 \n  A loop starting at line 125 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 125 \n  A loop starting at line 125 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 129 \n  A loop starting at line 129 was fused with the loop starting at line 125.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 135 \n  A loop starting at line 135 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 135 \n  A loop starting at line 135 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 166 \n  A loop starting at line 166 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 175 \n  A loop starting at line 175 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_create.F90, Line = 184 \n  A loop starting at line 184 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0081 seconds\nCray Fortran : 229 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9174552540061995
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4649605439626612,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_default_copy.F90/kernels_default_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 28 \n  A data region was created at line 28 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 29 \n  A data region was created at line 29 and ending at line 34.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 31 \n  A loop starting at line 31 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6002 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 82 \n  A loop starting at line 82 was eliminated by optimization.\n\n\nftn-6002 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 87 \n  A loop starting at line 87 was eliminated by optimization.\n\n\nftn-6002 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 93 \n  A loop starting at line 93 was eliminated by optimization.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 122 \n  A loop starting at line 122 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 131 \n  A loop starting at line 131 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 167 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170635639922693
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4390159689937718,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_default_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_default_present.F90/kernels_default_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_default_present.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516013702028431
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.032927871972788125,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_if.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5667945840395987
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033227299980353564,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 14 \n  A data region was created at line 14 and ending at line 16.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 25.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 30 \n  A loop starting at line 30 was replaced by a library call.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 30 \n  A loop starting at line 30 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 245 \n  A loop starting at line 245 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 299 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6658874179702252
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT3 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 61 \n  A data region was created at line 61 and ending at line 63.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 62 \n  A region starting at line 62 and ending at line 62 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 73 \n  A loop starting at line 73 was fused with the loop starting at line 72.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 73 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 77 \n  A data region was created at line 77 and ending at line 82.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 79 \n  A loop starting at line 79 was partitioned.\n\n\nftn-6401 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 79 \n  A loop starting at line 79 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 79 \n  A loop starting at line 79 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 254 \n  A loop starting at line 254 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 299 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6682706520077772
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4317937010200694,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT4 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 111 \n  A data region was created at line 111 and ending at line 113.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 112 \n  A region starting at line 112 and ending at line 112 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 124 \n  A loop starting at line 124 was fused with the loop starting at line 123.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 124 \n  A statement was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 127 \n  A loop starting at line 127 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 131 \n  A data region was created at line 131 and ending at line 136.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 133 \n  A loop starting at line 133 was partitioned.\n\n\nftn-6401 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 133 \n  A loop starting at line 133 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 133 \n  A loop starting at line 133 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 138 \n  A loop starting at line 138 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 138 \n  A loop starting at line 138 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 150 \n  A loop starting at line 150 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 150 \n  A loop starting at line 150 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 263 \n  A loop starting at line 263 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 299 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.715806677006185
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": -8,
                    "runtime": 0.43403332598973066,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-303 ftn: ERROR TEST4, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 188, Column = 24 \n  Data type LOGICAL is not allowed with INTEGER for the operation \"eq\".\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 299 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26592829899163917
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT4 -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 61 \n  A data region was created at line 61 and ending at line 63.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 62 \n  A region starting at line 62 and ending at line 62 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 73 \n  A loop starting at line 73 was fused with the loop starting at line 72.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 73 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 77 \n  A data region was created at line 77 and ending at line 82.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 79 \n  A loop starting at line 79 was partitioned.\n\n\nftn-6401 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 79 \n  A loop starting at line 79 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 79 \n  A loop starting at line 79 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 111 \n  A data region was created at line 111 and ending at line 113.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 112 \n  A region starting at line 112 and ending at line 112 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 124 \n  A loop starting at line 124 was fused with the loop starting at line 123.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 124 \n  A statement was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 127 \n  A loop starting at line 127 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 131 \n  A data region was created at line 131 and ending at line 136.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 133 \n  A loop starting at line 133 was partitioned.\n\n\nftn-6401 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 133 \n  A loop starting at line 133 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 133 \n  A loop starting at line 133 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 138 \n  A loop starting at line 138 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 138 \n  A loop starting at line 138 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 150 \n  A loop starting at line 150 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 150 \n  A loop starting at line 150 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 254 \n  A loop starting at line 254 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 263 \n  A loop starting at line 263 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 308 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7660961790243164
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:679 CRAY_ACC_ERROR - Host region (7fffffff4440 to 7fffffff6380) overlaps present region (7fffffff635c to 7fffffff6360 index 0) but is not contained for 'b(:)' from ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_if.F90:126\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.43028648901963606,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop.F90/kernels_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 27 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 31 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 35 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 39 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 43 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 47 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 51 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 55 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 59 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 23, Column = 16 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 25, Column = 18 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 27, Column = 20 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 29, Column = 22 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 31, Column = 24 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 33, Column = 26 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 35, Column = 28 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 37, Column = 30 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 39, Column = 32 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 41, Column = 34 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 42, Column = 35 \n  Unexpected syntax while parsing the assignment statement : \"operand\" was expected but found \"_\".\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 108 source lines\nCray Fortran : 21 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26593156601302326
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop.F90/kernels_loop.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.515611095004715
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06563519896008074,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_independent.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_independent.F90/kernels_loop_independent.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 20 \n  A data region was created at line 20 and ending at line 25.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 21 \n  A data region was created at line 21 and ending at line 24.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 24 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 24 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 22 \n  A loop starting at line 22 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 22 \n  A loop starting at line 22 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 27 \n  A loop starting at line 27 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 27 \n  A loop starting at line 27 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 52 \n  A loop starting at line 52 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 79 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6164936759741977
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662631129845977,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_general.F90/kernels_loop_reduction_add_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 21 \n  A data region was created at line 21 and ending at line 26.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 21 \n  If not already present: allocate memory and copy variable \"total\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 22 \n  A region starting at line 22 and ending at line 25 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 22 \n  If not already present: allocate memory and copy variable \"total\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 27 \n  A loop starting at line 27 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 27 \n  A loop starting at line 27 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 54 \n  A loop starting at line 54 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.717188946029637
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4261256529716775,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_loop.F90/kernels_loop_reduction_add_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 21 \n  A data region was created at line 21 and ending at line 36.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, free at line 36 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"d\" on accelerator, copy back at line 36 (acc_copyout).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 22 \n  A data region was created at line 22 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 26 \n  A loop starting at line 26 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6415 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 26 \n  Allocate memory and copy variable \"avg\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 32 \n  A loop starting at line 32 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 39 \n  A loop starting at line 39 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 39 \n  A loop starting at line 39 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 43 \n  A loop starting at line 43 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 69 \n  A loop starting at line 69 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 96 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7668730599689297
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4650796949863434,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_vector_loop.F90/kernels_loop_reduction_add_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 22 \n  A data region was created at line 22 and ending at line 32.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 32 (acc_copyout).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6665412409929559
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4543266879627481,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_general.F90/kernels_loop_reduction_and_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 30 \n  A data region was created at line 30 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 30 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 31 \n  A data region was created at line 31 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 31 \n  If not already present: allocate memory and copy variable \"results\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 32 \n  A loop starting at line 32 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7167129559675232
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4850457340362482,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_loop.F90/kernels_loop_reduction_and_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 21 \n  A loop starting at line 21 was unrolled 2 times.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 21 \n  A loop starting at line 21 was partially vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 22 \n  A loop starting at line 22 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 37 \n  A data region was created at line 37 and ending at line 57.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"results\" to accelerator, copy back at line 57 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 57 (acc_copy).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 38 \n  A data region was created at line 38 and ending at line 56.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"results\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 42 \n  A loop starting at line 42 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 42 \n  A loop starting at line 42 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6415 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 42 \n  Allocate memory and copy variable \"temp\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 45 \n  A region starting at line 45 and ending at line 45 was placed on the accelerator.\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 47 \n  A loop starting at line 47 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 47 \n  A loop starting at line 47 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 60 \n  A loop starting at line 60 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 66 \n  A loop starting at line 66 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 66 \n  A loop starting at line 66 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7666359599679708
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46533878502668813,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_vector_loop.F90/kernels_loop_reduction_and_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 40 \n  A data region was created at line 40 and ending at line 50.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 40 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 50 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 40 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 50 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 41 \n  A data region was created at line 41 and ending at line 49.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 41 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 49 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 41 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 49 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 42 \n  A loop starting at line 42 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 42 \n  A loop starting at line 42 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 45 \n  A loop starting at line 45 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 54 \n  A loop starting at line 54 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 83 \n  A loop starting at line 83 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 110 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7171424360130914
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4677455050405115,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_general.F90/kernels_loop_reduction_bitand_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 23 \n  A loop starting at line 23 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 24 \n  A loop starting at line 24 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 24 \n  A loop starting at line 24 was vectorized as part of the loop starting at line 23.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 27 \n  A loop starting at line 27 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 37 \n  A data region was created at line 37 and ending at line 42.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 38 \n  A data region was created at line 38 and ending at line 41.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 38 \n  If not already present: allocate memory and copy variable \"b\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 41 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 39 \n  A loop starting at line 39 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 39 \n  A loop starting at line 39 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7166346440208144
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4243364189751446,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_loop.F90/kernels_loop_reduction_bitand_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 23 \n  A loop starting at line 23 was partially vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 27 \n  A loop starting at line 27 was fused with the loop starting at line 23.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 28 \n  A loop starting at line 28 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 28 \n  A loop starting at line 28 was vectorized as part of the loop starting at line 23.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 31 \n  A loop starting at line 31 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 34 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 39 \n  A loop starting at line 39 was unwound.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 43 \n  A data region was created at line 43 and ending at line 57.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 43 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 57 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 43 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 57 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 43 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 57 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 44 \n  A data region was created at line 44 and ending at line 56.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 44 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 56 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 44 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 44 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 45 \n  A loop starting at line 45 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 45 \n  A loop starting at line 45 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 48 \n  A loop starting at line 48 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 53 \n  A loop starting at line 53 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 61 \n  A loop starting at line 61 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 61 \n  A loop starting at line 61 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 67 \n  A loop starting at line 67 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 67 \n  A loop starting at line 67 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 93 \n  A loop starting at line 93 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 120 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7171284990035929
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4293156950152479,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_vector_loop.F90/kernels_loop_reduction_bitand_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was collapsed into the loop starting at line 25.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was partially vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 26 \n  A loop starting at line 26 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 26 \n  A loop starting at line 26 was vectorized as part of the loop starting at line 25.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 29 \n  A loop starting at line 29 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 32 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 38 \n  A data region was created at line 38 and ending at line 48.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 38 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 48 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 38 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 48 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 39 \n  A data region was created at line 39 and ending at line 47.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 39 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 39 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 47 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 40 \n  A loop starting at line 40 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 43 \n  A loop starting at line 43 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 52 \n  A loop starting at line 52 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 52 \n  A loop starting at line 52 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 79 \n  A loop starting at line 79 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 106 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7166007689666003
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4701311800163239,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_general.F90/kernels_loop_reduction_bitor_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 23 \n  A loop starting at line 23 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 24 \n  A loop starting at line 24 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 24 \n  A loop starting at line 24 was vectorized as part of the loop starting at line 23.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 27 \n  A loop starting at line 27 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 35 \n  A data region was created at line 35 and ending at line 40.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 40 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 36 \n  A data region was created at line 36 and ending at line 39.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 36 \n  If not already present: allocate memory and copy variable \"b\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 37 \n  A loop starting at line 37 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 37 \n  A loop starting at line 37 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 42 \n  A loop starting at line 42 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 42 \n  A loop starting at line 42 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 68 \n  A loop starting at line 68 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170548170106485
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4382755010155961,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_loop.F90/kernels_loop_reduction_bitor_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 23.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 27 \n  A loop starting at line 27 was collapsed into the loop starting at line 28.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 28 \n  A loop starting at line 28 was partially vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 29 \n  A loop starting at line 29 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 29 \n  A loop starting at line 29 was vectorized as part of the loop starting at line 28.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 32 \n  A loop starting at line 32 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 35 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 41 \n  A data region was created at line 41 and ending at line 55.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 41 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 41 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 41 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 55 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 42 \n  A data region was created at line 42 and ending at line 54.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 42 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 54 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 42 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 54 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 42 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 54 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 43 \n  A loop starting at line 43 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 43 \n  A loop starting at line 43 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 46 \n  A loop starting at line 46 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 51 \n  A loop starting at line 51 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 59 \n  A loop starting at line 59 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 59 \n  A loop starting at line 59 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 65 \n  A loop starting at line 65 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 65 \n  A loop starting at line 65 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 118 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7672949319821782
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.462566269969102,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_vector_loop.F90/kernels_loop_reduction_bitor_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was interchanged with the loop starting at line 24.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was vectorized.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 27 \n  A loop starting at line 27 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 35 \n  A data region was created at line 35 and ending at line 45.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 36 \n  A data region was created at line 36 and ending at line 44.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 49 \n  A loop starting at line 49 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 49 \n  A loop starting at line 49 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 76 \n  A loop starting at line 76 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7166317700175568
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4390719970106147,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_general.F90/kernels_loop_reduction_bitxor_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 23 \n  A data region was created at line 23 and ending at line 28.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 24 \n  A data region was created at line 24 and ending at line 27.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 24 \n  If not already present: allocate memory and copy variable \"b\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 25 \n  A loop starting at line 25 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 30 \n  A loop starting at line 30 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 56 \n  A loop starting at line 56 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170928200357594
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4345787990023382,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_loop.F90/kernels_loop_reduction_bitxor_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 23.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 26 \n  A loop starting at line 26 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 28 \n  A data region was created at line 28 and ending at line 42.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 29 \n  A data region was created at line 29 and ending at line 41.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 41 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 30 \n  A loop starting at line 30 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 46 \n  A loop starting at line 46 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 52 \n  A loop starting at line 52 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 52 \n  A loop starting at line 52 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170443860231899
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4305835930281319,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_vector_loop.F90/kernels_loop_reduction_bitxor_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 64 \n  A loop starting at line 64 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 91 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6663139130105264
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.432472842046991,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_general.F90/kernels_loop_reduction_max_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 23 \n  A data region was created at line 23 and ending at line 28.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 24 \n  A data region was created at line 24 and ending at line 27.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 24 \n  If not already present: allocate memory and copy variable \"maximum\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 25 \n  A loop starting at line 25 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 30 \n  A loop starting at line 30 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 56 \n  A loop starting at line 56 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7164087989949621
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4274736369843595,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_loop.F90/kernels_loop_reduction_max_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 37.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 37 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 24 \n  A data region was created at line 24 and ending at line 36.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"maximum\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 25 \n  A loop starting at line 25 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 40 \n  A loop starting at line 40 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 68 \n  A loop starting at line 68 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7162861309479922
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4286997349699959,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_vector_loop.F90/kernels_loop_reduction_max_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6373 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 21 \n  A loop starting at line 21 with a trip count of 10 was unwound into 2 vector iterations.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"maximum\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"maximum\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 64 \n  A loop starting at line 64 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 91 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6666482979780994
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42944312101462856,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_general.F90/kernels_loop_reduction_min_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 22 \n  A data region was created at line 22 and ending at line 27.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 23 \n  A data region was created at line 23 and ending at line 26.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 23 \n  If not already present: allocate memory and copy variable \"minimum\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 24 \n  A loop starting at line 24 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 29 \n  A loop starting at line 29 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 29 \n  A loop starting at line 29 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7164288089843467
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42760746501153335,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_loop.F90/kernels_loop_reduction_min_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 25 \n  A data region was created at line 25 and ending at line 39.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"minimum\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 26 \n  A data region was created at line 26 and ending at line 38.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"minimum\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 27 \n  A loop starting at line 27 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 35 \n  A loop starting at line 35 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 43 \n  A loop starting at line 43 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 50 \n  A loop starting at line 50 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 50 \n  A loop starting at line 50 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 76 \n  A loop starting at line 76 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7167155310162343
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4279996129916981,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_vector_loop.F90/kernels_loop_reduction_min_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 22 \n  A data region was created at line 22 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"minimum\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"minimum\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6669276879983954
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4295957959839143,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_general.F90/kernels_loop_reduction_multiply_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 24 \n  A data region was created at line 24 and ending at line 29.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 25 \n  A data region was created at line 25 and ending at line 28.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 25 \n  If not already present: allocate memory and copy variable \"multiplied_total\" to accelerator, copy back at line 28 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 26 \n  A loop starting at line 26 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 31 \n  A loop starting at line 31 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 31 \n  A loop starting at line 31 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 59 \n  A loop starting at line 59 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 86 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.717071429011412
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43020026304293424,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_loop.F90/kernels_loop_reduction_multiply_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 25 \n  A data region was created at line 25 and ending at line 39.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 26 \n  A data region was created at line 26 and ending at line 38.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 27 \n  A loop starting at line 27 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 35 \n  A loop starting at line 35 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 43 \n  A loop starting at line 43 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 81 \n  A loop starting at line 81 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 108 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7668353170156479
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4296609520097263,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_vector_loop.F90/kernels_loop_reduction_multiply_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  A data region was created at line 24 and ending at line 34.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 34 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  A region starting at line 25 and ending at line 33 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 38 \n  A loop starting at line 38 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 38 \n  A loop starting at line 38 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 65 \n  A loop starting at line 65 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 92 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7164572919718921
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4303145229932852,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_general.F90/kernels_loop_reduction_or_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 30 \n  A data region was created at line 30 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 30 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 31 \n  A data region was created at line 31 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 31 \n  If not already present: allocate memory and copy variable \"results\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 32 \n  A loop starting at line 32 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7163511480321176
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43042769201565534,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_loop.F90/kernels_loop_reduction_or_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 36 \n  A data region was created at line 36 and ending at line 56.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"results\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 37 \n  A data region was created at line 37 and ending at line 55.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"results\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 41 \n  A loop starting at line 41 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 41 \n  A loop starting at line 41 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6415 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 41 \n  Allocate memory and copy variable \"temp\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 44 \n  A region starting at line 44 and ending at line 44 was placed on the accelerator.\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 46 \n  A loop starting at line 46 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 46 \n  A loop starting at line 46 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 60 \n  A loop starting at line 60 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 66 \n  A loop starting at line 66 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 66 \n  A loop starting at line 66 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7663697170210071
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42850160697707906,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_vector_loop.F90/kernels_loop_reduction_or_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 31 \n  A data region was created at line 31 and ending at line 41.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 31 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 31 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 41 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 32 \n  A data region was created at line 32 and ending at line 40.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 40 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 40 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 33 \n  A loop starting at line 33 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 72 \n  A loop starting at line 72 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 99 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6662054610205814
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4549772799946368,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_seq.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_seq.F90/kernels_loop_seq.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 20 \n  A data region was created at line 20 and ending at line 25.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 21 \n  A data region was created at line 21 and ending at line 24.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 24 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 24 (acc_copy).\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 22 \n  A loop starting at line 22 was unrolled 4 times.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 22 \n  A loop starting at line 22 will be serially executed.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 22 \n  A region starting at line 22 and ending at line 24 was placed on the accelerator.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 27 \n  A loop starting at line 27 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 27 \n  A loop starting at line 27 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 52 \n  A loop starting at line 52 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 79 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6663542379974388
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.47171784000238404,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_tile.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_tile.F90/kernels_loop_tile.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_tile.F90",
                    "config": 1,
                    "errors": "\n\nftn-1342 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_tile.F90, Line = 28, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\n\nftn-1342 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_tile.F90, Line = 31, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 94 source lines\nCray Fortran : 2 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26562754198675975
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_tile.F90/kernels_loop_tile.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_tile.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5158764230436645
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06560857902513817,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_vector_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_vector_blocking.F90/kernels_loop_vector_blocking.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 22 \n  A data region was created at line 22 and ending at line 34.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 34 (acc_copyout).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 25 \n  A loop starting at line 25 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 25.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6665037169586867
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46506195596884936,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_worker_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_loop_worker_blocking.F90/kernels_loop_worker_blocking.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 20.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 22 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 24 \n  A data region was created at line 24 and ending at line 36.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 24 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 36 (acc_copyout).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 25 \n  A data region was created at line 25 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 27 \n  A loop starting at line 27 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 32 \n  A loop starting at line 32 was fused with the loop starting at line 27.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 38 \n  A loop starting at line 38 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 38 \n  A loop starting at line 38 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6668404170195572
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43761260400060564,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_num_gangs.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_num_gangs.F90/kernels_num_gangs.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_num_gangs.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5726958379964344
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06651862600119784,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_num_workers.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_num_workers.F90/kernels_num_workers.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_num_workers.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5663609529729001
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03331131301820278,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_present.F90/kernels_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_present.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_present.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_present.F90, Line = 21 \n  A data region was created at line 21 and ending at line 26.\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_present.F90, Line = 23 \n  A loop starting at line 23 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_present.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_present.F90, Line = 29 \n  A loop starting at line 29 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_present.F90, Line = 29 \n  A loop starting at line 29 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_present.F90, Line = 54 \n  A loop starting at line 54 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6667715949588455
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3728081790031865,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_scalar_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_scalar_default_copy.F90/kernels_scalar_default_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_scalar_default_copy.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5163191690226085
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03295120794791728,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_vector_length.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_vector_length.F90/kernels_vector_length.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_vector_length.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5720800179988146
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03372685599606484,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/kernels_wait.F90/kernels_wait.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_wait.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_wait.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_wait.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_wait.F90, Line = 22 \n  A data region was created at line 22 and ending at line 27.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_wait.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_wait.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_wait.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_wait.F90, Line = 24 \n  A loop starting at line 24 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_wait.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_wait.F90, Line = 30 \n  A loop starting at line 30 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_wait.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/kernels_wait.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7172262470121495
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.44400533998850733,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_collapse.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/loop_collapse.F90/loop_collapse.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 22 \n  A loop starting at line 22 was unwound.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 26 \n  A data region was created at line 26 and ending at line 35.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 26 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 26 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 26 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 27 \n  A region starting at line 27 and ending at line 34 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 30 \n  A loop starting at line 30 was unrolled 4 times.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 30 \n  A loop starting at line 30 will be serially executed.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 36 \n  A loop starting at line 36 was partially vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 38 \n  A loop starting at line 38 was unrolled 2 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 38 \n  A loop starting at line 38 was vectorized as part of the loop starting at line 36.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 72 \n  A loop starting at line 72 was fused with the loop starting at line 70.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 72 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 74 \n  A data region was created at line 74 and ending at line 83.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 74 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 74 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 74 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 83 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 75 \n  A region starting at line 75 and ending at line 82 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 75 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 75 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 75 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6060 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 77 \n  A loop nest starting at line 77 was collapsed according to user directive.\n\n\nftn-6060 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 78 \n  A loop nest starting at line 78 was collapsed according to user directive.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 78 \n  A loop starting at line 78 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6003 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 85 \n  A loop starting at line 85 was collapsed into the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 115 \n  A loop starting at line 115 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_collapse.F90, Line = 124 \n  A loop starting at line 124 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 160 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7666218539816327
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4330171989859082,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_no_collapse.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/loop_no_collapse.F90/loop_no_collapse.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 22 \n  A loop starting at line 22 was unwound.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 26 \n  A data region was created at line 26 and ending at line 35.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 26 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 26 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 26 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 27 \n  A region starting at line 27 and ending at line 34 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 30 \n  A loop starting at line 30 was unrolled 4 times.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 30 \n  A loop starting at line 30 will be serially executed.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 37 \n  A loop starting at line 37 was partially vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 39 \n  A loop starting at line 39 was unrolled 2 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 39 \n  A loop starting at line 39 was vectorized as part of the loop starting at line 37.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 73 \n  A loop starting at line 73 was fused with the loop starting at line 71.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 73 \n  A statement was replaced by a library call.\n\n\nftn-6008 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 75 \n  A loop starting at line 75 was unwound.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 79 \n  A data region was created at line 79 and ending at line 88.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 80 \n  A data region was created at line 80 and ending at line 87.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 80 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 87 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 80 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 80 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 82 \n  A loop starting at line 82 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 82 \n  A loop starting at line 82 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 83 \n  A loop starting at line 83 was unrolled 4 times.\n\n\nftn-6411 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 83 \n  A loop starting at line 83 will be serially executed.\n\n\nftn-6209 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 90 \n  A loop starting at line 90 was partially vectorized.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 92 \n  A loop starting at line 92 was unrolled 2 times.\n\n\nftn-6208 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 92 \n  A loop starting at line 92 was vectorized as part of the loop starting at line 90.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 122 \n  A loop starting at line 122 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 131 \n  A loop starting at line 131 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 167 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8167429919703864
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42861755104968324,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel.F90/parallel.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel.F90",
                    "config": 1,
                    "errors": "ftn-7991 ftn: INTERNAL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel.F90, Line = 64 \n  INTERNAL COMPILER ERROR:  \"Only three levels of parallelism supported\" (/home/jenkins/crayftn/pdgcs/v_mt_translate.c, line 9626, version 80f97ce63a7725610a864116e454efffd075b025)\n\n\nftn-7064 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel.F90, Line = 41 \n  OpenACC loop directive error: vector clause must be on innermost loop directive.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 112 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "   Error message      ::  Only three levels of parallelism supported\n   Error detected     ::  File '/home/jenkins/crayftn/pdgcs/v_mt_translate.c', line 9626\n   Initiated from     ::  Line 1818 (v_main.c)\n   Optimizer built    ::  2022-08-18 (production)\n\n   File               ::  /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel.F90\n   Function           ::  test1\n   at or near line    ::  64\n\n   Compiler hash      ::  80f97ce63a7725610a864116e454efffd075b025\n   Target             ::  Heterogeneous\n     CPU              ::  x86-trento\n     ACCEL            ::  amdgcn-gfx90a\n\nCreating internal compiler error backtrace (please wait):\n[0x00000000c00203] linux_backtrace ??:?\n[0x00000000c010f1] pdgcs_internal_error(char const*, char const*, int) ??:?\n[0x000000008ee293] acc_determine_part_type(bool) v_mt_translate.c:?\n[0x0000000090cef6] mt_translation() ??:?\n[0x00000000811ab5] void run_pass_helper<void>::exec<void (&)()>(int, char const*, void (&)()) ??:?\n[0x00000000803a91] pdgcs_main ??:?\n[0x00000000797d82] PDGCS_do_proc ??:?\n[0x000000006d9e83] cvrt_proc_to_pdg m_cvrt.c:?\n[0x000000006da79f] m_cvrt_to_pdg ??:?\n[0x00000000711aa4] m_start_ipa ??:?\n[0x00000000636c27] main ??:?\n[0x007fffeb7c32bc] ?? ??:0\n[0x000000006b8e39] _start /home/abuild/rpmbuild/BUILD/glibc-2.31/csu/../sysdeps/x86_64/start.S:120\n\nNote:  This is a non-debug compiler.  Technical support should\n       continue problem isolation using a compiler built for\n       debugging.\n\n",
                    "result": 1,
                    "runtime": 0.5930887220310979
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel.F90/parallel.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5156529220403172
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0650263240095228,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_async.F90/parallel_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 22 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 23 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  A data region was created at line 25 and ending at line 47.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"g\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"f\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"e\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 26 \n  A region starting at line 26 and ending at line 31 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 32 \n  A region starting at line 32 and ending at line 37 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"e\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, copy back at line 37 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 34 \n  A loop starting at line 34 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 40 \n  A region starting at line 40 and ending at line 45 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 40 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 40 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 40 \n  If not already present: allocate memory and copy whole array \"g\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 42 \n  A loop starting at line 42 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_async.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8164087070035748
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4197055200347677,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_copy.F90/parallel_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copy.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copy.F90, Line = 20 \n  A region starting at line 20 and ending at line 25 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copy.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copy.F90, Line = 22 \n  A loop starting at line 22 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copy.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copy.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copy.F90, Line = 53 \n  A loop starting at line 53 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6166735219885595
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42479451798135415,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_copyin.F90/parallel_copyin.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90, Line = 24 \n  A region starting at line 24 and ending at line 26 was placed on the accelerator.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90, Line = 29 \n  A region starting at line 29 and ending at line 35 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6666707789991051
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4427920670132153,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 12 \n  A region starting at line 12 and ending at line 14 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 25 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 27 \n  A data region was created at line 27 and ending at line 34.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 27 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 28 \n  A region starting at line 28 and ending at line 33 was placed on the accelerator.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 28 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 33 (acc_copyout).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 28 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 60 \n  A region starting at line 60 and ending at line 62 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 73 \n  A loop starting at line 73 was fused with the loop starting at line 72.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 75 \n  A data region was created at line 75 and ending at line 82.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 76 \n  A region starting at line 76 and ending at line 81 was placed on the accelerator.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 76 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 81 (acc_copyout).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 81 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 78 \n  A loop starting at line 78 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 84 \n  A loop starting at line 84 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 84 \n  A loop starting at line 84 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 109 \n  A region starting at line 109 and ending at line 111 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 122 \n  A loop starting at line 122 was fused with the loop starting at line 121.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 124 \n  A data region was created at line 124 and ending at line 132.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 124 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 132 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 124 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 132 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 125 \n  A region starting at line 125 and ending at line 130 was placed on the accelerator.\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 125 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 130 (acc_copyout).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 125 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 130 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 127 \n  A loop starting at line 127 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 134 \n  A loop starting at line 134 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 134 \n  A loop starting at line 134 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 165 \n  A loop starting at line 165 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 174 \n  A loop starting at line 174 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90, Line = 183 \n  A loop starting at line 183 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0079 seconds\nCray Fortran : 228 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8166918819770217
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43187839997699484,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_create.F90/parallel_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 21 \n  A data region was created at line 21 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 22 \n  A region starting at line 22 and ending at line 31 was placed on the accelerator.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 31 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 33 \n  A loop starting at line 33 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_create.F90, Line = 58 \n  A loop starting at line 58 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 85 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7668719469802454
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4757389060105197,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_default_copy.F90/parallel_default_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 13 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 15 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 28 \n  A data region was created at line 28 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 29 \n  A region starting at line 29 and ending at line 34 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 61 \n  A region starting at line 61 and ending at line 63 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 61 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 63 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 75 \n  A loop starting at line 75 was fused with the loop starting at line 73.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 75 \n  A statement was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 78 \n  A loop starting at line 78 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 79 \n  A data region was created at line 79 and ending at line 86.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 80 \n  A region starting at line 80 and ending at line 85 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 80 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 85 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 80 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 85 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 80 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 85 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 82 \n  A loop starting at line 82 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 87 \n  A loop starting at line 87 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 87 \n  A loop starting at line 87 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 93 \n  A loop starting at line 93 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 93 \n  A loop starting at line 93 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 122 \n  A loop starting at line 122 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 131 \n  A loop starting at line 131 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 167 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7670151839847676
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4327504039974883,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_default_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_default_present.F90/parallel_default_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_default_present.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5161789170233533
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033000502968207,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_firstprivate.F90/parallel_firstprivate.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 23 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 25 \n  A data region was created at line 25 and ending at line 35.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6412 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 26 \n  A loop starting at line 26 will be redundantly executed.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 26 \n  A region starting at line 26 and ending at line 34 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 26 \n  A loop starting at line 26 was unrolled 4 times.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 38 \n  A loop starting at line 38 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 38 \n  A loop starting at line 38 was vectorized.\n\n\nftn-6202 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 72 \n  A loop starting at line 72 was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 73 \n  A loop starting at line 73 was fused with the loop starting at line 70.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 73 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 75 \n  A data region was created at line 75 and ending at line 89.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6412 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  A loop starting at line 76 will be redundantly executed.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  A region starting at line 76 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6423 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  Private array \"c\" was allocated to global memory.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  A loop starting at line 76 was unrolled 4 times.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 78 \n  A loop starting at line 78 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 80 \n  A loop starting at line 80 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 84 \n  A loop starting at line 84 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 91 \n  A loop starting at line 91 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 91 \n  A loop starting at line 91 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 128 \n  A loop starting at line 128 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 164 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8165299600223079
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41572738700779155,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_if.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A loop starting at line 28 was fused with the loop starting at line 26.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A statement was replaced by a library call.\n\n\nftn-6823 ftn: THREAD TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was multi-threaded.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 64 \n  A region starting at line 64 and ending at line 66 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 78 \n  A loop starting at line 78 was fused with the loop starting at line 77.\n\n\nftn-6823 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was multi-threaded.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 117 \n  A region starting at line 117 and ending at line 119 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 130 \n  A loop starting at line 130 was fused with the loop starting at line 129.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 132 \n  A region starting at line 132 and ending at line 137 was placed on the accelerator.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 171 \n  A loop starting at line 171 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0084 seconds\nCray Fortran : 234 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/14.0.3/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_33120/parallel_if_1.o: in function `test1_':\nThe Cpu Module:(.text+0x44e): undefined reference to `_cray$mt_execute_parallel'\n/opt/cray/pe/cce/14.0.3/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_33120/parallel_if_1.o: in function `test2_':\nThe Cpu Module:(.text+0xc77): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7671728080022149
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 64 \n  A region starting at line 64 and ending at line 66 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 78 \n  A loop starting at line 78 was fused with the loop starting at line 77.\n\n\nftn-6823 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was multi-threaded.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 117 \n  A region starting at line 117 and ending at line 119 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 130 \n  A loop starting at line 130 was fused with the loop starting at line 129.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 132 \n  A region starting at line 132 and ending at line 137 was placed on the accelerator.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 225 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/14.0.3/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_33163/parallel_if_1.o: in function `test2_':\nThe Cpu Module:(.text+0x5f7): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7662613180000335
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F902 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A loop starting at line 28 was fused with the loop starting at line 26.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A statement was replaced by a library call.\n\n\nftn-6823 ftn: THREAD TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was multi-threaded.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 117 \n  A region starting at line 117 and ending at line 119 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 130 \n  A loop starting at line 130 was fused with the loop starting at line 129.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 132 \n  A region starting at line 132 and ending at line 137 was placed on the accelerator.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 171 \n  A loop starting at line 171 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 225 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/14.0.3/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_33206/parallel_if_1.o: in function `test1_':\nThe Cpu Module:(.text+0x44e): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7160802540020086
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F903 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 64 \n  A region starting at line 64 and ending at line 66 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 78 \n  A loop starting at line 78 was fused with the loop starting at line 77.\n\n\nftn-6823 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was multi-threaded.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 117 \n  A region starting at line 117 and ending at line 119 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 130 \n  A loop starting at line 130 was fused with the loop starting at line 129.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 132 \n  A region starting at line 132 and ending at line 137 was placed on the accelerator.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0070 seconds\nCray Fortran : 225 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/14.0.3/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_33249/parallel_if_1.o: in function `test2_':\nThe Cpu Module:(.text+0x5f7): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.8164246969972737
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F904 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A loop starting at line 28 was fused with the loop starting at line 26.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A statement was replaced by a library call.\n\n\nftn-6823 ftn: THREAD TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was multi-threaded.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 64 \n  A region starting at line 64 and ending at line 66 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 78 \n  A loop starting at line 78 was fused with the loop starting at line 77.\n\n\nftn-6823 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was multi-threaded.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 171 \n  A loop starting at line 171 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 225 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/14.0.3/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_33292/parallel_if_1.o: in function `test1_':\nThe Cpu Module:(.text+0x44e): undefined reference to `_cray$mt_execute_parallel'\n/opt/cray/pe/cce/14.0.3/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_33292/parallel_if_1.o: in function `test2_':\nThe Cpu Module:(.text+0xc77): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.715997293998953
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F905 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 64 \n  A region starting at line 64 and ending at line 66 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 78 \n  A loop starting at line 78 was fused with the loop starting at line 77.\n\n\nftn-6823 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was multi-threaded.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 117 \n  A region starting at line 117 and ending at line 119 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 130 \n  A loop starting at line 130 was fused with the loop starting at line 129.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 132 \n  A region starting at line 132 and ending at line 137 was placed on the accelerator.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0069 seconds\nCray Fortran : 225 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/14.0.3/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_33335/parallel_if_1.o: in function `test2_':\nThe Cpu Module:(.text+0x5f7): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7159304849919863
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F906 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A loop starting at line 28 was fused with the loop starting at line 26.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A statement was replaced by a library call.\n\n\nftn-6823 ftn: THREAD TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was multi-threaded.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 117 \n  A region starting at line 117 and ending at line 119 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 130 \n  A loop starting at line 130 was fused with the loop starting at line 129.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 132 \n  A region starting at line 132 and ending at line 137 was placed on the accelerator.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 171 \n  A loop starting at line 171 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 225 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/14.0.3/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_33378/parallel_if_1.o: in function `test1_':\nThe Cpu Module:(.text+0x44e): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7162781560327858
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F907 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 64 \n  A region starting at line 64 and ending at line 66 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 78 \n  A loop starting at line 78 was fused with the loop starting at line 77.\n\n\nftn-6823 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was multi-threaded.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 117 \n  A region starting at line 117 and ending at line 119 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 130 \n  A loop starting at line 130 was fused with the loop starting at line 129.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 132 \n  A region starting at line 132 and ending at line 137 was placed on the accelerator.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_if.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 225 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/14.0.3/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_33422/parallel_if_1.o: in function `test2_':\nThe Cpu Module:(.text+0x5f7): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.7163332919590175
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop.F90/parallel_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 11 \n  A loop starting at line 11 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 18 \n  A data region was created at line 18 and ending at line 23.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 18 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 23 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 19 \n  A region starting at line 19 and ending at line 22 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 19 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 22 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 20 \n  A loop starting at line 20 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 25 \n  A loop starting at line 25 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 25 \n  A loop starting at line 25 was vectorized.\n\n\nftn-6202 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 48 \n  A loop starting at line 48 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 58 \n  A data region was created at line 58 and ending at line 69.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 58 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 69 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 58 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 69 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 58 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 69 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 59 \n  A region starting at line 59 and ending at line 68 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 59 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 68 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 59 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 68 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 59 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 68 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 61 \n  A loop starting at line 61 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 71 \n  A loop starting at line 71 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 71 \n  A loop starting at line 71 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 99 \n  A loop starting at line 99 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop.F90, Line = 108 \n  A loop starting at line 108 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7172261069645174
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42991644999710843,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_async.F90/parallel_loop_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-802 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_async.F90, Line = 30, Column = 66 \n  Variable subobjects are not allowed as arguments for this clause or directive.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 91 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.26616201404249296
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_async.F90/parallel_loop_async.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5156939510488883
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.065293870982714,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_auto.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_auto.F90/parallel_loop_auto.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 18.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 22 \n  A data region was created at line 22 and ending at line 27.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 27 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 23 \n  A region starting at line 23 and ending at line 26 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 23 \n  Variable \"x\" is used before it is defined.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 29 \n  A loop starting at line 29 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 29 \n  A loop starting at line 29 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 35 \n  A data region was created at line 35 and ending at line 40.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 40 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 36 \n  A region starting at line 36 and ending at line 39 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 37 \n  A loop starting at line 37 was unrolled 4 times.\n\n\nftn-6412 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 37 \n  A loop starting at line 37 will be redundantly executed.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 43 \n  A loop starting at line 43 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 69 \n  A loop starting at line 69 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 96 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8171354799997061
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.45321207103552297,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_gang.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_gang.F90/parallel_loop_gang.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 21 \n  A data region was created at line 21 and ending at line 26.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 22 \n  A region starting at line 22 and ending at line 25 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 53 \n  A loop starting at line 53 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6667252850020304
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.428252607001923,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_general.F90/parallel_loop_reduction_add_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 21 \n  A data region was created at line 21 and ending at line 26.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 21 \n  If not already present: allocate memory and copy variable \"total\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 22 \n  A region starting at line 22 and ending at line 25 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 22 \n  If not already present: allocate memory and copy variable \"total\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 27 \n  A loop starting at line 27 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 27 \n  A loop starting at line 27 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 54 \n  A loop starting at line 54 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.717000951000955
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43401482596527785,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_loop.F90/parallel_loop_reduction_add_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 21 \n  A data region was created at line 21 and ending at line 36.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, free at line 36 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"d\" on accelerator, copy back at line 36 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 22 \n  A region starting at line 22 and ending at line 35 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 39 \n  A loop starting at line 39 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 39 \n  A loop starting at line 39 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 43 \n  A loop starting at line 43 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 69 \n  A loop starting at line 69 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 96 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7172293830080889
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.447509327030275,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.F90/parallel_loop_reduction_add_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 22 \n  A data region was created at line 22 and ending at line 32.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 32 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 23 \n  A region starting at line 23 and ending at line 31 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7167739929864183
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43226232094457373,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_general.F90/parallel_loop_reduction_and_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 30 \n  A data region was created at line 30 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 30 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 31 \n  A region starting at line 31 and ending at line 34 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 31 \n  If not already present: allocate memory and copy variable \"results\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7193171260296367
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4333673840155825,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_loop.F90/parallel_loop_reduction_and_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 22 \n  A loop starting at line 22 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 37 \n  A data region was created at line 37 and ending at line 57.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"results\" to accelerator, copy back at line 57 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 57 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 38 \n  A region starting at line 38 and ending at line 56 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"results\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 39 \n  A loop starting at line 39 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 42 \n  A loop starting at line 42 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 47 \n  A loop starting at line 47 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 60 \n  A loop starting at line 60 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 66 \n  A loop starting at line 66 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 66 \n  A loop starting at line 66 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7164274230017327
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4290879699983634,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.F90/parallel_loop_reduction_and_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 40 \n  A data region was created at line 40 and ending at line 50.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 40 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 50 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 40 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 50 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 41 \n  A region starting at line 41 and ending at line 49 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 41 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 49 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 41 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 49 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 42 \n  A loop starting at line 42 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 45 \n  A loop starting at line 45 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 54 \n  A loop starting at line 54 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 83 \n  A loop starting at line 83 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 110 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7172572669805959
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4621575270430185,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_general.F90/parallel_loop_reduction_bitand_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 23 \n  A loop starting at line 23 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 24 \n  A loop starting at line 24 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 24 \n  A loop starting at line 24 was vectorized as part of the loop starting at line 23.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 27 \n  A loop starting at line 27 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 37 \n  A data region was created at line 37 and ending at line 42.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 38 \n  A region starting at line 38 and ending at line 41 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 38 \n  If not already present: allocate memory and copy variable \"b\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 41 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 39 \n  A loop starting at line 39 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7171573640080169
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4296741640428081,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.F90/parallel_loop_reduction_bitand_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 23 \n  A loop starting at line 23 was partially vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 27 \n  A loop starting at line 27 was fused with the loop starting at line 23.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 28 \n  A loop starting at line 28 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 28 \n  A loop starting at line 28 was vectorized as part of the loop starting at line 23.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 31 \n  A loop starting at line 31 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 34 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 39 \n  A loop starting at line 39 was unwound.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 45 \n  A data region was created at line 45 and ending at line 59.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 45 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 59 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 45 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 59 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 45 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 59 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 46 \n  A region starting at line 46 and ending at line 58 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 46 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 58 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 46 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 58 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 46 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 58 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 47 \n  A loop starting at line 47 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 50 \n  A loop starting at line 50 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 55 \n  A loop starting at line 55 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 63 \n  A loop starting at line 63 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 63 \n  A loop starting at line 63 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 69 \n  A loop starting at line 69 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 69 \n  A loop starting at line 69 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 95 \n  A loop starting at line 95 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 122 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7668716560001485
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4264931089710444,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.F90/parallel_loop_reduction_bitand_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was collapsed into the loop starting at line 25.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was partially vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 26 \n  A loop starting at line 26 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 26 \n  A loop starting at line 26 was vectorized as part of the loop starting at line 25.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 29 \n  A loop starting at line 29 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 32 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 38 \n  A data region was created at line 38 and ending at line 48.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 38 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 48 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 38 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 48 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 39 \n  A region starting at line 39 and ending at line 47 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 39 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 39 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 47 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 43 \n  A loop starting at line 43 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 52 \n  A loop starting at line 52 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 52 \n  A loop starting at line 52 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 79 \n  A loop starting at line 79 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 106 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170884909573942
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42900935700163245,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_general.F90/parallel_loop_reduction_bitor_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 23 \n  A loop starting at line 23 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 24 \n  A loop starting at line 24 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 24 \n  A loop starting at line 24 was vectorized as part of the loop starting at line 23.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 27 \n  A loop starting at line 27 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 35 \n  A data region was created at line 35 and ending at line 40.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 40 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 36 \n  A region starting at line 36 and ending at line 39 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 36 \n  If not already present: allocate memory and copy variable \"b\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 37 \n  A loop starting at line 37 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 42 \n  A loop starting at line 42 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 42 \n  A loop starting at line 42 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 68 \n  A loop starting at line 68 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 1.367703691998031
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4399333050241694,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.F90/parallel_loop_reduction_bitor_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 23.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 27 \n  A loop starting at line 27 was collapsed into the loop starting at line 28.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 28 \n  A loop starting at line 28 was partially vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 29 \n  A loop starting at line 29 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 29 \n  A loop starting at line 29 was vectorized as part of the loop starting at line 28.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 32 \n  A loop starting at line 32 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 35 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 41 \n  A data region was created at line 41 and ending at line 55.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 41 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 41 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 41 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 55 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 42 \n  A region starting at line 42 and ending at line 54 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 42 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 54 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 42 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 54 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 42 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 54 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 43 \n  A loop starting at line 43 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 46 \n  A loop starting at line 46 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 51 \n  A loop starting at line 51 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 59 \n  A loop starting at line 59 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 59 \n  A loop starting at line 59 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 65 \n  A loop starting at line 65 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 65 \n  A loop starting at line 65 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 118 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9669961929903366
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.430649806978181,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.F90/parallel_loop_reduction_bitor_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was interchanged with the loop starting at line 24.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was vectorized.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 27 \n  A loop starting at line 27 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 35 \n  A data region was created at line 35 and ending at line 45.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 36 \n  A region starting at line 36 and ending at line 44 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 49 \n  A loop starting at line 49 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 49 \n  A loop starting at line 49 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 76 \n  A loop starting at line 76 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170280640129931
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4346006769919768,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.F90/parallel_loop_reduction_bitxor_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 23 \n  A data region was created at line 23 and ending at line 28.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 24 \n  A region starting at line 24 and ending at line 27 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 24 \n  If not already present: allocate memory and copy variable \"b\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 30 \n  A loop starting at line 30 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 56 \n  A loop starting at line 56 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7168192020035349
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46140168694546446,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.F90/parallel_loop_reduction_bitxor_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 23.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 26 \n  A loop starting at line 26 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 28 \n  A data region was created at line 28 and ending at line 42.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 29 \n  A region starting at line 29 and ending at line 41 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 41 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 46 \n  A loop starting at line 46 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 52 \n  A loop starting at line 52 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 52 \n  A loop starting at line 52 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7167036369792186
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4319160219747573,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.F90/parallel_loop_reduction_bitxor_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 64 \n  A loop starting at line 64 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 91 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.666635570989456
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4312175529776141,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_general.F90/parallel_loop_reduction_max_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 23 \n  A data region was created at line 23 and ending at line 28.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 24 \n  A region starting at line 24 and ending at line 27 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 24 \n  If not already present: allocate memory and copy variable \"maximum\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 30 \n  A loop starting at line 30 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 56 \n  A loop starting at line 56 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7675164820393547
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4272473360178992,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_loop.F90/parallel_loop_reduction_max_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 37.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 37 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 24 \n  A region starting at line 24 and ending at line 36 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"maximum\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 40 \n  A loop starting at line 40 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 68 \n  A loop starting at line 68 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7170427429955453
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43189241498475894,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.F90/parallel_loop_reduction_max_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6373 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 21 \n  A loop starting at line 21 with a trip count of 10 was unwound into 2 vector iterations.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"maximum\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"maximum\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 64 \n  A loop starting at line 64 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 91 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7173289239872247
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4285925940494053,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_general.F90/parallel_loop_reduction_min_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 22 \n  A data region was created at line 22 and ending at line 27.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 23 \n  A region starting at line 23 and ending at line 26 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 23 \n  If not already present: allocate memory and copy variable \"minimum\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 29 \n  A loop starting at line 29 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 29 \n  A loop starting at line 29 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7663734540110454
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4580705540138297,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_loop.F90/parallel_loop_reduction_min_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 25 \n  A data region was created at line 25 and ending at line 39.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"minimum\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 26 \n  A region starting at line 26 and ending at line 38 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"minimum\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 35 \n  A loop starting at line 35 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 43 \n  A loop starting at line 43 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 49 \n  A loop starting at line 49 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 49 \n  A loop starting at line 49 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 75 \n  A loop starting at line 75 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7162857200019062
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4541547810076736,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.F90/parallel_loop_reduction_min_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 22 \n  A data region was created at line 22 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"minimum\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 23 \n  A region starting at line 23 and ending at line 31 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"minimum\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7169688809663057
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4418615800095722,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_general.F90/parallel_loop_reduction_multiply_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 24 \n  A data region was created at line 24 and ending at line 29.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 25 \n  A region starting at line 25 and ending at line 28 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 25 \n  If not already present: allocate memory and copy variable \"multiplied_total\" to accelerator, copy back at line 28 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 31 \n  A loop starting at line 31 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 31 \n  A loop starting at line 31 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 59 \n  A loop starting at line 59 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 86 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 1.2689964909804985
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4313895759987645,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.F90/parallel_loop_reduction_multiply_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 25 \n  A data region was created at line 25 and ending at line 39.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 26 \n  A region starting at line 26 and ending at line 38 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 35 \n  A loop starting at line 35 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 43 \n  A loop starting at line 43 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 81 \n  A loop starting at line 81 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 108 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 1.0667950930073857
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46624027198413387,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.F90/parallel_loop_reduction_multiply_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  A data region was created at line 24 and ending at line 34.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 34 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  A region starting at line 25 and ending at line 33 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 38 \n  A loop starting at line 38 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 38 \n  A loop starting at line 38 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 65 \n  A loop starting at line 65 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 92 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8674142520176247
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4675530929816887,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_general.F90/parallel_loop_reduction_or_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 30 \n  A data region was created at line 30 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 30 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 31 \n  A region starting at line 31 and ending at line 34 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 31 \n  If not already present: allocate memory and copy variable \"results\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9172610699897632
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42505421297391877,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_loop.F90/parallel_loop_reduction_or_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 36 \n  A data region was created at line 36 and ending at line 56.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"results\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 37 \n  A region starting at line 37 and ending at line 55 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"results\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 41 \n  A loop starting at line 41 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 46 \n  A loop starting at line 46 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 60 \n  A loop starting at line 60 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 66 \n  A loop starting at line 66 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 66 \n  A loop starting at line 66 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9172962100128643
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43253429397009313,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_vector_loop.F90/parallel_loop_reduction_or_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 31 \n  A data region was created at line 31 and ending at line 41.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 31 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 31 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 41 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 32 \n  A region starting at line 32 and ending at line 40 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 40 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 40 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 72 \n  A loop starting at line 72 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 99 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7669872510014102
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43059340299805626,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_seq.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_seq.F90/parallel_loop_seq.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 24 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 24 (acc_copy).\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 21 \n  Variable \"x\" is used before it is defined.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 22 \n  A loop starting at line 22 was eliminated by optimization.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 27 \n  A loop starting at line 27 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 27 \n  A loop starting at line 27 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 52 \n  A loop starting at line 52 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 79 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.666229906026274
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.0652845689910464,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_tile.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_tile.F90/parallel_loop_tile.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_tile.F90",
                    "config": 1,
                    "errors": "\n\nftn-1342 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_tile.F90, Line = 28, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\n\nftn-1342 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_tile.F90, Line = 31, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 94 source lines\nCray Fortran : 2 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36573925701668486
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_tile.F90/parallel_loop_tile.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_tile.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5660773069830611
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06569954100996256,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_vector.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_vector.F90/parallel_loop_vector.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 21 \n  A data region was created at line 21 and ending at line 26.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 22 \n  A region starting at line 22 and ending at line 25 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 53 \n  A loop starting at line 53 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7679476570338011
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.44483736396068707,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_vector_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_vector_blocking.F90/parallel_loop_vector_blocking.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 22 \n  A data region was created at line 22 and ending at line 34.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 34 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 23 \n  A region starting at line 23 and ending at line 33 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.717060326016508
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42951649299357086,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_worker.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_worker.F90/parallel_loop_worker.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 21 \n  A data region was created at line 21 and ending at line 26.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 26 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 22 \n  A region starting at line 22 and ending at line 25 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 53 \n  A loop starting at line 53 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.666475790028926
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4301376930088736,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_worker_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_loop_worker_blocking.F90/parallel_loop_worker_blocking.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 21 \n  A data region was created at line 21 and ending at line 33.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 33 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 22 \n  A region starting at line 22 and ending at line 32 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 60 \n  A loop starting at line 60 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 87 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6670684449491091
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43068761500762776,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_present.F90/parallel_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_present.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_present.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_present.F90, Line = 22 \n  A region starting at line 22 and ending at line 27 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_present.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_present.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_present.F90, Line = 30 \n  A loop starting at line 30 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_present.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_present.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6669603759655729
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4251281540491618,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_private.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_private.F90/parallel_private.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90",
                    "config": 1,
                    "errors": "\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 22 \n  A loop starting at line 22 was replaced by a library call.\n\n\nftn-6373 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 23 \n  A loop starting at line 23 with a trip count of 10 was unwound into 2 vector iterations.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 23 \n  A loop starting at line 23 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 26 \n  A region starting at line 26 and ending at line 38 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6423 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 26 \n  Private array \"c\" was allocated to global memory.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 26 \n  Variable \"y\" is used before it is defined.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 34 \n  A loop starting at line 34 was unrolled 4 times.\n\n\nftn-6412 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 34 \n  A loop starting at line 34 will be redundantly executed.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 43 \n  A loop starting at line 43 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_private.F90, Line = 70 \n  A loop starting at line 70 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 97 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8669638910214417
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43490222905529663,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_reduction.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_reduction.F90/parallel_reduction.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90, Line = 20 \n  A data region was created at line 20 and ending at line 27.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90, Line = 21 \n  A region starting at line 21 and ending at line 26 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90, Line = 21 \n  If not already present: allocate memory and copy variable \"results\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90, Line = 28 \n  A loop starting at line 28 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90, Line = 54 \n  A loop starting at line 54 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9168519400409423
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4321644900483079,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_scalar_default_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_scalar_default_firstprivate.F90/parallel_scalar_default_firstprivate.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90",
                    "config": 1,
                    "errors": "\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 20 \n  A loop starting at line 20 was unwound.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 23.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 24 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 26 \n  A data region was created at line 26 and ending at line 33.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 26 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 26 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 33 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 27 \n  A region starting at line 27 and ending at line 32 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7272111100028269
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43661379598779604,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_switch.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_switch.F90/parallel_switch.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_switch.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_switch.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_switch.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_switch.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_switch.F90, Line = 24 \n  A region starting at line 24 and ending at line 36 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_switch.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_switch.F90, Line = 75 \n  A loop starting at line 75 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7666912999702618
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.43990954401670024,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_wait.F90/parallel_wait.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_wait.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_wait.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_wait.F90, Line = 22 \n  A region starting at line 22 and ending at line 27 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_wait.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 256 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_wait.F90, Line = 30 \n  A loop starting at line 30 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_wait.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_wait.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7670719460002147
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.42976363096386194,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_while_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/parallel_while_loop.F90/parallel_while_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 20 \n  A data region was created at line 20 and ending at line 38.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 21 \n  A region starting at line 21 and ending at line 37 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 37 (acc_copy).\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 21 \n  Variable \"avg\" is used before it is defined.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the thread blocks.\n\n\nftn-6412 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 25 \n  A loop starting at line 25 will be redundantly executed.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the 256 threads within a threadblock.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 42 \n  A loop starting at line 42 was partially vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 69 \n  A loop starting at line 69 was unwound.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 96 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.8166382440249436
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4683774079894647,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial.F90/serial.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5675977549981326
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06628542201360688,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_async.F90/serial_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.616302575042937
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033417527040001005,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_copy.F90/serial_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_copy.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6168489789706655
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03304141096305102,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_copyin.F90/serial_copyin.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_copyin.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7163727959850803
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03286170499632135,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_copyout.F90/serial_copyout.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_copyout.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6662154090008698
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03292371396673843,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_create.F90/serial_create.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_create.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7185272460337728
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03323793999152258,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_default_copy.F90/serial_default_copy.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_default_copy.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5738506389898248
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03349005797645077,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_default_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_default_present.F90/serial_default_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_default_present.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165174740250222
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03335539798717946,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_firstprivate.F90/serial_firstprivate.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_firstprivate.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166696489905007
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03347493801265955,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_if.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_if.F90/serial_if.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_if.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5160322280135006
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06492154998704791,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop.F90/serial_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5168657369795255
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033517390955239534,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_async.F90/serial_loop_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165491169900633
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03284921997692436,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_auto.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_auto.F90/serial_loop_auto.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_auto.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5664006409933791
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06492779200198129,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_gang.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_gang.F90/serial_loop_gang.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_gang.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516146668989677
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03291387500939891,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_add_general.F90/serial_loop_reduction_add_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5163215560023673
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03289552900241688,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_add_loop.F90/serial_loop_reduction_add_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162025060271844
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.032988549035508186,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_add_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_add_vector_loop.F90/serial_loop_reduction_add_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5161611170042306
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03286454902263358,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_and_general.F90/serial_loop_reduction_and_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165487159974873
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033416224003303796,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_and_loop.F90/serial_loop_reduction_and_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165171640110202
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03282439295435324,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_and_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_and_vector_loop.F90/serial_loop_reduction_and_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516262310964521
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03320600901497528,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitand_general.F90/serial_loop_reduction_bitand_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6666573019465432
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03284555196296424,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitand_loop.F90/serial_loop_reduction_bitand_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.666202113032341
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06664067000383511,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitand_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitand_vector_loop.F90/serial_loop_reduction_bitand_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7267404980375431
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03356874897144735,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitor_general.F90/serial_loop_reduction_bitor_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6164904470206238
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03306338400579989,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitor_loop.F90/serial_loop_reduction_bitor_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6171425870270468
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033259993011597544,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitor_vector_loop.F90/serial_loop_reduction_bitor_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5667760069482028
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.032895067997742444,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitxor_general.F90/serial_loop_reduction_bitxor_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5660208680201322
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.0331718529923819,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitxor_loop.F90/serial_loop_reduction_bitxor_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5661270020063967
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03338128799805418,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_bitxor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_bitxor_vector_loop.F90/serial_loop_reduction_bitxor_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6663109240471385
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06550160999177024,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_max_general.F90/serial_loop_reduction_max_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.566284237022046
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03285462997155264,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_max_loop.F90/serial_loop_reduction_max_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.566592502000276
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.032873286050744355,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_max_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_max_vector_loop.F90/serial_loop_reduction_max_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5666734979604371
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06559009198099375,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_min_general.F90/serial_loop_reduction_min_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6171372070093639
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03345593099948019,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_min_loop.F90/serial_loop_reduction_min_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6162472969735973
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03326641698367894,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_min_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_min_vector_loop.F90/serial_loop_reduction_min_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6669018050306477
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03323042602278292,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_multiply_general.F90/serial_loop_reduction_multiply_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6662102190311998
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.032927019987255335,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_multiply_loop.F90/serial_loop_reduction_multiply_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.566831182979513
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06576287397183478,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_multiply_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_multiply_vector_loop.F90/serial_loop_reduction_multiply_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6791247200453654
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.032899398007430136,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_or_general.F90/serial_loop_reduction_or_general.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5663664659950882
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03351229999680072,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_or_loop.F90/serial_loop_reduction_or_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5668129870318808
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033216007985174656,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_reduction_or_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_reduction_or_vector_loop.F90/serial_loop_reduction_or_vector_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166209440212697
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03344063297845423,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_seq.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_seq.F90/serial_loop_seq.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_seq.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5660328920348547
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033245304017327726,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_tile.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_tile.F90/serial_loop_tile.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_tile.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166725239832886
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033540364005602896,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_vector.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_vector.F90/serial_loop_vector.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_vector.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166936740279198
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03362336603458971,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_vector_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_vector_blocking.F90/serial_loop_vector_blocking.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.517055113974493
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03336538700386882,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_worker.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_worker.F90/serial_loop_worker.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_worker.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164631200022995
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03295139694819227,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_loop_worker_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_loop_worker_blocking.F90/serial_loop_worker_blocking.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5161911839968525
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03297261899570003,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_present.F90/serial_present.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_present.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5159819609834813
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03287809604080394,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_private.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_private.F90/serial_private.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_private.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164218300487846
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033502642007078975,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_reduction.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_reduction.F90/serial_reduction.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_reduction.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5163287900504656
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033134600962512195,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_scalar_default_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_scalar_default_firstprivate.F90/serial_scalar_default_firstprivate.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_scalar_default_firstprivate.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5160921129863709
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03288177400827408,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_switch.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_switch.F90/serial_switch.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_switch.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7166623140219599
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06498447095509619,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_wait.F90/serial_wait.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_wait.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.9165584940346889
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06525195698486641,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "serial_while_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/serial_while_loop.F90/serial_while_loop.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/serial_while_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 1.0174634360009804
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06524858099874109,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_default_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/set_default_async.F90/set_default_async.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_default_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6164759199600667
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06679210200672969,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/set_device_num.F90/set_device_num.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_num.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5665629650466144
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03294363198801875,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/set_device_type.F90/set_device_type.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_type.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7168695449945517
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03295160800917074,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "set_device_type_nvidia.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/set_device_type_nvidia.F90/set_device_type_nvidia.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/set_device_type_nvidia.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6719233919866383
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06532081199111417,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/shutdown.F90/shutdown.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6162448829854839
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.032907553017139435,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/shutdown_device_num.F90/shutdown_device_num.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_num.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6168526170076802
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033084934984799474,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/shutdown_device_type.F90/shutdown_device_type.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_type.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5740757639869116
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.033051341015379876,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/shutdown_device_type_num.F90/shutdown_device_type_num.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7164050079882145
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.03292540699476376,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type_num_nvidia.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/shutdown_device_type_num_nvidia.F90/shutdown_device_type_num_nvidia.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_type_num_nvidia.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6166517079691403
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06551226100418717,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "shutdown_device_type_nvidia.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/shutdown_device_type_nvidia.F90/shutdown_device_type_nvidia.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/shutdown_device_type_nvidia.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6667255230131559
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.032931810012087226,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "template.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/template.F90/template.F900 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/template.F90",
                    "config": 1,
                    "errors": "\n\nftn-1403 ftn: ERROR TEST1, File = ../../../autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/template.F90, Line = 25, Column = 17 \n  OpenMP or OpenACC construct PARALLEL should have a structured block between the directive and the END directive.\n\nCray Fortran : Version 14.0.3 (20220818062825_80f97ce63a7725610a864116e454efffd075b025)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 79 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.41649438499007374
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/build/template.F90/template.F901 /autofs/nccs-svm1_home1/jarmusch/OpenACCV-V/Tests/template.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6157965580350719
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.06565029703779146,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ]
    },
    "summary": {
        "1": {
            "1": {
                "1": {
                    "acc_async_test.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_async_test_all.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyin.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "5": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "7": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyin_async.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "4": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "5": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyin_async_with_len.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "4": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "5": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyin_with_len.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "5": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "7": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyout.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "4": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "5": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyout_async.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyout_async_with_len.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyout_finalize.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyout_finalize_async.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyout_finalize_async_with_len.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyout_finalize_with_len.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyout_with_len.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 5
                        }
                    },
                    "acc_create_async.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_create_async_with_len.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_create_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "acc_delete.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_delete_async.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_delete_async_with_len.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_delete_finalize.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_delete_finalize_async.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_delete_finalize_async_with_len.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_delete_finalize_with_len.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_delete_with_len.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_get_default_async.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_get_device_num.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_num_devices.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_get_property.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_get_property_string.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_init.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_is_present.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_is_present_with_len.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_on_device.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_default_async.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_set_device_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_type.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_shutdown.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "acc_update_device.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_update_device_async.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_update_device_async_with_len.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_update_device_with_len.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_update_self.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_update_self_async.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_update_self_async_with_len.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_update_self_with_len.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_wait.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all_async.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_wait_async.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_and_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_divided_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_eqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_minus_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_neqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_or_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_plus_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_times_x.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_iand_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_iand_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ior_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ior_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ixor_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ixor_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_and_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_divided_expr.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_eqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_minus_expr.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_neqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_or_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_plus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_times_expr.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_and_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_divided_x_assign.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_eqv_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_minus_x_assign.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_neqv_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_or_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_plus_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_times_x_assign.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_iand_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_iand_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ior_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ior_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ixor_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ixor_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_expr_list_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_x_expr_list_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_expr_list_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_x_expr_list_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_and_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_divided_expr_assign.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_eqv_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_minus_expr_assign.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_neqv_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_or_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_plus_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_times_expr_assign.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_and_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_and_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_divided_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_divided_x_end.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_eqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_eqv_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_minus_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_minus_x_end.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_neqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_neqv_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_or_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_or_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_plus_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_plus_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_times_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_times_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_list_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_list_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_list_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_list_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_and_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_and_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_divided_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_divided_x_end.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_eqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_eqv_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_minus_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_minus_x_end.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_neqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_neqv_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_or_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_or_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_plus_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_plus_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_times_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_times_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_list_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_list_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_list_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_list_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_and_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_and_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_divided_expr.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_divided_expr_end.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_eqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_eqv_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_minus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_minus_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_neqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_neqv_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_or_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_or_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_plus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_plus_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_times_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_times_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_and_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_and_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_divided_expr.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_divided_expr_end.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_eqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_eqv_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_minus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_minus_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_neqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_neqv_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_or_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_or_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_plus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_plus_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_times_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_times_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copy_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyin_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyout_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyout_reference_counts.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 4
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 4
                        },
                        "3": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        }
                    },
                    "data_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_create_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_present_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_with_changing_subscript.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_with_derived_type.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "declare_copyin.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_create.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_copy.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_copyin.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_copyout.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_create.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "enter_data_copyin_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_data_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_data_create_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_data_if.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 6
                        },
                        "2": {
                            "result": "Runtime Error",
                            "run_index": 6
                        },
                        "3": {
                            "result": "Runtime Error",
                            "run_index": 6
                        },
                        "4": {
                            "result": "Runtime Error",
                            "run_index": 6
                        },
                        "5": {
                            "result": "Runtime Error",
                            "run_index": 6
                        }
                    },
                    "exit_data.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_copyout_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_copyout_reference_counts.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Runtime Error",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Runtime Error",
                            "run_index": 7
                        }
                    },
                    "exit_data_delete_no_lower_bound.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 1
                        }
                    },
                    "exit_data_finalize.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "init.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "init_device_num.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "init_device_type.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "init_device_type_num.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "init_device_type_num_nvidia.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "init_device_type_nvidia.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "kernels_async.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_copyin.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_copyout.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_default_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_default_present.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "kernels_if.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Runtime Error",
                            "run_index": 5
                        },
                        "3": {
                            "result": "Runtime Error",
                            "run_index": 5
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "kernels_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_independent.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_seq.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_tile.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_vector_blocking.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_worker_blocking.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_num_gangs.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "kernels_num_workers.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "kernels_present.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_scalar_default_copy.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "kernels_vector_length.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "kernels_wait.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "loop_collapse.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "loop_no_collapse.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_async.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_copyin.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_copyout.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_default_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_default_present.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "parallel_firstprivate.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_if.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "parallel_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_auto.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_gang.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_seq.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_tile.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector_blocking.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker_blocking.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_present.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_private.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_reduction.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_scalar_default_firstprivate.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_switch.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_wait.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_while_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "serial.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_async.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_copy.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_copyin.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_copyout.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_create.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_default_copy.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_default_present.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_firstprivate.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_if.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_async.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_auto.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_gang.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_add_general.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_add_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_add_vector_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_and_general.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_and_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_and_vector_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_bitand_general.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_bitand_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_bitand_vector_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_bitor_general.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_bitor_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_bitor_vector_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_bitxor_general.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_bitxor_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_bitxor_vector_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_max_general.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_max_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_max_vector_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_min_general.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_min_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_min_vector_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_multiply_general.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_multiply_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_multiply_vector_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_or_general.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_or_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_reduction_or_vector_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_seq.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_tile.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_vector.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_vector_blocking.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_worker.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_loop_worker_blocking.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_present.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_private.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_reduction.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_scalar_default_firstprivate.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_switch.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_wait.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "serial_while_loop.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "set_default_async.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "set_device_num.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "set_device_type.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "set_device_type_nvidia.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "shutdown.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "shutdown_device_num.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "shutdown_device_type.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "shutdown_device_type_num.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "shutdown_device_type_num_nvidia.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "shutdown_device_type_nvidia.F90": {
                        "1": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "template.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    }
                }
            }
        }
    },
    "systems": [
        {
            "id": 1,
            "machine": "x86_64",
            "name": null,
            "node": "crusher191",
            "processor": "x86_64",
            "release": "5.3.18-150300.59.87_11.0.78-cray_shasta_c",
            "version": "#1 SMP Wed Aug 3 17:23:33 UTC 2022 (c16132b)"
        }
    ],
    "testsuites": [
        {
            "acc_async_test.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n        \n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT)) async(1)\n        !$acc enter data copyin(d(1:LOOPCOUNT)) create(e(1:LOOPCOUNT)) async(2)\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1) wait(2)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            e(x) = c(x) + d(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(e(1:LOOPCOUNT)) async(1)\n\n\n        DO WHILE (acc_async_test(1) .eqv. .FALSE.)\n          CONTINUE\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .GT. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:async,runtime,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e\n        INTEGER :: errors\n        errors = 0\n        \n        !Initialization\n        CALL RANDOM_SEED()\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n          DO WHILE (acc_async_test(1) .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .GT. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e\n        INTEGER :: errors, async_val\n        INTEGER :: acc_get_default_async\n        async_val = acc_get_default_async()\n        errors = 0\n\n        !Initialization\n        CALL RANDOM_SEED()\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n          DO WHILE (acc_async_test(async_val) .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_async_test_all.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc enter data create(a(1:LOOPCOUNT,1:10), b(1:LOOPCOUNT,1:10), c(1:LOOPCOUNT,1:10), d(1:LOOPCOUNT,1:10), e(1:LOOPCOUNT,1:10))\n        DO y = 1, 10\n          !$acc update device(a(1:LOOPCOUNT,y:y), b(1:LOOPCOUNT,y:y), d(1:LOOPCOUNT,y:y)) async(y)\n          !$acc parallel present(a(1:LOOPCOUNT,y:y), b(1:LOOPCOUNT,y:y), c(1:LOOPCOUNT,y:y)) async(y)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x, y) = a(x, y) + b(x, y)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT,y:y), d(1:LOOPCOUNT,y:y),e(1:LOOPCOUNT,y:y)) async(y)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x, y) = c(x, y) + d(x, y)\n            END DO\n          !$acc end parallel\n          !$acc update host(e(1:LOOPCOUNT,y:y)) async(y)\n        END DO\n\n        DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n          CONTINUE\n        END DO\n\n        DO y = 1, 10\n          DO x = 1, LOOPCOUNT\n            IF (abs(e(x, y) - (a(x, y) + b(x, y) + d(x, y))) .GT. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:async,runtime,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT,1:10), d(1:LOOPCOUNT, 1:10)) copyout(c(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10))\n          DO x = 1, 10\n            !$acc parallel present(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10)) async(x)\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                c(y, x) = a(y, x) + b(y, x)\n              END DO\n            !$acc end parallel\n            !$acc parallel present(c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10)) async(x)\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                e(y, x) = c(y, x) + d(y, x)\n              END DO\n            !$acc end parallel\n          END DO\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, 10\n          DO y = 1, LOOPCOUNT\n            IF (abs(e(y, x) - (a(y, x) + b(y, x) + d(y, x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:async,runtime,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10)) copyout(c(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10))\n          DO x = 1, 10\n            CALL acc_set_default_async(x)\n            !$acc parallel present(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10)) async\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                c(y, x) = a(y, x) + b(y, x)\n              END DO\n            !$acc end parallel\n            !$acc parallel present(c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10)) async\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                e(y, x) = c(y, x) + d(y, x)\n              END DO\n            !$acc end parallel\n          END DO\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, 10\n          DO y = 1, LOOPCOUNT\n            IF (abs(e(y, x) - (a(y, x) + b(y, x) + d(y, x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin.F90": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 1\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(a(1:LOOPCOUNT))\n        CALL acc_copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          a_copy(:) = a(:)\n          CALL RANDOM_NUMBER(b)\n          b_copy(:) = b(:)\n          c = 0\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x) - b_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,executable-data,construct-independent,compatibility-features,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcopyin(a(1:LOOPCOUNT))\n        CALL acc_pcopyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,executable-data,construct-independent,compatibility-features,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        \n        CALL acc_present_or_copyin(a(1:LOOPCOUNT))\n        CALL acc_present_or_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n!T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test6()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test6 = .FALSE.\n        ELSE\n          test6 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T6\n        LOGICAL :: test6\n#endif\n#ifndef T6\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test6()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 5\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n!T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test7()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          !Initialization\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          a_copy = a\n          b_copy = b\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          a = 0\n          b = 0\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test7 = .FALSE.\n        ELSE\n          test7 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T7\n        LOGICAL :: test7\n#endif\n#ifndef T7\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test7()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 6\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel async(1) present(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2) present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2) wait(1) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x)*a_host(x) + b_host(x)*b_host(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyin_async(c(1:LOOPCOUNT), 1)\n          !$acc exit data delete(c(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n      LOGICAL :: test4\n#endif\n#ifndef T4\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test4()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 3\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        CALL RANDOM_NUMBER(b)\n        b_copy = b\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        a = 0\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n      LOGICAL :: test5\n#endif\n#ifndef T5\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test5()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 4\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async_with_len.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel wait(1, 2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x)*a_host(x) + b_host(x)*b_host(x))) .gt. 4*PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEn\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyin_async(c(1), LOOPCOUNT*8, 1)\n          !$acc exit data delete(c(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_with_len.F90": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc Loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(a(1:LOOPCOUNT))\n        CALL acc_copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) .eq. 1) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          a_copy = a\n          b_copy = b\n          c = 0\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          CALL acc_copyout(a(1:LOOPCOUNT))\n          CALL acc_copyout(b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x) - b_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcopyin(a(1), LOOPCOUNT*8)\n        CALL acc_pcopyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T4\n      LOGICAL :: test4\n#endif\n#ifndef T4\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test4()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 3\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_present_or_copyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T5\n      LOGICAL :: test5\n#endif\n#ifndef T5\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test5()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 4\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n!T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test6()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) + (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test6 = .FALSE.\n        ELSE\n          test6 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T6\n      LOGICAL :: test6\n#endif\n#ifndef T6\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test6()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 5\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n!T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test7()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          a_copy = a\n          b_copy = b\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          a = 0\n          b = 0\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n        IF (errors .eq. 0) THEN\n          test7 = .FALSE.\n        ELSE\n          test7 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T7\n      LOGICAL :: test7\n#endif\n#ifndef T7\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test7()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 6\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,construct-independent,devonly,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_copyout(c(1:LOOPCOUNT))\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(c(1:LOOPCOUNT))\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data create(c(1:LOOPCOUNT))\n          !$acc enter data create(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_copyout(c(1:LOOPCOUNT))\n          !$acc exit data delete(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_async(c(1:LOOPCOUNT), 1)\n          CALL acc_copyout_async(f(1:LOOPCOUNT), 2)\n        !$acc end data\n        !$acc wait\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_copyout_async(f(1), LOOPCOUNT*8, 2)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout_finalize(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_finalize_async(c(1:LOOPCOUNT), 1)\n          CALL acc_copyout_finalize_async(f(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_finalize_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_copyout_finalize_async(f(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout_finalize(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c= 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcreate(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          CALL acc_create_async(c(1:LOOPCOUNT), 1)\n          CALL acc_create_async(f(1:LOOPCOUNT), 2)\n          !$acc data present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                f(x) = d(x) + e(x)\n              END DO\n            !$acc end parallel\n            !$acc wait\n          !$acc end data\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          CALL acc_create_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_create_async(f(1), LOOPCOUNT*8, 2)\n          !$acc data present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                f(x) = d(x) + e(x)\n              END DO\n            !$acc end parallel\n            !$acc wait\n          !$acc end data\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_with_len.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c= 0\n\n        CALL acc_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcreate(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1:LOOPCOUNT))\n        CALL acc_delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1:LOOPCOUNT))\n        CALL acc_delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_async(a(1:LOOPCOUNT), 1)\n          CALL acc_delete_async(b(1:LOOPCOUNT), 1)\n          CALL acc_delete_async(d(1:LOOPCOUNT), 2)\n          CALL acc_delete_async(e(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c!Data\n        INTEGER,DIMENSION(1) :: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) == 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_delete_async(c(1:LOOPCOUNT), 1)\n          !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_async(a(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_async(b(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_async(d(1), LOOPCOUNT*8, 2)\n          CALL acc_delete_async(e(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) == 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_delete_async(c(1), LOOPCOUNT*8, 1)\n          !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1:LOOPCOUNT))\n        CALL acc_delete_finalize(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1:LOOPCOUNT))\n        CALL acc_delete_finalize(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_finalize_async(a(1:LOOPCOUNT), 1)\n          CALL acc_delete_finalize_async(b(1:LOOPCOUNT), 1)\n          CALL acc_delete_finalize_async(d(1:LOOPCOUNT), 2)\n          CALL acc_delete_finalize_async(e(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize_async(c(1:LOOPCOUNT), 1)\n\n        !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_finalize_async(a(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_finalize_async(b(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_finalize_async(d(1), LOOPCOUNT*8, 2)\n          CALL acc_delete_finalize_async(e(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize_async(c(1), LOOPCOUNT*8, 1)\n\n        !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1), LOOPCOUNT*8)\n        CALL acc_delete_finalize(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1), LOOPCOUNT*8)\n        CALL acc_delete_finalize(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1), LOOPCOUNT*8)\n        CALL acc_delete(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1), LOOPCOUNT*8)\n        CALL acc_delete(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,internal-control-values,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, holder !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        INTEGER :: acc_get_default_async\n        errors = 0\n        holder = acc_get_default_async()\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(holder)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (acc_get_default_async() .lt. 0) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER :: errors\n        errors = 0\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            CALL acc_set_device_num(x, acc_get_device_type())\n            IF (acc_get_device_num(acc_get_device_type()) .ne. x) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_num_devices.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors\n        errors = 0\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          IF (acc_get_num_devices(acc_get_device_type()) .eq. 0) THEN\n            errors = errors + 1\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,nonvalidating,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: output\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          output = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_memory)\n          output = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory)\n        END IF\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property_string.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,nonvalidating,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        CHARACTER(len=:),ALLOCATABLE :: output1\n        CHARACTER(len=:),ALLOCATABLE :: output2\n        CHARACTER(len=:),ALLOCATABLE :: output3\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_name, output1)\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_vendor, output2)\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_driver, output3)\n        END IF\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_init.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_init(acc_get_device_type())\n        END IF\n\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,devonly,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors\n        errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        IF (acc_is_present(a(1:LOOPCOUNT)) .eqv. .FALSE.) THEN\n          errors = errors + 1\n          PRINT*, 1\n        END IF\n        !$acc exit data delete(a(1:LOOPCOUNT))\n\n        IF (devtest(1) .eq. 1) THEN\n          IF (acc_is_present(a(1:LOOPCOUNT)) .eqv. .TRUE.) THEN\n            errors = errors + 1\n            PRINT*, 2\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,devonly,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        IF (acc_is_present(a(1), LOOPCOUNT*8) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n        !$acc exit data delete(a(1:LOOPCOUNT))\n\n        IF (devtest(1) .eq. 1) THEN\n          IF (acc_is_present(a(1), LOOPCOUNT*8) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_on_device.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,present,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors\n        INTEGER :: device_type\n        errors = 0\n        device_type = acc_get_device_type()\n        IF (device_type .ne. acc_device_none) THEN\n          !$acc parallel\n            IF (acc_on_device(device_type) .eqv. .FALSE.) THEN\n              errors = errors + 1\n            END IF\n          !$acc end parallel\n        ELSE\n          !$acc parallel\n            IF (acc_on_device(acc_device_host) .eqv. .FALSE.) THEN\n              errors = errors + 1\n            END IF\n          !$acc end parallel\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "present"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a_host = a\n        b_host = b\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_set_default_async(1)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_set_default_async(2)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x) * a_host(x) + b_host(x) * b_host(x))) .gt. 4 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(:, :),ALLOCATABLE :: host_copy\n        INTEGER :: errors = 0\n\n        CALL RANDOM_SEED\n        ALLOCATE(host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT))\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          !host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT)\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            DO y = 1, LOOPCOUNT\n              CALL RANDOM_NUMBER(a)\n              host_copy(x) = a\n            END DO\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc enter data copyin(a(1:LOOPCOUNT))\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type)\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc data present(a(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(y) = a(y) + 1\n                END DO\n              !$acc end parallel\n            !$acc end data\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc exit data copyout(a(1:LOOPCOUNT))\n            DO y = 1, LOOPCOUNT\n              IF (abs(a(y) - (host_copy(x, y) + 1)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n        INTEGER :: device_type\n\n        device_type = acc_get_device_type()\n        CALL acc_set_device_type(device_type)\n        IF (acc_get_device_type() .ne. device_type) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_shutdown.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_shutdown(acc_get_device_type())\n        END IF\n\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) create(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          CALL acc_update_device(a(1:LOOPCOUNT))\n          CALL acc_update_device(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_update_device_async(a(1:LOOPCOUNT), 1)\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_device_async(b(1:LOOPCOUNT), 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(a(1:LOOPCOUNT), 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(b(1:LOOPCOUNT), 2)\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_update_device_async(a(1), LOOPCOUNT*8, 1)\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_device_async(b(1), LOOPCOUNT*8, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors\n        errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(a(1), LOOPCOUNT*8, 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(b(1), LOOPCOUNT*8, 2)\n            !$acc parallel async(1), wait(2)\n              !$acc loop\n               DO x = 1, LOOPCOUNT\n                 c(x) = a(x) + b(x)\n               END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) create(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          CALL acc_update_device(a(1), LOOPCOUNT*8)\n          CALL acc_update_device(b(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(a(1), LOOPCOUNT*8)\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(b(1), LOOPCOUNT*8)\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(c(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(a(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self_async(c(1:LOOPCOUNT), 1)\n          CALL acc_update_self_async(d(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x) - (a(x) * b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(a(1:LOOPCOUNT), 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(b(1:LOOPCOUNT), 2)\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) * b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - ((a(x) + 1) * (b(x) + 1))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_update_self_async(d(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x) - (a(x) * b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(a(1), LOOPCOUNT*8, 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(b(1), LOOPCOUNT*8, 2)\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) * b(x)\n              END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - ((a(x) + 1) * (b(x) + 1))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(c(1), LOOPCOUNT*8)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(a(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(b(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data  copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT)) async(1)\n        !$acc enter data copyin(d(1:LOOPCOUNT)) create(e(1:LOOPCOUNT)) async(2)\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1) wait(2)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            e(x) = c(x) + d(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(e(1:LOOPCOUNT)) async(1)\n\n        CALL acc_wait(1)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, a_host, b_host, c_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n        d = 0\n        a_host = a\n        b_host = b\n        c_host = c\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) * c(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all()\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) + b(x) + c(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(d(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)) + (c_host(x) * c_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g, h, i, j, k !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: a_host, d_host, g_host\n        REAL(8) :: RAND\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        CALL RANDOM_NUMBER(g)\n        CALL RANDOM_NUMBER(h)\n        i = 0\n        j = 0\n        k = 0\n        a_host = a\n        d_host = d\n        g_host = g\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), g(1:LOOPCOUNT), h(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), f(1:LOOPCOUNT), i(1:LOOPCOUNT), j(1:LOOPCOUNT)) copyout(k(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              i(x) = g(x) + h(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all_async(4)\n          !$acc parallel async(4)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              j(x) = c(x) + f(x) + i(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = b(x) * c(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = e(x) * f(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = h(x) * i(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all_async(4)\n          !$acc parallel async(4)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              k(x) = j(x) + a(x) + d(x) + g(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(4)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = a_host(x) + b(x) + d_host(x) + e(x) + g_host(x) + h(x)\n          temp = temp + (b(x) * (a_host(x) + b(x))) + (e(x) * (d_host(x) + e(x))) + (h(x) * (g_host(x) + h(x)))\n          IF (abs(k(x) - temp) .gt. PRECISION * 10) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g, h, i !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        CALL RANDOM_NUMBER(g)\n        h = 0\n        i = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), g(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), f(1:LOOPCOUNT), h(1:LOOPCOUNT)) copyout(i(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n          !$acc end parallel\n          CALL acc_wait_async(1, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              h(x) = c(x) + g(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_async(1, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              i(x) = h(x) + f(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(2)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(i(x) - (a(x) + b(x) + g(x) + d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n        LOGICAL :: init\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        REAL(8),DIMENSION(10):: passed_b\n        REAL(8) :: holder\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL:: init\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL:: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 1\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER,DIMENSION(10):: passed_a, passed_b\n        INTEGER:: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            DO z = 1, 8\n              IF (randoms(x, y, z) .lt. .933) THEN\n                a(x, y) = a(x, y) + ISHFT(1, z - 1)\n              END IF\n            END DO\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = iand(a(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          DO y = 0, 7\n            init = init + ISHFT(1, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .lt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 0, 7\n      totals(x) = totals(x) + ISHFT(1, y)\n      totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = iand(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    DO y = 0, 7\n      init = init + ISHFT(1, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ior(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ior(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ieor(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\nLOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ieor(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  c(x, y) = totals(x)\n                  totals(x) = max(a(x, y), b(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = max(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = max(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = max(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\nIMPLICIT NONE\nINCLUDE \"acc_testsuite.Fh\"\nINTEGER :: x, y !Iterators\nREAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\nREAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\nREAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\nREAL(8):: init\nLOGICAL IS_POSSIBLE\nINTEGER :: errors = 0\n\n!Initilization\nSEEDDIM(1) = 1\n#ifdef SEED\nSEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  c(x, y) = totals(x)\n                  totals(x) = min(a(x, y), b(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = min(a(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = min(totals(x), a(x, y))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n      IMPLICIT NONE\n      INCLUDE \"acc_testsuite.Fh\"\n      INTEGER :: x, y !Iterators\n      REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n      REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n      REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n      REAL(8):: init\n      LOGICAL IS_POSSIBLE\n      INTEGER :: errors = 0\n\n      !Initilization\n      SEEDDIM(1) = 1\n#     ifdef SEED\n      SEEDDIM(1) = SEED\n#     endif\n      CALL RANDOM_SEED(PUT=SEEDDIM)\n\n      CALL RANDOM_NUMBER(a)\n      CALL RANDOM_NUMBER(b)\n\n      totals = 1\n      totals_comparison = 1\n\n      !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            DO y = 1, 10\n              !$acc atomic capture\n                c(x, y) = totals(x)\n                totals(x) = min(totals(x), a(x, y), b(x, y))\n              !$acc end atomic\n            END DO\n          END DO\n        !$acc end parallel\n      !$acc end data\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n        END DO\n      END DO\n      DO x = 1, LOOPCOUNT\n        IF (totals_comparison(x) .NE. totals(x)) THEN\n          errors = errors + 1\n          WRITE(*, *) totals_comparison(x)\n        END IF\n      END DO\n\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          passed_a(y) = a(x, y)\n          passed_b(y) = b(x, y)\n          passed_c(y) = c(x, y)\n        END DO\n        init = 1\n        IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n      END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\nLOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER :: errors = 0\n  LOGICAL :: init\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) < .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .AND. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed\n  REAL(8),DIMENSION(10):: passed_b\n  REAL(8) :: holder\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) / a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL:: init\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .EQV. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) - a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .NEQV. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL:: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .OR. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) + a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) + a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n  totals_comparison = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) * a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) * a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 1\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_and_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: b\n        LOGICAL IS_POSSIBLE\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .AND. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_divided_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        REAL(8),DIMENSION(10):: passed_b\n        REAL(8) :: holder\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) / totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_eqv_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL:: init\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .EQV. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_minus_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) - totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_neqv_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_or_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL:: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .OR. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_plus_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) + totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_times_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) * totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 1\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_iand_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER,DIMENSION(10):: passed_a, passed_b\n        INTEGER:: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            DO z = 1, 8\n              IF (randoms(x, y, z) .lt. .933) THEN\n                a(x, y) = a(x, y) + ISHFT(1, z - 1)\n              END IF\n            END DO\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = iand(a(x, y), totals(x))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          DO y = 0, 7\n            init = init + ISHFT(1, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_iand_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .lt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 0, 7\n      totals(x) = totals(x) + ISHFT(1, y)\n      totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = iand(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    DO y = 0, 7\n      init = init + ISHFT(1, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ior_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ior(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ior_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ior(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ixor_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ieor(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ixor_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ieor(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_expr_list_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = max(a(x, y), b(x, y), totals(x))\n                  c(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = max(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = max(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = max(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_x_expr_list_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\nIMPLICIT NONE\nINCLUDE \"acc_testsuite.Fh\"\nINTEGER :: x, y !Iterators\nREAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\nREAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\nREAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\nREAL(8):: init\nLOGICAL IS_POSSIBLE\nINTEGER :: errors = 0\n\n!Initilization\nSEEDDIM(1) = 1\n#ifdef SEED\nSEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_expr_list_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(a(x, y), b(x, y), totals(x))\n                  c(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(a(x, y), totals(x))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(totals(x), a(x, y))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_x_expr_list_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n      IMPLICIT NONE\n      INCLUDE \"acc_testsuite.Fh\"\n      INTEGER :: x, y !Iterators\n      REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n      REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n      REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n      REAL(8):: init\n      LOGICAL IS_POSSIBLE\n      INTEGER :: errors = 0\n\n      !Initilization\n      SEEDDIM(1) = 1\n#     ifdef SEED\n      SEEDDIM(1) = SEED\n#     endif\n      CALL RANDOM_SEED(PUT=SEEDDIM)\n\n      CALL RANDOM_NUMBER(a)\n      CALL RANDOM_NUMBER(b)\n\n      totals = 1\n      totals_comparison = 1\n\n      !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            DO y = 1, 10\n              !$acc atomic capture\n                totals(x) = min(totals(x), a(x, y), b(x, y))\n                c(x, y) = totals(x)\n              !$acc end atomic\n            END DO\n          END DO\n        !$acc end parallel\n      !$acc end data\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n        END DO\n      END DO\n      DO x = 1, LOOPCOUNT\n        IF (totals_comparison(x) .NE. totals(x)) THEN\n          errors = errors + 1\n          WRITE(*, *) totals_comparison(x)\n        END IF\n      END DO\n\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          passed_a(y) = a(x, y)\n          passed_b(y) = b(x, y)\n          passed_c(y) = c(x, y)\n        END DO\n        init = 1\n        IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n      END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_and_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER :: errors = 0\n  LOGICAL :: init\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) < .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .AND. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_divided_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed\n  REAL(8),DIMENSION(10):: passed_b\n  REAL(8) :: holder\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) / a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_eqv_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL:: init\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .EQV. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_minus_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) - a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_neqv_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .NEQV. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_or_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL:: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .OR. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_plus_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) + a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) + a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_times_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n  totals_comparison = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) * a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) * a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 1\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .AND. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_and_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) / totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .EQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_eqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) - totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .NEQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_neqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .OR. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_or_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) + totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) * totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_times_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .AND. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_and_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) / totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .EQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_eqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) - totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .NEQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_neqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .OR. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_or_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) + totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) * totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_times_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .AND. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_and_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .AND. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) / a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) / a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .EQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_eqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .EQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) - a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) - a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .NEQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_neqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .NEQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .OR. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_or_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .OR. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) + a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) + a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) * a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_times_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) * a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .AND. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_and_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .AND. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) / a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) / a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .EQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_eqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .EQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) - a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) - a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .NEQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_neqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .NEQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .OR. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_or_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .OR. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) + a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) + a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) * a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_times_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) * a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copy_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyin_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(:LOOPCOUNT), b(:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_reference_counts.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          !$acc data copyin(c(1:LOOPCOUNT))\n            !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO x = 1, LOOPCOUNT\n                  c(x) = c(x) + a(x) + b(x)\n                END DO\n              !$acc end parallel\n            !$acc end data\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n              EXIT\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        IF (devtest(1) .eq. 1) THEN\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 2\n              EXIT\n            END IF\n          END DO\n        END IF\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(c(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 8\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0 \n\n        !$acc data create(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc data present_or_create(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc data pcreate(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n     \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) create(c(:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_present_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n \n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_changing_subscript.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, indexer !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        indexer = LOOPCOUNT\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:indexer), b(1:indexer)) copyout(c(1:indexer))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, indexer\n              c(x) = a(x) + b(x)\n            END DO\n            indexer = 1\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_derived_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        TYPE multi_item\n          REAL(8) :: a\n          REAL(8) :: b\n          REAL(8) :: c\n        END TYPE multi_item\n        INTEGER :: x !Iterators\n        TYPE (multi_item),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        DO x = 1, LOOPCOUNT\n          CALL RANDOM_NUMBER(a(x)%a)\n          CALL RANDOM_NUMBER(a(x)%b)\n          a(x)%c = 0.0\n        END DO\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x)%c = a(x)%a + a(x)%b\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x)%c - (a(x)%a + a(x)%b)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  INTEGER :: x\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(fixed_size_array)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + fixed_size_array(MOD(x, 10))\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + fixed_size_array(MOD(x, 10)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(scalar)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL externMultiplyData(a, LOOPCOUNT)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL multiplyData(a)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin_mod.F90": {
                "num tests": 0,
                "tests": {}
            },
            "declare_create.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,declare,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  !$acc update device(n)\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(fixed_size_array)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 10\n        fixed_size_array(x) = x * x\n      END DO\n    !$acc end parallel\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + fixed_size_array(MOD(x, 10))\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + (MOD(x, 10) * MOD(x, 10)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,declare,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  scalar = 10\n  !$acc update device(scalar)\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(scalar)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n  !$acc update\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL externMultiplyData(a, LOOPCOUNT)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL multiplyData(a)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copy.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(1:LOOPCOUNT, x:x))\n        CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (2 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(1:LOOPCOUNT, x:x))\n          CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 4\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copy(c(1:LOOPCOUNT, x:x))\n          CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(y, x) - 4) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - (4 + a(y, x) + b(y, x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyin.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n\n  !$acc data copy(c(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL function_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n        PRINT*, \"1\"\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 0\n    a_host = a\n    b_host = b\n\n    !$acc data copy(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT), c(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        CALL function_test_dev_only(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      END DO\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      DO y = 1, LOOPCOUNT\n        IF (abs(a(x, y) + 1) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"2\"\n        END IF\n        IF (abs(b(x, y) + 1) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"3\"\n        END IF\n        IF (abs(c(x, y) - (a_host(x, y) + b_host(x, y))) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"4\"\n        END IF\n      END DO\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 1\n    a_host = a\n    b_host = b\n\n    !$acc data copy(c(1:LOOPCOUNT, 1:LOOPCOUNt))\n      DO x = 1, LOOPCOUNT\n        CALL function_test_dev_only(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      END DO\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      DO y = 1, LOOPCOUNT\n        IF (abs(a(x, y) - a_host(x, y)) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"5\"\n        END IF\n        IF (abs(b(x, y) - b_host(x, y)) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"6\"\n        END IF\n        IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"7\"\n        END IF\n      END DO\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(1:LOOPCOUNT, x:x))\n        CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(1:LOOPCOUNT, x:x))\n          CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL create_test(a(x), b(x), c(x), d(x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(d(x, y) - (a(x, y) * (a(x, y) + b(x, y)))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copy(c(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL create_as_present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (2 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(d(x, y) - (a(x, y) * c(x, y))) .gt. PRECISION * 2) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(x:x, 1:LOOPCOUNT)) copyout(d(x:x, 1:LOOPCOUNT))\n          CALL create_as_present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(x, y) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x, y) - (a(x, y) * (3 + a(x, y) + b(x, y)))) .gt. PRECISION * 2) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_present.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(x:x, 1:LOOPCOUNT))\n        CALL present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(d(x, y) - (a(x, y) * c(x, y))) .gt. PRECISION * 2) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(x:x, 1:LOOPCOUNT)) copyout(d(x:x, 1:LOOPCOUNT))\n          CALL present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(x, y) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x, y) - (a(x, y) * (3 + a(x, y) + b(x, y)))) .gt. PRECISION * 2) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_copyin_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(:LOOPCOUNT), b(:LOOPCOUNT))\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n\n        !$acc enter data create(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop \n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n        !$acc enter data present_or_create(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc enter data pcreate(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_if.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          a_copy = a\n          CALL RANDOM_NUMBER(b)\n          b_copy = b\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n          CALL RANDOM_NUMBER(a)\n          a_copy = a\n          CALL RANDOM_NUMBER(b)\n          b_copy = b\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n\n        IF (devtest(1) .eq. 1) THEN\n          !$acc enter data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) + 1\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(a(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        !$acc enter data copyin(a(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = a(x) + 1\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (a_copy(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_reference_counts.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        IF (devtest(1) .eq. 1) THEN\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data copyin(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n              EXIT\n            END IF\n          END DO \n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc data copyin(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = c(x) + a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(c(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_delete_no_lower_bound.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: has_device\n\n        has_device(1) = .TRUE.\n        !$acc enter data copyin(has_device(1:1))\n        !$acc parallel present(has_device(1:1))\n          has_device(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(:LOOPCOUNT), b(:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: has_device\n\n        has_device(1) = .TRUE.\n        !$acc enter data copyin(has_device(1:1))\n        !$acc parallel present(has_device(1:1))\n          has_device(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (has_device(1) .eqv. .TRUE.) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          \n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(c(:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_finalize.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        IF (devtest(1) .eq. 1) THEN\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) finalize\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "id": 1,
            "init.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_num = acc_get_device_num(acc_get_device_type())\n        !$acc init device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    }
                }
            },
            "init_device_type_num.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(host) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(multicore) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(default) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    }
                }
            },
            "init_device_type_num_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(nvidia) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    }
                }
            },
            "kernels_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,kernels,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        g = 0\n        !$acc enter data create(g(1:LOOPCOUNT), c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc kernels async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end kernels\n          !$acc kernels async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end kernels\n          !$acc kernels wait(1, 2) async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = c(x) + f(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        !$acc wait(1, 2)\n        !$acc update host(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc exit data copyout(g(1:LOOPCOUNT)) async(3)\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" a: \", c(x), \" = \", a(x), \" + \", b(x)\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" b: \", f(x), \" = \", d(x), \" + \", e(x)\n          END IF\n        END DO\n        !$acc wait(3)\n        DO x = 1, LOOPCOUNT\n          IF (abs(g(x) - (c(x) + f(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" c: \", g(x), \" = \", c(x), \" + \", f(x)\n          END IF\n        END DO\n        !$acc exit data delete(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "kernels",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copy.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels copy(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc kernels copy(c(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - 1) .gt. PRECISION) THEN\n              IF ((a(x) + b(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n            DO x = 1, LOOPCOUNT\n              c(x) = 0\n            END DO\n            !$acc kernels copy(c(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n            DO x = 1, LOOPCOUNT\n              IF (abs(c(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (1 + a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyin.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copy(b(1:LOOPCOUNT))\n          !$acc kernels copyin(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) + a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            DO x = 1, LOOPCOUNT\n              a(x) = -1\n            END DO\n            !$acc kernels copyin(a(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n            DO x = 1, LOOPCOUNT\n              IF (abs(a(x) + 1) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc kernels copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyout.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          \n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc kernels copyout(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          \n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc kernels create(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1)) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc kernels\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n          !$acc exit data copyout(c(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,default,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels default(present)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data delete(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_if.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        data_on_device = .TRUE.\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data copyout(b(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            a(x) = -1\n          END DO\n\n          !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          data_on_device = .FALSE.\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9 !Iterators\n        REAL(8),DIMENSION(1024):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:1024)) copyout(b(1:1024))\n          !$acc kernels\n            !$acc loop\n            DO _0 = 0, 1\n              !$acc loop\n              DO _1 = 0, 1\n                !$acc loop\n                DO _2 = 0, 1\n                  !$acc loop\n                  DO _3 = 0, 1\n                    !$acc loop\n                    DO _4 = 0, 1\n                      !$acc loop\n                      DO _5 = 0, 1\n                        !$acc loop\n                        DO _6 = 0, 1\n                          !$acc loop\n                          DO _7 = 0, 1\n                            !$acc loop\n                            DO _8 = 0, 1\n                              !$acc loop\n                              DO _9 = 1, 2\n                                b(_0*512+_1*256+_2*128+_3*64+_4*32+_5*16+_6*8+_7*4+_8*2+_9)=a(_0*512+_1*256+_2*128+_3*64+_4*32+_5*16+_6*8+_7*4+_8*2+_9)\n                              END DO\n                            END DO\n                          END DO\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, 1024\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_independent.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc kernels loop independent\n          DO x = 1, LOOPCOUNT\n            b(x) = b(x) + a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        total = 0\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(total)\n          !$acc parallel loop reduction(+:total)\n          DO x = 1, LOOPCOUNT\n            total = total + a(x) + b(x)\n          END DO\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. LOOPCOUNT * PRECISION) THEN\n          WRITE(*, *) total\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c, d !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        avg = 0\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) create(c(1:10*LOOPCOUNT)) copyout(d(1:10*LOOPCOUNT))\n          !$acc kernels loop gang private(avg)\n          DO x = 0, 9\n            avg = 0\n            !$acc loop worker reduction(+:avg)\n            DO y = 1, LOOPCOUNT\n              avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            avg = avg / LOOPCOUNT\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              d(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y) / avg\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          avg = 0\n          DO y = 1, LOOPCOUNT\n            avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          avg = avg / LOOPCOUNT\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / avg)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0.0\n            !$acc loop vector reduction(+:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .TRUE.\n        LOGICAL :: host_results = .TRUE.\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(.and.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .and. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          host_results = host_results .and. a(x)\n        END DO\n        IF (host_results .neqv. results) THEN\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results, has_false\n        LOGICAL :: host_results = .TRUE.\n        LOGICAL :: temp = .TRUE.\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / LOOPCOUNT)\n        INTEGER :: errors = 0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, 10\n          results(x) = .TRUE.\n          has_false(x) = .FALSE.\n        END DO\n        DO x = 1, 10*LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n            a_copy(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n            a_copy(x) = .FALSE.\n            has_false(x / LOOPCOUNT) = .TRUE.\n          END IF\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc kernels loop gang\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop worker reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (temp .eqv. .TRUE.) THEN\n                IF (a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          temp = .TRUE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .AND. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .TRUE.) THEN\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10):: b\n        LOGICAL,DIMENSION(10):: has_false\n        LOGICAL :: temp\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(10*LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        DO x = 1, 10\n          has_false(x) = .FALSE.\n          b(x) = .TRUE.\n        END DO\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (randoms(x * LOOPCOUNT + y) .lt. false_margin) THEN\n              a(x * LOOPCOUNT + y) = .TRUE.\n            ELSE\n              a(x * LOOPCOUNT + y) = .FALSE.\n              has_false(x + 1) = .TRUE.\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop vector reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) .eqv. .FALSE.) THEN\n              temp = .TRUE.\n            END IF\n          END DO\n          IF (temp .neqv. has_false(x + 1)) THEN\n            errors = 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: b\n        REAL(8),DIMENSION(16 * LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 15\n            IF (randoms(y * LOOPCOUNT + x) .lt. false_margin) THEN\n              temp = 1\n              DO z = 0, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        b = a(1)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(iand:b)\n          DO x = 1, LOOPCOUNT\n            b = iand(b, a(x))\n          END DO\n        !$acc end data\n\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = iand(a(x), temp)\n        END DO\n        IF (temp .ne. b) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) b\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160*LOOPCOUNT)::randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(10000 * randoms2)\n        b_copy = b\n        false_margin = exp(log(.5)/LOOPCOUNT)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms((y - 1) * 10 * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        DO x = 1, 10\n         c(x) = a((x - 1) * LOOPCOUNT + x)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 1, 10\n            temp = a((x - 1) * LOOPCOUNT + 1)\n            !$acc loop worker reduction(iand:temp)\n            DO y = 2, LOOPCOUNT\n              temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n            END DO\n            c(x) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b((x - 1) * LOOPCOUNT + y) = b((x - 1) * LOOPCOUNT + y) + c(x)\n            END DO\n          END DO\n        !$acc end data\n\n       DO x = 1, 10\n         temp = a((x - 1) * LOOPCOUNT + 1)\n         DO y = 2, LOOPCOUNT\n           temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n         END DO\n         IF (temp .ne. c(x)) THEN\n           errors = errors + 1\n         END IF\n         DO y = 1, LOOPCOUNT\n           IF (b((x - 1) * LOOPCOUNT + y) .ne. b_copy((x - 1) * LOOPCOUNT + y) + temp) THEN\n             errors = errors + 1\n           END IF\n         END DO\n       END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: random\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5) / n)\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (random(x * 16 * LOOPCOUNT + (y - 1) * 16 + z - 1) < false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc kernels loop private(c)\n          DO x = 0, 9\n            c = a(x * LOOPCOUNT + 1)\n            !$acc loop vector reduction(iand:c)\n            DO y = 1, LOOPCOUNT\n              c = iand(c, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = c\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = a(x * LOOPCOUNT + 1)\n          DO y = 2, LOOPCOUNT\n            temp = iand(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (b(x + 1) .ne. temp) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(16*LOOPCOUNT):: random\n        INTEGER :: errors = 0\n        INTEGER :: temp\n        INTEGER :: b\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 16\n            IF (random((y - 1) * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        b = a(1)\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(ior:b)\n          DO x = 2, LOOPCOUNT\n            b = ior(b, a(x))\n          END DO\n        !$acc end data\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = ior(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        false_margin = exp(log(.5)/n)\n        b = FLOOR(6*randoms2)\n        b_copy = b\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (randoms(x * 16 * LOOPCOUNT + y * 16 + z - 1) .gt. false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10 * LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10) :: b\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160 * LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / n)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms(y * 10 * LOOPCOUNT + y - 1) .gt. false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        INTEGER :: errors = 0\n        INTEGER :: b = 0\n        INTEGER :: temp = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(ieor:b)\n          DO x = 1, LOOPCOUNT\n            b = ieor(b, a(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = ieor(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms, randoms2\n        INTEGER,DIMENSION(10):: c\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(randoms2*1000000)\n        b_copy = b\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: maximum, temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        maximum = 0\n        temp = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels loop reduction(max:maximum)\n          DO x = 1, LOOPCOUNT\n            maximum = max(maximum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = max(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - maximum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: maximum\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / maximum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) - maximum(x + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            ELSE IF ((c(x * LOOPCOUNT + y) - 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: maximum\n        INTEGER :: errors = 0\n        REAL(8) :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        maximum = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(maximum(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - maximum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8):: minimum = 1000\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels loop reduction(min:minimum)\n          DO x = 1, LOOPCOUNT\n            minimum = min(minimum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = min(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - minimum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = a + 1\n        b = b + 1\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc kernels loop gang independent private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop worker independent reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n            !$acc loop independent\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / minimum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) minimum(x + 1)\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) / temp)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y!Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop vector reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: temp = 1\n        REAL(8) :: multiplied_total = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a)/1000\n        b = (999.4 + b)/1000\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(*:multiplied_total)\n          DO x = 1, LOOPCOUNT\n            multiplied_total = multiplied_total * (a(x) + b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp * (a(x) + b(x))\n        END DO\n        IF (abs(temp - multiplied_total) .gt. ((temp / 2) + (multiplied_total / 2)) * PRECISION) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) multiplied_total\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: totals\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = (999.4 + a) / 2000\n        b = (999.4 + b) / 2000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT), totals(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop worker reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            totals(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - totals(x + 1)) .gt. ((temp / 2) + (totals(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) temp\n            WRITE(*, *) totals(x + 1)\n            WRITE(*, *) \" \"\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1))) .gt. c(x * LOOPCOUNT + y) * PRECISION) THEN\n              errors = errors + 1\n              WRITE(*, *) c(x * LOOPCOUNT + y)\n              WRITE(*, *) a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              WRITE(*, *) \" \"\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a) / 1000\n        b = (999.4 + b) / 1000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop vector reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. ((temp / 2) + (c(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .FALSE.\n        LOGICAL :: temp = .FALSE.\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        REAL(8),DIMENSION(LOOPCOUNT):: random\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        DO x = 1, LOOPCOUNT\n          IF (random(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(.OR.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .OR. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp .OR. a(x)\n        END DO\n        IF (temp .neqv. results) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results\n        LOGICAL :: temp = .FALSE.\n        REAL(8),DIMENSION(10 * LOOPCOUNT) :: random\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (random(x) .gt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n          a_copy(x) = a(x)\n        END DO\n\n        DO x = 1, 10\n          results(x) = .FALSE.\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop worker reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (results(x + 1) .eqv. .TRUE.) THEN\n                IF(a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .FALSE.) THEN\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10) :: b\n        LOGICAL :: temp\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / 2)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (randoms(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop vector reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc kernels loop seq\n          DO x = 2, LOOPCOUNT\n            b(x) = b(x - 1) + a(x)\n          END DO\n        !$acc end data\n\n        DO x = 2, LOOPCOUNT\n          IF (abs(b(x) - (b(x - 1) + a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,tile,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT,SMALL_LOOPCOUNT)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copyin(a(1:SMALL_LOOPCOUNT), b(1:SMALL_LOOPCOUNT), c(1:SMALL_LOOPCOUNT)) copyout(d(1:SMALL_LOOPCOUNT,1:SMALL_LOOPCOUNT))\n          !$acc kernels loop tile(*, *) reduction(+:temp)\n          DO x = 1, SMALL_LOOPCOUNT\n            DO y = 1, SMALL_LOOPCOUNT\n              temp = 0\n              DO z = 1, SMALL_LOOPCOUNT\n                temp = temp + a(z) + b(z) + c(z)\n              END DO\n              d(x,y) = temp\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 1, SMALL_LOOPCOUNT\n          DO y = 1, SMALL_LOOPCOUNT\n            temp = 0\n            DO z = 1, SMALL_LOOPCOUNT\n              temp = temp + a(z) + b(z) + c(z)\n            END DO\n            IF (abs(d(x,y) - temp) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplier\n        INTEGER :: errors = 0\n\n        multiplier = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplier\n            END DO\n            multiplier = multiplier + 1\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        REAL(8) :: multiplier\n        INTEGER :: errors = 0\n\n        multiplier = 1\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplier\n            END DO\n            multiplier = multiplier + 1\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + (a(x) + b(x)) * multiplier\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_gangs.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER :: results !Data\n        INTEGER :: errors = 0\n\n        results = 0\n\n        !$acc kernels num_gangs(8)\n          !$acc loop gang reduction(+:results)\n          DO x = 1, LOOPCOUNT\n            results = 1\n          END DO\n        !$acc end kernels\n          \n        IF (results .ne. 8) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_workers.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels loop num_workers(16)\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data delete(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_scalar_default_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: total = 0.0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        DO x = 1, LOOPCOUNT\n          total = total + a(x)\n        END DO\n        !$acc data copyin(b(1:LOOPCOUNT))\n          !$acc kernels num_gangs(1) vector_length(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              total = total + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. (2 * LOOPCOUNT - 2) * PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_vector_length.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels vector_length(16)\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n        !$acc kernels wait(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_collapse.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x*LOOPCOUNT + 1) = a(x*LOOPCOUNT + 1) + b(x*LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x*LOOPCOUNT + y) = c(x*LOOPCOUNT + y - 1) + a(x*LOOPCOUNT + y) + b(x*LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent collapse(2)\n            DO x = 0, 9\n              DO y = 1, LOOPCOUNT\n                c(x*LOOPCOUNT + y) = a(x*LOOPCOUNT + y) + b(x*LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x*LOOPCOUNT+y) - (a(x*LOOPCOUNT+y)+b(x*LOOPCOUNT+y))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_no_collapse.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x * LOOPCOUNT + 1) = a(x * LOOPCOUNT + 1) + b(x * LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y - 1) + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x * LOOPCOUNT + 1) = a(x * LOOPCOUNT + 1) + b(x * LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc kernels\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y - 1) + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, i_a, i_b, i_c, i_d, i_e, i_f, i_g, i_h, i_i, i_j !Iterators\n        INTEGER, PARAMETER :: PRIVATE_LOOPCOUNT = 1024\n        REAL(8),DIMENSION(PRIVATE_LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:PRIVATE_LOOPCOUNT), b(1:PRIVATE_LOOPCOUNT)) copy(c(1:PRIVATE_LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO i_a = 0, 1\n              !$acc loop\n              DO i_b = 0, 1\n                !$acc loop\n                DO i_c = 0, 1\n                  !$acc loop\n                  DO i_d = 0, 1\n                    !$acc loop\n                    DO i_e = 0, 1\n                      !$acc loop\n                      DO i_f = 0, 1\n                        !$acc loop\n                        DO i_g = 0, 1\n                          !$acc loop\n                          DO i_h = 0, 1\n                            !$acc loop\n                            DO i_i = 0, 1\n                              !$acc loop\n                              DO i_j = 0, 1\n                                c(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) = &\n                                a(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) + &\n                                b(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1)\n                              END DO\n                            END DO\n                          END DO\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, PRIVATE_LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        g = 0\n        \n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), c(1:LOOPCOUNT), f(1:LOOPCOUNT), g(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(c(1:LOOPCOUNT)) wait(1) async(4)\n          !$acc update host(f(1:LOOPCOUNT)) wait(2) async(5)\n          !$acc parallel wait(1, 2) async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = c(x) + f(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(g(1:LOOPCOUNT)) async(3)\n        !$acc end data\n        !$acc wait\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          ELSE IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          ELSE IF (abs(g(x) - (f(x) + c(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_host = a\n\n        !$acc parallel copy(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 2 * a(x)\n          END DO \n        !$acc end parallel\n    \n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a_host(x) - (a(x) / 2)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyin.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        b = 0\n\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !$acc parallel copyin(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 0.0\n          END DO\n\n        !$acc end parallel\n\n        DO x = 1, LOOPCOUNT\n          IF ((abs(a(x) - a_copy(x)) > PRECISION .AND. hasDevice(1) .eq. 1) .OR. (hasDevice(1) .eq. 0 .AND. abs(a(x)) > PRECISION)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n        IF (hasDevice(1) .eq. 1) THEN\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel copyout(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) - a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) - a(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(b(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x)) > 2 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_create.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,parallel,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1)) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n          !$acc exit data copyout(c(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,default,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: errors = 0\n\n        a = 0\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel default(present)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = 1.0\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - 1) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_firstprivate.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,firstprivate,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, d !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c, c_copy\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n        c_copy = c\n        d = 0\n        \n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(d(1:10*LOOPCOUNT))\n          !$acc parallel firstprivate(c(1:LOOPCOUNT))\n            !$acc loop gang\n            DO x = 0, 9\n              !$acc loop worker\n              DO y = 1, LOOPCOUNT\n                d(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,firstprivate,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, d !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c, c_copy\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n        \n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(d(1:10*LOOPCOUNT))\n          !$acc parallel firstprivate(c(1:LOOPCOUNT))\n            !$acc loop gang independent\n            DO x = 0, 9\n              !$acc loop worker independent\n              DO y = 1, LOOPCOUNT\n                c(y) = a(x * LOOPCOUNT + y) - b(x * LOOPCOUNT + y)\n              END DO\n              !$acc loop worker independent\n              DO y = 1, LOOPCOUNT\n                d(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, 10 * LOOPCOUNT\n          IF (abs(d(x) - (2 * a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO       \n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_if.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc parallel if(host)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (dev_test(1) .eq. 0) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = a + b\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel if(host) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = a + b\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel if(device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = c(x) + a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)), copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (2 * (a(x) + b(x)))) .gt. 2 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        a = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 1\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - 1) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        a = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) + c(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (b(x) + c(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c, d !Data\n\t\t\t\tINTEGER,DIMENSION(10):: errors_array\n        INTEGER :: errors\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = a + b\n\t\t\t\terrors = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT), c(1:10*LOOPCOUNT), d(1:10*LOOPCOUNT)) copy(errors_array(1:10))\n          DO x = 0, 9\n            !$acc parallel loop async(x)\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            !$acc parallel loop async(x) reduction(+:errors_array(x))\n            DO y = 1, LOOPCOUNT\n              IF (c(x * LOOPCOUNT + y) - d(x * LOOPCOUNT + y) .gt.  PRECISION .OR. &\n                d(x * LOOPCOUNT + y) - c(x * LOOPCOUNT + y) .gt. PRECISION) THEN\n                errors_array(x) = errors_array(x) + 1\n              END IF\n            END DO\n          END DO\n\t\t\t\t\t!$acc wait\n        !$acc end data\n\n\t\t\t\tDO x = 1, 10\n\t\t\t\t\terrors = errors + errors_array(x)\n\t\t\t\tEND DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_auto.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,auto,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b !Data\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc parallel loop auto\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel loop auto\n          DO x = 2, LOOPCOUNT\n            a(x) = a(x - 1) + a(x)\n          END DO\n        !$acc end data\n\n        temp = 0\n        DO x = 1, LOOPCOUNT\n          temp = temp + a_copy(x)\n          IF (abs(temp - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_gang.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel loop gang\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        total = 0\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(total)\n          !$acc parallel loop reduction(+:total)\n          DO x = 1, LOOPCOUNT\n            total = total + a(x) + b(x)\n          END DO\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. LOOPCOUNT * PRECISION) THEN\n          WRITE(*, *) total\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c, d !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        avg = 0\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) create(c(1:10*LOOPCOUNT)) copyout(d(1:10*LOOPCOUNT))\n          !$acc parallel loop gang private(avg)\n          DO x = 0, 9\n            avg = 0\n            !$acc loop worker reduction(+:avg)\n            DO y = 1, LOOPCOUNT\n              avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            avg = avg / LOOPCOUNT\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              d(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y) / avg\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          avg = 0\n          DO y = 1, LOOPCOUNT\n            avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          avg = avg / LOOPCOUNT\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / avg)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0.0\n            !$acc loop vector reduction(+:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .TRUE.\n        LOGICAL :: host_results = .TRUE.\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(.and.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .and. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          host_results = host_results .and. a(x)\n        END DO\n        IF (host_results .neqv. results) THEN\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results, has_false\n        LOGICAL :: host_results = .TRUE.\n        LOGICAL :: temp = .TRUE.\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / LOOPCOUNT)\n        INTEGER :: errors = 0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, 10\n          results(x) = .TRUE.\n          has_false(x) = .FALSE.\n        END DO\n        DO x = 1, 10*LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n            a_copy(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n            a_copy(x) = .FALSE.\n            has_false(x / LOOPCOUNT) = .TRUE.\n          END IF\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc parallel loop gang\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop worker reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (temp .eqv. .TRUE.) THEN\n                IF (a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          temp = .TRUE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .AND. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .TRUE.) THEN\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10):: b\n        LOGICAL,DIMENSION(10):: has_false\n        LOGICAL :: temp\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(10*LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        DO x = 1, 10\n          has_false(x) = .FALSE.\n          b(x) = .TRUE.\n        END DO\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (randoms(x * LOOPCOUNT + y) .lt. false_margin) THEN\n              a(x * LOOPCOUNT + y) = .TRUE.\n            ELSE\n              a(x * LOOPCOUNT + y) = .FALSE.\n              has_false(x + 1) = .TRUE.\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop vector reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) .eqv. .FALSE.) THEN\n              temp = .TRUE.\n            END IF\n          END DO\n          IF (temp .neqv. has_false(x + 1)) THEN\n            errors = 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: b\n        REAL(8),DIMENSION(16 * LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 15\n            IF (randoms(y * LOOPCOUNT + x) .lt. false_margin) THEN\n              temp = 1\n              DO z = 0, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        \n        b = a(1)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(iand:b)\n          DO x = 1, LOOPCOUNT\n            b = iand(b, a(x))\n          END DO\n        !$acc end data\n \n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = iand(a(x), temp)\n        END DO\n        IF (temp .ne. b) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) b\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160*LOOPCOUNT)::randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(10000 * randoms2)\n        b_copy = b\n        false_margin = exp(log(.5)/LOOPCOUNT)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms((y - 1) * 10 * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        \n        DO x = 1, 10\n         c(x) = a((x - 1) * LOOPCOUNT + x)\n        END DO\n        \n        \n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 1, 10\n            temp = a((x - 1) * LOOPCOUNT + 1)\n            !$acc loop worker reduction(iand:temp)\n            DO y = 2, LOOPCOUNT\n              temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n            END DO\n            c(x) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b((x - 1) * LOOPCOUNT + y) = b((x - 1) * LOOPCOUNT + y) + c(x)\n            END DO\n          END DO\n        !$acc end data\n\n       DO x = 1, 10\n         temp = a((x - 1) * LOOPCOUNT + 1)\n         DO y = 2, LOOPCOUNT\n           temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n         END DO\n         IF (temp .ne. c(x)) THEN\n           errors = errors + 1\n         END IF\n         DO y = 1, LOOPCOUNT\n           IF (b((x - 1) * LOOPCOUNT + y) .ne. b_copy((x - 1) * LOOPCOUNT + y) + temp) THEN\n             errors = errors + 1\n           END IF\n         END DO\n       END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: random\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5) / n)\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (random(x * 16 * LOOPCOUNT + (y - 1) * 16 + z - 1) < false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n                \n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc parallel loop private(c)\n          DO x = 0, 9\n            c = a(x * LOOPCOUNT + 1)\n            !$acc loop vector reduction(iand:c)\n            DO y = 1, LOOPCOUNT\n              c = iand(c, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = c\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = a(x * LOOPCOUNT + 1)\n          DO y = 2, LOOPCOUNT\n            temp = iand(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (b(x + 1) .ne. temp) THEN\n            errors = errors + 1\n          END IF\n        END DO       \n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(16*LOOPCOUNT):: random\n        INTEGER :: errors = 0\n        INTEGER :: temp\n        INTEGER :: b\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 16\n            IF (random((y - 1) * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        b = a(1)\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(ior:b)\n          DO x = 2, LOOPCOUNT\n            b = ior(b, a(x))\n          END DO\n        !$acc end data\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = ior(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        false_margin = exp(log(.5)/n)\n        b = FLOOR(6*randoms2)\n        b_copy = b\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (randoms(x * 16 * LOOPCOUNT + y * 16 + z - 1) .gt. false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10 * LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10) :: b\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160 * LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / n)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms(y * 10 * LOOPCOUNT + y - 1) .gt. false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        INTEGER :: errors = 0\n        INTEGER :: b = 0\n        INTEGER :: temp = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(ieor:b)\n          DO x = 1, LOOPCOUNT\n            b = ieor(b, a(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = ieor(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms, randoms2\n        INTEGER,DIMENSION(10):: c\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(randoms2*1000000)\n        b_copy = b\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: maximum, temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        maximum = 0\n        temp = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel loop reduction(max:maximum)\n          DO x = 1, LOOPCOUNT\n            maximum = max(maximum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = max(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - maximum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: maximum\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / maximum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) - maximum(x + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            ELSE IF ((c(x * LOOPCOUNT + y) - 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: maximum\n        INTEGER :: errors = 0\n        REAL(8) :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        maximum = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(maximum(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - maximum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8):: minimum = 1000\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel loop reduction(min:minimum)\n          DO x = 1, LOOPCOUNT\n            minimum = min(minimum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = min(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - minimum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = a + 1\n        b = b + 1\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop worker reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n            !$acc loop\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / minimum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) / temp)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y!Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop vector reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: temp = 1\n        REAL(8) :: multiplied_total = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a)/1000\n        b = (999.4 + b)/1000\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(*:multiplied_total)\n          DO x = 1, LOOPCOUNT\n            multiplied_total = multiplied_total * (a(x) + b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp * (a(x) + b(x))\n        END DO\n        IF (abs(temp - multiplied_total) .gt. ((temp / 2) + (multiplied_total / 2)) * PRECISION) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) multiplied_total\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: totals\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = (999.4 + a) / 2000\n        b = (999.4 + b) / 2000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT), totals(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop worker reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            totals(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - totals(x + 1)) .gt. ((temp / 2) + (totals(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) temp\n            WRITE(*, *) totals(x + 1)\n            WRITE(*, *) \" \"\n          END IF\n          DO y = 1, LOOPCOUNT \n            IF (abs(c(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1))) .gt. c(x * LOOPCOUNT + y) * PRECISION) THEN\n              errors = errors + 1\n              WRITE(*, *) c(x * LOOPCOUNT + y)\n              WRITE(*, *) a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              WRITE(*, *) \" \"\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a) / 1000\n        b = (999.4 + b) / 1000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop vector reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. ((temp / 2) + (c(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .FALSE.\n        LOGICAL :: temp = .FALSE.\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        REAL(8),DIMENSION(LOOPCOUNT):: random\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        DO x = 1, LOOPCOUNT\n          IF (random(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(.OR.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .OR. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp .OR. a(x)\n        END DO\n        IF (temp .neqv. results) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results\n        LOGICAL :: temp = .FALSE.\n        REAL(8),DIMENSION(10 * LOOPCOUNT) :: random\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (random(x) .gt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n          a_copy(x) = a(x)\n        END DO\n\n        DO x = 1, 10\n          results(x) = .FALSE.\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop worker reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (results(x + 1) .eqv. .TRUE.) THEN\n                IF(a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .FALSE.) THEN\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10) :: b\n        LOGICAL :: temp\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / 2)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (randoms(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop vector reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc parallel loop seq\n          DO x = 2, LOOPCOUNT\n            b(x) = b(x - 1) + a(x)\n          END DO\n        !$acc end data\n        \n        DO x = 2, LOOPCOUNT\n          IF (abs(b(x) - (b(x - 1) + a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,tile,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT,SMALL_LOOPCOUNT)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copyin(a(1:SMALL_LOOPCOUNT), b(1:SMALL_LOOPCOUNT), c(1:SMALL_LOOPCOUNT)) copyout(d(1:SMALL_LOOPCOUNT,1:SMALL_LOOPCOUNT))\n          !$acc parallel loop tile(*, *) reduction(+:temp)\n          DO x = 1, SMALL_LOOPCOUNT\n            DO y = 1, SMALL_LOOPCOUNT \n              temp = 0\n              DO z = 1, SMALL_LOOPCOUNT\n                temp = temp + a(z) + b(z) + c(z)\n              END DO\n              d(x,y) = temp\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 1, SMALL_LOOPCOUNT \n          DO y = 1, SMALL_LOOPCOUNT \n            temp = 0\n            DO z = 1, SMALL_LOOPCOUNT\n              temp = temp + a(z) + b(z) + c(z) \n            END DO\n            IF (abs(d(x,y) - temp) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel loop vector\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n        \n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplyer\n        INTEGER :: errors = 0\n\n        multiplyer = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplyer\n            END DO\n            multiplyer = multiplyer + 1\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + ((a(x) + b(x)) * multiplyer)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel loop worker\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplyer\n        INTEGER :: errors = 0\n\n        multiplyer = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplyer\n            END DO\n            multiplyer = multiplyer + 1\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + (a(x) + b(x)) * multiplyer\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_private.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c\n        REAL(8),DIMENSION(10)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc enter data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT), d(1:10)) \n        !$acc parallel num_gangs(10) private(c(1:LOOPCOUNT))\n          !$acc loop gang\n          DO x = 1, 10\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(y) = a((x - 1) * LOOPCOUNT + y) + b((x - 1) * LOOPCOUNT + y)\n            END DO\n            !$acc loop seq\n            DO y = 1, LOOPCOUNT\n              d(x) = d(x) + c(y)\n            END DO\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(d(1:10)) delete(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT))\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - d(x + 1)) .gt. 2 * PRECISION * LOOPCOUNT) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_reduction.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: results = 0\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel reduction(+:results)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              results = results + a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          results = results - a(x)\n        END DO\n        IF (abs(results) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_scalar_default_firstprivate.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(1):: random\n        INTEGER :: errors = 0\n        REAL(8) :: scalar\n        REAL(8) :: scalar_copy\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        scalar = random(1)\n        scalar_copy = scalar\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x) + scalar\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - (a(x) + scalar_copy)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (abs(scalar_copy - scalar) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_switch.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a\n        REAL(8),DIMENSION(LOOPCOUNT):: b, c, randoms!Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(randoms)\n        a = floor(randoms * 3)\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            SELECT CASE (a(x))\n              CASE (0)\n                c(x) = b(x) * b(x)\n              CASE (1)\n                c(x) = b(x) / b(x)\n              CASE (2)\n                c(x) = b(x) / 2\n            END SELECT\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          SELECT CASE (a(x))\n            CASE (0)\n              IF (abs(c(x) - (b(x) * b(x))) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            CASE (1)\n              IF (abs(c(x) - (b(x) / b(x))) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            CASE (2)\n              IF (abs(c(x) - (b(x) / 2)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n          END SELECT\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        !$acc update device(a(1:LOOPCOUNT)) async(1)\n        !$acc parallel present(a(1:LOOPCOUNT)) wait(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = a(x) + 1\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (b(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_while_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10, LOOPCOUNT):: a !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n \n        !$acc data copy(a(1:10, 1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, 10\n              avg = 0.0\n              DO WHILE (avg - 1000 .lt. PRECISION * LOOPCOUNT)\n                avg = 0.0\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(x, y) = a(x, y) * 1.5\n                END DO\n                !$acc loop reduction(+:avg)\n                DO y = 1, LOOPCOUNT\n                  avg = avg + (a(x, y) / LOOPCOUNT)\n                END DO\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, 10\n          avg = 0.0\n          DO y = 1, LOOPCOUNT\n            avg = avg + (a(x, y) / LOOPCOUNT)\n          END DO\n          IF (avg < 1000 .OR. avg > 1600) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, i_a, i_b, i_c, i_d, i_e, i_f, i_g, i_h, i_i, i_j !Iterators\n  INTEGER, PARAMETER :: PRIVATE_LOOPCOUNT = 1024\n  REAL(8),DIMENSION(PRIVATE_LOOPCOUNT):: a, b, c !Data\n  INTEGER :: errors\n  errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:PRIVATE_LOOPCOUNT), b(1:PRIVATE_LOOPCOUNT)) copy(c(1:PRIVATE_LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO i_a = 0, 1\n        !$acc loop\n        DO i_b = 0, 1\n          !$acc loop\n          DO i_c = 0, 1\n            !$acc loop\n            DO i_d = 0, 1\n              !$acc loop\n              DO i_e = 0, 1\n                !$acc loop\n                DO i_f = 0, 1\n                  !$acc loop\n                  DO i_g = 0, 1\n                    !$acc loop\n                    DO i_h = 0, 1\n                      !$acc loop\n                      DO i_i = 0, 1\n                        !$acc loop\n                        DO i_j = 0, 1\n                          c(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) = &\n                          a(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) + &\n                          b(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1)\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          END DO\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, PRIVATE_LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g\n  INTEGER:: x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  CALL RANDOM_NUMBER(d)\n  CALL RANDOM_NUMBER(e)\n  f = 0\n  g = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), f(1:LOOPCOUNT), g(1:LOOPCOUNT))\n    !$acc serial async(1)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = a(x) + b(x)\n      END DO\n    !$acc end serial\n    !$acc serial async(2)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        f(x) = d(x) + e(x)\n      END DO\n    !$acc end serial\n    !$acc serial wait(1, 2) async(3)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        g(x) = c(x) + f(x)\n      END DO\n    !$acc end serial\n\n    !$acc update host(c(1:LOOPCOUNT)) async(1)\n    !$acc update host(f(1:LOOPCOUNT)) async(2)\n    !$acc update host(g(1:LOOPCOUNT)) async(3)\n\n    !$acc wait(1)\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc wait(2)\n    DO x = 1, LOOPCOUNT\n      IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc wait(3)\n    DO x = 1, LOOPCOUNT\n      IF (abs(g(x) - (a(x) + b(x) + d(x) + e(x))) .gt. 4 * PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  !$acc end data\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_host\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_host = a\n\n  !$acc serial copy(a(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, N\n      a(x) = 2 * a(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, N\n    IF (abs(a(x) - (2 * a_host(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyin.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER,DIMENSION(1):: hasDevice\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n  b = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n    hasDevice(1) = 0\n  !$acc end parallel\n\n  !$acc serial copyin(a(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = 0\n    END DO\n  !$acc end serial\n\n  DO x = 1, LOOPCOUNT\n    IF (hasDevice(1) .eq. 1) THEN\n      IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    ELSE\n      IF (abs(a(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER,DIMENSION(1):: hasDevice\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc data copy(b(1:LOOPCOUNT))\n    !$acc serial copyin(a(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial copyout(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (hasDevice(1) .eq. 1) THEN\n    !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n      !$acc serial copyout(b(1:LOOPCOUNT))\n        !$acc loop\n        DO x = 1, LOOPCOUNT\n          b(x) = b(x) - a(x)\n        END DO\n      !$acc end serial\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test3()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial copyout(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = b(x) - a(x)\n      END DO\n    !$acc end serial\n    !$acc update host(b(1:LOOPCOUNT))\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x)) .gt. 2 * PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_create.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial create(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = b(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER,DIMENSION(1):: devtest\n  INTEGER:: x\n  errors = 0\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + b(x) + a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER,DIMENSION(1):: devtest\n  INTEGER:: x\n  errors = 0\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 1\n\n    !$acc enter data copyin(c(1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      c(x) = 0\n    END DO\n\n    !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n      !$acc serial\n        !$acc loop\n        DO x = 1, LOOPCOUNT\n          c(x) = c(x) + a(x) + b(x)\n        END DO\n      !$acc end serial\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      if (abs(c(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc exit data copyout(c(1:LOOPCOUNT))\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,default,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a\n  INTEGER:: x\n  errors = 0\n\n  a = 0\n\n  !$acc enter data copyin(a(1:LOOPCOUNT))\n  !$acc serial default(present)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = 1\n    END DO\n  !$acc end serial\n  !$acc exit data copyout(a(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - 1) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "default"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_firstprivate.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,firstprivate,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, d\n  REAL(8),DIMENSION(10):: c, c_copy\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  CALL RANDOM_NUMBER(c)\n  c_copy = c\n  d = 0\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copy(d(1:10, 1:LOOPCOUNT))\n    !$acc serial firstprivate(c(1:10))\n      !$acc loop gang\n      DO y = 1, LOOPCOUNT\n        !$acc loop worker\n        DO x = 1, 10\n          d(x, y) = a(x, y) + b(x, y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      IF (abs(d(x, y) - (a(x, y) + b(x, y) + c_copy(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,firstprivate,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, d\n  REAL(8),DIMENSION(10):: c, c_copy\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  d = 0\n  c = 0\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copy(d(1:10, 1:LOOPCOUNT))\n    !$acc serial firstprivate(c(1:10))\n      !$acc loop gang independent\n      DO y = 1, LOOPCOUNT\n        !$acc loop worker independent\n        DO x = 1, 10\n          c(x) = a(x, y) - b(x, y)\n        END DO\n        !$acc loop worker independent\n        DO x = 1, 10\n          d(x, y) = a(x, y) + b(x, y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      IF (abs(d(x, y) - (2 * a(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_if.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc serial if(host)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, N\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1)) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = a + b\n\n    !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial if(host) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + a(x) + b(x)\n      END DO\n    !$acc end serial\n    !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test3()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = a + b\n  \n  !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n  !$acc serial if(device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = c(x) + a(x) + b(x)\n    END DO\n  !$acc end serial\n  !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (2 * (a(x) + b(x)))) .gt. PRECISION * 2) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copy(c(1:LOOPCOUNT))\n    !$acc serial loop\n    DO x = 1, LOOPCOUNT\n      c(x) = 1\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - 1) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = b(x)\n      END DO\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d\n  INTEGER,DIMENSION(10):: error_array\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      d(x, y) = a(x, y) + b(x, y)\n    END DO\n  END DO\n\n  error_array = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10)) copy(error_array(1:10))\n    DO y = 1, 10\n      !$acc serial loop async(y)\n      DO x = 1, LOOPCOUNT\n        c(x, y) = a(x, y) + b(x, y)\n      END DO\n      !$acc serial loop async(y)\n      DO x = 1, LOOPCOUNT\n        IF (((c(x, y) - d(x, y)) .gt. PRECISION) .OR. ((d(x, y) - c(x, y)) .gt. PRECISION)) THEN\n          error_array(y) = error_array(y) + 1\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    errors = errors + error_array(x)\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_auto.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,auto,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER:: x\n  REAL(8):: temp\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n    !$acc serial loop auto\n    DO x = 1, LOOPCOUNT\n      b(x) = a(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc serial loop auto\n    DO x = 2, LOOPCOUNT\n      a(x) = a(x - 1) + a(x)\n    END DO\n  !$acc end data\n\n  temp = 0\n  DO x = 1, LOOPCOUNT\n    temp = temp + a_copy(x)\n    IF (abs(temp - a(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_gang.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop gang\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: total\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  total = 10\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(+:total)\n    DO x = 1, LOOPCOUNT\n      total = total + a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    total = total - (a(x) + b(x))\n  END DO\n\n  IF (abs(total - 10) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d\n  REAL(8):: avg, temp\n  INTEGER:: x, y\n  avg = 0\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) create(c(1:LOOPCOUNT, 1:10)) copyout(d(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(avg)\n    DO y = 1, 10\n      avg = 0\n      !$acc loop worker reduction(+:avg)\n      DO x = 1, LOOPCOUNT\n        c(x, y) = a(x, y) + b(x, y)\n        avg = avg + c(x, y)\n      END DO\n      avg = avg / LOOPCOUNT\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        d(x, y) = c(x, y) - avg\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = 0\n    DO x = 1, LOOPCOUNT\n      temp = temp + (a(x, y) + b(x, y))\n    END DO\n    temp = temp / LOOPCOUNT\n    DO x = 1, LOOPCOUNT\n      IF (abs(d(x, y) - ((a(x, y) + b(x, y)) - temp)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: c\n  REAL(8):: temp\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10), b(1:LOOPCOUNT,1:10)) copyout(c(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(+:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp + (a(x, y) + b(x, y))\n      END DO\n      c(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      c(y) = c(y) - (a(x, y) + b(x, y))\n    END DO\n    IF (abs(c(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  INTEGER:: x\n  LOGICAL,DIMENSION(LOOPCOUNT):: a\n  LOGICAL:: result, host_result\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  REAL(8):: false_margin = EXP(LOG(.5) / LOOPCOUNT)\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    IF (randoms(x) .lt. false_margin) THEN\n      a(x) = .TRUE.\n    ELSE\n      a(x) = .FALSE.\n    END IF\n  END DO\n\n  result = .TRUE.\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(.AND.:result)\n    DO x = 1, LOOPCOUNT\n      result = result .AND. a(x)\n    END DO\n  !$acc end data\n\n  host_result = .TRUE.\n  DO x = 1, LOOPCOUNT\n    host_result = host_result .AND. a(x)\n  END DO\n\n  IF (host_result .NEQV. result) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, a_copy\n  LOGICAL,DIMENSIOn(10):: has_false\n  LOGICAL:: temp\n  INTEGER:: x, y\n  errors = 0\n  false_margin = EXP(LOG(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  has_false = .FALSE.\n  a = .TRUE.\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .FALSE.\n        has_false(y) = .TRUE.\n      END IF\n    END DO\n  END DO\n  a_copy = a\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = .TRUE.\n      !$acc loop worker reduction(.AND.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .AND. a(x, y)\n      END DO\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        IF (temp) THEN\n          IF (a(x, y) .eq. 1) THEN\n            a(x, y) = .FALSE.\n          ELSE\n            a(x, y) = .TRUE.\n          END IF\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF ((has_false(y) .eqv. .TRUE.) .AND. (a(x, y) .neqv. a_copy(x, y))) THEN\n        errors = errors + 1\n      ELSEIF ((has_false(y) .eqv. .FALSE.) .AND. (a(x, y) .eqv. a_copy(x, y))) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a\n  LOGICAL,DIMENSION(10):: b, has_false\n  LOGICAL:: temp\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  REAL(8):: false_margin\n  INTEGER:: errors, x, y\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  has_false = .FALSE.\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .lt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n        has_false(y) = .TRUE.\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = .TRUE.\n      !$acc loop vector reduction(.AND.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .AND. a(x, y)\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (has_false(x) .eqv. b(x)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(N):: a\n  INTEGER:: b, host_b\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 16):: randoms\n  INTEGER:: x, y\n  INTEGER:: errors\n\n  errors = 0\n  false_margin = exp(log(.5)/LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 16\n      IF (randoms(x, y) .lt. false_margin) THEN\n        a(x) = a(x) + 2**(y - 1)\n      END IF\n    END DO\n  END DO\n\n  b = a(1)\n  host_b = a(1)\n  DO x = 2, LOOPCOUNT\n    host_b = iand(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(iand: b)\n    DO x = 1, LOOPCOUNT\n      b = iand(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, b_copy\n  INTEGER,DIMENSION(10):: c, host_c\n  INTEGER:: errors, x, y, z, temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 17):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      b(x) = INT(10 * randoms(x, y, 17))\n      DO z = 1, 16\n        IF (randoms(x, y, z) .lt. false_margin) THEN\n          a(x) = a(x) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  b_copy = b\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 1, LOOPCOUNT\n      temp = iand(temp, a(x, y))\n    END DO\n    host_c(y) = temp\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = a(1, y)\n      !$acc loop worker reduction(iand:temp)\n      DO x = 1, LOOPCOUNT\n        temp = iand(temp, a(x, y))\n      END DO\n      c(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (host_c(y) .ne. c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (b(x, y) .ne. b_copy(x, y) + c(y)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n  LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b, b_host\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 16):: randoms\n  REAL(8):: false_margin\n  INTEGER:: x, y, temp, c, z\n  INTEGER:: errors\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      DO z = 1, 16\n        IF (randoms(x, y, z) .lt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  DO y = 1, 10\n    b_host(y) = a(1, y)\n    DO x = 1, LOOPCOUNT\n      b_host(y) = iand(b_host(y), a(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(c)\n    DO y = 1, 10\n      c = a(1, y)\n      !$acc loop vector reduction(iand:c)\n      DO x = 1, LOOPCOUNT\n        c = iand(c, a(x, y))\n      END DO\n      b(y) = c\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (b(x) .ne. b_host(x)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, temp, x, y, b, host_b\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 16):: randoms\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 16\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x) = a(x) + 2**(y - 1)\n      END IF\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    host_b = ior(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(ior:b)\n    DO x = 1, LOOPCOUNT\n      b = ior(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x, y, z, temp\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, b_copy\n  INTEGER,DIMENSION(10):: c\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 17):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      b(x, y) = INT(randoms(x, y, 17) * 1000)\n      DO z = 1, 16\n        IF (randoms(x, y, z) .gt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z-1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  b_copy = b\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(ior:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ior(temp, a(x, y))\n      END DO\n      c(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 2, LOOPCOUNT\n      temp = ior(temp, a(x, y))\n    END DO\n    IF (temp .ne. c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (b(x, y) .ne. (b_copy(x, y) + temp)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x, y, z, temp\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 16):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 16\n        IF (randoms(x, y, z) .gt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(ior:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ior(temp, a(x, y))\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 2, LOOPCOUNT\n      temp = ior(temp, a(x, y))\n    END DO\n    IF (temp .ne. b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  INTEGER:: errors, b, host_b, x\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    a(x) = INT(randoms(x) * 100000)\n  END DO\n\n  b = 0\n  host_b = 0\n\n  DO x = 1, LOOPCOUNT\n    host_b = ieor(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(ieor:b)\n    DO x = 1, LOOPCOUNT\n      b = ieor(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, host_b\n  INTEGER,DIMENSION(10):: c, host_c\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 2):: randoms\n  INTEGER:: errors, x, y, temp\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  c = 0\n  host_c = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      b(x, y) = INT(randoms(x, y, 1) * 1000)\n      a(x, y) = INT(randoms(x, y, 2) * 1000)\n    END DO\n  END DO\n  host_b = b\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_c(y) = ieor(host_c(y), a(x, y))\n    END DO\n    DO x = 1, LOOPCOUNT\n      host_b(x, y) = host_b(x, y) + host_c(y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(ieor:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ieor(temp, a(x, y))\n      END DO\n      c(y) = temp\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (c(y) .ne. host_c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (host_b(x, y) .ne. b(x, y)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b, host_b\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors, x, y, temp\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      a(x, y) = INT(randoms(x, y) * 10000)\n    END DO\n  END DO\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_b(y) = ieor(host_b(y), a(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(ieor:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ieor(temp, a(x, y))\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (b(y) .ne. host_b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: maxval, host_max\n  INTEGER:: errors, x\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  errors = 0\n\n  DO x = 1, LOOPCOUNT\n    host_max = max(host_max, a(x) * b(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(max:maxval)\n    DO x = 1, LOOPCOUNT\n      maxval = max(maxval, a(x) * b(x))\n    END DO\n  !$acc end data\n\n  IF (abs(host_max - maxval) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c\n  REAL(8),DIMENSIOn(10):: host_maximums, maximums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  maximums = 0\n  host_maximums = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_maximums(y) = max(host_maximums(y), a(x, y) * b(x, y))\n    ENDDO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(c(1:LOOPCOUNT, 1:10), maximums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(max:temp)\n      DO x = 1, LOOPCOUNT\n        temp = max(temp, a(x, y) * b(x, y))\n      END DO\n      maximums(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x, y) = (a(x, y) * b(x, y)) / maximums(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (maximums(y) .ne. host_maximums(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x, y) - ((a(x, y) * b(x, y)) / maximums(y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: maximums, host_maximums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  host_maximums = 0\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_maximums(y) = max(host_maximums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(maximums(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(max:temp)\n      DO x = 1, LOOPCOUNT\n        temp = max(temp, a(x, y) * b(x, y))\n      END DO\n      maximums(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (abs(host_maximums(x) - maximums(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: minimum, host_minimum\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  minimum = a(1) * b(1)\n  host_minimum = minimum\n\n  DO x = 2, LOOPCOUNT\n    host_minimum = min(host_minimum, a(x) * b(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(min:minimum)\n    DO x = 1, LOOPCOUNT\n      minimum = min(minimum, a(x) * b(x))\n    END DO\n  !$acc end data\n\n  IF (abs(host_minimum - minimum) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c\n  REAL(8),DIMENSION(10):: minimums, host_minimums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  minimums = 0\n  host_minimums = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_minimums(y) = min(host_minimums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(c(1:LOOPCOUNT, 1:10), minimums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 1\n      !$acc loop reduction(min: temp)\n      DO x = 1, LOOPCOUNT\n        temp = min(temp, a(x, y) * b(x, y))\n      END DO\n      minimums(y) = temp\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x, y) = (a(x, y) * b(x, y)) / minimums(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (abs(minimums(y) - host_minimums(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x, y) - ((a(x, y) * b(x, y)) / minimums(y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: minimums, host_minimums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n  minimums = 1\n  host_minimums = 1\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_minimums(y) = min(host_minimums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(minimums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 1\n      !$acc loop vector reduction(min:temp)\n      DO x = 1, LOOPCOUNT\n        temp = min(temp, a(x, y) * b(x, y))\n      END DO\n      minimums(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (abs(host_minimums(x) - minimums(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10):: a, b\n  REAL(8):: reduced, host_reduced\n  INTEGER:: errors, x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  DO y = 1, LOOPCOUNT\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    reduced = 1\n    host_reduced = 1\n\n    DO x = 1, 10\n      host_reduced = host_reduced * (a(x) + b(x))\n    END DO\n\n    !$acc data copyin(a(1:10), b(1:10))\n      !$acc serial loop reduction(*:reduced)\n      DO x = 1, 10\n        reduced = reduced * (a(x) + b(x))\n      END DO\n    !$acc end data\n\n    IF (abs(host_reduced - reduced) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, c\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, host_totals\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n\n  host_totals = 1\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      host_totals(y) = host_totals(y) * (a(x, y) + b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copyout(c(1:10, 1:LOOPCOUNT)) copy(totals(1:LOOPCOUNT))\n    !$acc serial loop gang private(temp)\n    DO y = 1, LOOPCOUNT\n      temp = 1\n      !$acc loop worker reduction(*:temp)\n      DO x = 1, 10\n        temp = temp * (a(x, y) + b(x, y))\n      END DO\n      totals(y) = temp\n      !$acc loop worker\n      DO x = 1, 10\n        c(x, y) = (a(x, y) + b(x, y)) / totals(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    IF (abs(host_totals(y) - totals(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, 10\n      IF (c(x, y) - ((a(x, y) + b(x, y)) / totals(y)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, host_totals\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  host_totals = 1\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      host_totals(y) = host_totals(y) * (a(x, y) + b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copyout(totals(1:LOOPCOUNT))\n    !$acc serial loop private(temp)\n    DO y = 1, LOOPCOUNT\n      temp = 1\n      !$acc loop vector reduction(*:temp)\n      DO x = 1, 10\n        temp = temp * (a(x, y) + b(x, y))\n      END DO\n      totals(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    IF (abs(host_totals(y) - totals(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT):: a\n  LOGICAL:: result, host_result\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  REAL(8):: false_margin\n  INTEGER:: errors, x\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    IF (randoms(x) .gt. false_margin) THEN\n      a(x) = .TRUE.\n    ELSE\n      a(x) = .FALSE.\n    END IF\n  END DO\n\n  host_result = .FALSE.\n  result = .FALSE.\n\n  DO x = 1, LOOPCOUNT\n    host_result = host_result .OR. a(x)\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(.OR.: result)\n    DO x = 1, LOOPCOUNT\n      result = result .OR. a(x)\n    END DO\n  !$acc end data\n\n  IF (host_result .neqv. result) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, a_copy\n  LOGICAL,DIMENSION(10):: results\n  LOGICAL:: temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  a_copy = a\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = .FALSE.\n      !$acc loop worker reduction(.OR.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .OR. a(x, y)\n      END DO\n      results(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        IF (results(y)) THEN\n          IF (a(x, y)) THEN\n            a(x, y) = .FALSE.\n          ELSE\n            a(x, y) = .TRUE.\n          END IF\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = .FALSE.\n    DO x = 1, LOOPCOUNT\n      temp = temp .OR. a(x, y)\n    END DO\n    IF (temp .neqv. results(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (temp) THEN\n        IF (a(x, y) .eqv. a_copy(x, y)) THEN\n          errors = errors + 1\n        END IF\n      ELSE\n        IF (a(x, y) .neqv. a_copy(x, y)) THEN\n          errors = errors + 1\n        END IF\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a\n  LOGICAL,DIMENSION(10):: b\n  LOGICAL:: temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = .FALSE.\n      !$acc loop vector reduction(.OR.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .OR. a(x, y)\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = .FALSE.\n    DO x = 1, LOOPCOUNT\n      temp = temp .OR. a(x, y)\n    END DO\n    IF (temp .neqv. b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: temp\n  INTEGER:: errors, x\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n    !$acc serial loop seq\n    DO x = 2, LOOPCOUNT\n      b(x) = b(x - 1) + a(x)\n    END DO\n  !$acc end data\n\n  temp = 0\n  DO x = 2, LOOPCOUNT\n    temp = temp + a(x)\n    IF (abs(b(x) - temp) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,tile,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(100):: a, b, c\n  REAL(8),DIMENSION(100, 100):: d2\n  REAL(8),DIMENSION(100, 100, 100):: d3\n  INTEGER:: x, y, z\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  CALL RANDOM_NUMBER(c)\n  d2 = 0\n  d3 = 0\n\n  !$acc data copyin(a(1:100), b(1:100), c(1:100)) copyout(d2(1:100, 1:100))\n    !$acc serial loop tile(*, *)\n    DO x = 1, 100\n      DO y = 1, 100\n        DO z = 1, 100\n          d2(x, y) = d2(x, y) + (a(x) * b(y) * c(z))\n        END DO\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 100\n    DO y = 1, 100\n      DO z = 1, 100\n        d2(x, y) = d2(x, y) - (a(x) * b(y) * c(z))\n      END DO\n      IF (abs(d2(x, y)) .gt. 10*PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:100), b(1:100), c(1:100)) copyout(d3(1:100, 1:100, 1:100))\n    !$acc serial loop tile(*, *, *)\n    DO x = 1, 100\n      DO y = 1, 100\n        DO z = 1, 100\n          d3(x, y, z) = a(x) * b(y) * c(z)\n        END DO\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 100\n    DO y = 1, 100\n      DO z = 1, 100\n        IF (abs(d3(x, y, z) - (a(x) * b(y) * c(z))) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n      END DO\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop vector\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: multiplier, x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop vector\n      DO x = 1, LOOPCOUNT\n        c(x) = (a(x) + b(x)) * multiplier\n      END DO\n      multiplier = multiplier + 1\n      !$acc loop vector\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - ((a(x) + b(x)) * 3)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop worker\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: multiplier\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x) = (a(x) + b(x)) * multiplier\n      END DO\n      multiplier = multiplier + 1\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n  !$acc serial present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end serial\n  !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_private.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(LOOPCOUNT):: c\n  REAL(8),DIMENSION(10):: d\n  REAL(8):: temp\n  INTEGER:: x, y\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(d(1:10))\n    !$acc serial private(c(1:LOOPCOUNT))\n      !$acc loop gang\n      DO y = 1, 10\n        !$acc loop worker\n        DO x = 1, LOOPCOUNT\n          c(x) = a(x, y) + b(x, y)\n        END DO\n        !$acc loop seq\n        DO x = 1, LOOPCOUNT\n          d(y) = d(y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, 10\n    temp = 0\n    DO x = 1, LOOPCOUNT\n      temp = temp + (a(x, y) + b(x, y))\n    END DO\n    IF (abs(d(x) - temp) .gt. (2 * PRECISION * LOOPCOUNT)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_reduction.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a\n  REAL(8):: reduction\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc serial copyin(a(1:LOOPCOUNT)) reduction(+:reduction)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      reduction = reduction + a(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, LOOPCOUNT\n    reduction = reduction - a(x)\n  END DO\n\n  IF (abs(reduction) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_scalar_default_firstprivate.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: scalar, scalar_copy\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  scalar = 5.5\n  scalar_copy = scalar\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar_copy)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  IF (abs(scalar_copy - scalar) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_switch.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8),DIMENSION(LOOPCOUNT):: a_randoms, b, b_host, c\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a_randoms)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  b_host = b\n\n  DO x = 1, LOOPCOUNT\n    a(x) = INT(a_randoms(x) * 4)\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        SELECT CASE(a(x))\n        CASE (0)\n          c(x) = b(x) * b(x)\n        CASE (1)\n          c(x) = b(x) / b(x)\n        CASE (2)\n          b(x) = b(x) / 2\n        CASE DEFAULT\n          c(x) = a(x) + b(x)\n        END SELECT\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    SELECT CASE(a(x))\n    CASE(0)\n      IF (abs(c(x) - (b_host(x) * b_host(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE(1)\n      IF (abs(c(x) - 1) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE(2)\n      IF (abs(c(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(b(x) - (b_host(x) / 2)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE DEFAULT\n      IF (abs(c(x) - (b_host(x) + a(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END SELECT\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n\n  !$acc enter data create(a(1:LOOPCOUNT))\n  !$acc update device(a(1:LOOPCOUNT)) async(1)\n  !$acc serial present(a(1:lOOPCOUNT)) wait(1)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = a(x) + 1\n    END DO\n  !$acc end serial\n  !$acc exit data copyout(a(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (a_copy(x) + 1)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_while_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:reduction,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a\n  REAL(8):: avg\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial\n      !$acc loop\n      DO y = 1, 10\n        avg = 0\n        DO WHILE (avg .lt. 1000)\n          avg = 0\n          !$acc loop reduction(+:avg)\n          DO x = 1, LOOPCOUNT\n            a(x, y) = a(x, y) * 1.5\n            avg = avg + (a(x, y) / LOOPCOUNT)\n          END DO\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, 10\n    avg = 0\n    DO x = 1, LOOPCOUNT\n      avg = avg + (a(x, y) / LOOPCOUNT)\n    END DO\n    IF ((avg .lt. 1000) .or. (avg .gt. 1500)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "reduction",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a_host = a\n        b_host = b\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc set default_async(1)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc set default_async(2)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x) * a_host(x) + b_host(x) * b_host(x))) .gt. 4 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(:, :),ALLOCATABLE :: host_copy\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        ALLOCATE(host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT))\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          !host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT)\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            CALL RANDOM_NUMBER(a)\n            host_copy(x, :) = a\n            !$acc set device_num(x)\n            !$acc enter data copyin(a(1:LOOPCOUNT))\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            !$acc set device_num(x)\n            !$acc data present(a(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(y) = a(y) + 1\n                END DO\n              !$acc end parallel\n            !$acc end data\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            !$acc set device_num(x)\n            !$acc exit data copyout(a(1:LOOPCOUNT))\n            temp = errors\n            DO y = 1, LOOPCOUNT\n              IF (abs(a(y) - (host_copy(x, y) + 1)) .gt. PRECISION) THEN\n                PRINT*, a(y)\n                PRINT*, host_copy(x, y)\n                errors = errors + 1\n              END IF\n            END DO\n            IF (temp .ne. errors) THEN\n              PRINT*, x\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    }
                }
            },
            "set_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_num = acc_get_device_num(acc_get_device_type())\n        !$acc shutdown device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    }
                }
            },
            "shutdown_device_type_num.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(host) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(multicore) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(default) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    }
                }
            },
            "shutdown_device_type_num_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(nvidia) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "template.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel\n\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            }
        }
    ]
}
