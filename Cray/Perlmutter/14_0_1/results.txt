var jsonResults = {
    "configs": [
        {
            "CC": "",
            "CCFlags": [],
            "CC_ACC_Version": null,
            "CPP": "",
            "CPPFlags": [],
            "CPP_ACC_Version": null,
            "FC": "ftn",
            "FCFlags": [
                "-hacc,noomp"
            ],
            "FC_ACC_Version": "2.0",
            "PostCompileCommands": [],
            "PostRunCommands": [],
            "PreCompileCommands": [],
            "PreRunCommands": [],
            "build_dir": "/global/u1/j/jarmusch/OpenACCV-V/build",
            "config_id": -1,
            "config_name": "init_config.txt",
            "env": null,
            "exclude_tags": [],
            "exclude_tests": [
                "acc_testsuite.Fh",
                "acc_testsuite.h",
                "acc_testsuite_declare.h"
            ],
            "export_format": "json",
            "fast": false,
            "id": 1,
            "include_by_default": true,
            "include_tags": [],
            "include_tests": [],
            "keep_build_dir": false,
            "keep_mutated_tests": false,
            "keep_partial_results": false,
            "keep_policy": "on-error",
            "mutated_test_dir": "/global/u1/j/jarmusch/OpenACCV-V/build/mutated_tests",
            "mutators": [],
            "partial": false,
            "partial_results_dir": "/global/u1/j/jarmusch/OpenACCV-V/build/partial_results",
            "runtime_prefix": "",
            "seed": null,
            "system_name": null,
            "tag_evaluation": null,
            "test_dir": "/global/u1/j/jarmusch/OpenACCV-V/Tests",
            "timeout": 10
        }
    ],
    "runs": {
        "acc_async_test.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16538924899941776
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569092700665351
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11511576999328099
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574247801036108
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_async_test_all.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557706800522283
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543350099236704
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11524564999854192
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566161199880298
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT6 -DT7 -DT1 -DT2 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11524922600074206
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT6 -DT7 -DT2 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11610893200850114
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT6 -DT7 -DT1 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542424399522133
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT6 -DT7 -DT1 -DT2 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578706199361477
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT6 -DT7 -DT1 -DT2 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552894598571584
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT6 -DT7 -DT5 -DT1 -DT2 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578091100091115
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT6 -DT7 -DT1 -DT2 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538871600350831
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT6 -DT7 -DT2 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556714799371548
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT6 -DT7 -DT1 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553007700422313
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT6 -DT7 -DT1 -DT2 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566906599909998
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT6 -DT7 -DT1 -DT2 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570554600621108
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT6 -DT7 -DT5 -DT1 -DT2 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11576806499215309
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566713200591039
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT4 -DT5 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11585556399950292
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT4 -DT5 -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563115198805463
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -DT4 -DT5 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1167140180041315
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_with_len.F90/acc_copyout_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1157101050048368
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_with_len.F90/acc_copyout_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551831499673426
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_with_len.F90/acc_copyout_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526425599004142
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_copyout_with_len.F90/acc_copyout_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_copyout_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556156899314374
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537291599961463
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550835600064602
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571794901101384
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552240299351979
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159829499956686
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create.F90/acc_create.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11694621400965843
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11539163099951111
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 14, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 15, Column = 22 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 16, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 267 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11555323300126474
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 60, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 61, Column = 22 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 62, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 267 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11566353400121443
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 106, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 107, Column = 22 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 108, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 267 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11558298100135289
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 152, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 153, Column = 22 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 154, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 267 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11529981400235556
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11516335100168362
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete.F90/acc_delete.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11514114899910055
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete.F90/acc_delete.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11628733700490557
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete.F90/acc_delete.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558688699733466
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete.F90/acc_delete.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543986399192363
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_with_len.F90/acc_delete_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16593786599696614
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_with_len.F90/acc_delete_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526796399266459
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_with_len.F90/acc_delete_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556792000192218
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_delete_with_len.F90/acc_delete_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_delete_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11593070899834856
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_get_device_num.F90/acc_get_device_num.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530992398911621
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_get_device_num.F90/acc_get_device_num.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_device_num.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1157729849946918
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_num_devices.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_get_num_devices.F90/acc_get_num_devices.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_num_devices.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543696800072212
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_get_num_devices.F90/acc_get_num_devices.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_get_num_devices.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555762999341823
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_init.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_init.F90/acc_init.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_init.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11539494698808994
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_init.F90/acc_init.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_init.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11518577500828542
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_is_present.F90/acc_is_present.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_is_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569440500170458
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_is_present.F90/acc_is_present.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_is_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551411700202152
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_is_present_with_len.F90/acc_is_present_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_is_present_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543740899651311
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_is_present_with_len.F90/acc_is_present_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_is_present_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11605203300132416
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_on_device.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_on_device.F90/acc_on_device.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_on_device.F90",
                    "config": 1,
                    "errors": "\n\nftn-1698 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_on_device.F90, Line = 13, Column = 31 \n  Type INTEGER(kind=4) is not allowed for the \"DEVICE\" argument of intrinsic ACC_ON_DEVICE.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 75 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11526268300076481
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_on_device.F90/acc_on_device.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_on_device.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11623363199760206
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_set_device_num.F90/acc_set_device_num.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 20, Column = 15 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-324 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 20, Column = 28 \n  Assignment of a rank 1 expression to a rank 0 variable is not allowed.\n\n\nftn-281 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 22, Column = 13 \n  The left hand side of an assignment statement must be a variable or a function result.\n\n\nftn-503 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 26, Column = 41 \n  Argument mismatch:  Actual argument \"ACC_GET_DEVICE_TYPE\" is a \"PROGRAM UNIT\".  Dummy argument \"DEVICE\" is a \"DATA OBJECT\".\n\n\nftn-281 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 27, Column = 13 \n  The left hand side of an assignment statement must be a variable or a function result.\n\n\nftn-281 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 39, Column = 13 \n  The left hand side of an assignment statement must be a variable or a function result.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 99 source lines\nCray Fortran : 5 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11519281899381895
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_set_device_num.F90/acc_set_device_num.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_num.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154518969997298
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_type.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_set_device_type.F90/acc_set_device_type.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_type.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_type.F90, Line = 11, Column = 34 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 66 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1155819980049273
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_set_device_type.F90/acc_set_device_type.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_set_device_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1161395109957084
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_shutdown.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_shutdown.F90/acc_shutdown.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_shutdown.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11522778499056585
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_shutdown.F90/acc_shutdown.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_shutdown.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561247598729096
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device.F90/acc_update_device.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535184500098694
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device.F90/acc_update_device.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158461560116848
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device.F90/acc_update_device.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159627500019269
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device.F90/acc_update_device.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530077698989771
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_with_len.F90/acc_update_device_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11519785900600255
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_with_len.F90/acc_update_device_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559845900046639
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_with_len.F90/acc_update_device_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153586269938387
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_device_with_len.F90/acc_update_device_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_device_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560934100998566
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self.F90/acc_update_self.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566002800827846
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self.F90/acc_update_self.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11531889099569526
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self.F90/acc_update_self.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565728299319744
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self.F90/acc_update_self.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156453900039196
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_with_len.F90/acc_update_self_with_len.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11524219300190452
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_with_len.F90/acc_update_self_with_len.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16621370600478258
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_with_len.F90/acc_update_self_with_len.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11595955499797128
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_update_self_with_len.F90/acc_update_self_with_len.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_update_self_with_len.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564613100199495
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait.F90/acc_wait.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11520571299479343
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait.F90/acc_wait.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11539712199009955
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_all.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait_all.F90/acc_wait_all.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542205000296235
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait_all.F90/acc_wait_all.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait_all.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11603414900309872
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_all_async.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait_all_async.F90/acc_wait_all_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569400399457663
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait_all_async.F90/acc_wait_all_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait_all_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16912862900062464
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_async.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait_async.F90/acc_wait_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153684169985354
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/acc_wait_async.F90/acc_wait_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/acc_wait_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1162461570056621
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_and_x.F90/atomic_capture_assign_expr_and_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564044999249745
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_and_x.F90/atomic_capture_assign_expr_and_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550401701242663
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_divided_x.F90/atomic_capture_assign_expr_divided_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579368500679266
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_divided_x.F90/atomic_capture_assign_expr_divided_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567725200438872
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_eqv_x.F90/atomic_capture_assign_expr_eqv_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1151301380014047
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_eqv_x.F90/atomic_capture_assign_expr_eqv_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153224179870449
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_minus_x.F90/atomic_capture_assign_expr_minus_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582984500273596
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_minus_x.F90/atomic_capture_assign_expr_minus_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570382300124038
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_neqv_x.F90/atomic_capture_assign_expr_neqv_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11518194699601736
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_neqv_x.F90/atomic_capture_assign_expr_neqv_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1151783810055349
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_or_x.F90/atomic_capture_assign_expr_or_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536141199758276
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_or_x.F90/atomic_capture_assign_expr_or_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562938899442088
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_plus_x.F90/atomic_capture_assign_expr_plus_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152312729973346
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_plus_x.F90/atomic_capture_assign_expr_plus_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537268498796038
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_times_x.F90/atomic_capture_assign_expr_times_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543152800004464
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_expr_times_x.F90/atomic_capture_assign_expr_times_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11583363299723715
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_iand_expr_x.F90/atomic_capture_assign_iand_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554212000919506
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_iand_expr_x.F90/atomic_capture_assign_iand_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578699199890252
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_iand_x_expr.F90/atomic_capture_assign_iand_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534645399660803
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_iand_x_expr.F90/atomic_capture_assign_iand_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548511100409087
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ior_expr_x.F90/atomic_capture_assign_ior_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153587279986823
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ior_expr_x.F90/atomic_capture_assign_ior_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11521656399418134
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ior_x_expr.F90/atomic_capture_assign_ior_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545154699706472
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ior_x_expr.F90/atomic_capture_assign_ior_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11589400899538305
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ixor_expr_x.F90/atomic_capture_assign_ixor_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527838298934512
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ixor_expr_x.F90/atomic_capture_assign_ixor_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11511166200216394
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ixor_x_expr.F90/atomic_capture_assign_ixor_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530592700000852
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_ixor_x_expr.F90/atomic_capture_assign_ixor_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540451699693222
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_expr_list_x.F90/atomic_capture_assign_max_expr_list_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529044600320049
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_expr_list_x.F90/atomic_capture_assign_max_expr_list_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528516600083094
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_expr_x.F90/atomic_capture_assign_max_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535833700327203
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_expr_x.F90/atomic_capture_assign_max_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568977500428446
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_x_expr.F90/atomic_capture_assign_max_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526546800450888
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_x_expr.F90/atomic_capture_assign_max_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552920599933714
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_x_expr_list.F90/atomic_capture_assign_max_x_expr_list.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549119299161248
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_max_x_expr_list.F90/atomic_capture_assign_max_x_expr_list.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535549099789932
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_expr_list_x.F90/atomic_capture_assign_min_expr_list_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568524700123817
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_expr_list_x.F90/atomic_capture_assign_min_expr_list_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546493199421093
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_expr_x.F90/atomic_capture_assign_min_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1161494409898296
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_expr_x.F90/atomic_capture_assign_min_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155598149925936
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_x_expr.F90/atomic_capture_assign_min_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558959299873095
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_x_expr.F90/atomic_capture_assign_min_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11539881500357296
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_x_expr_list.F90/atomic_capture_assign_min_x_expr_list.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534162600582931
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_min_x_expr_list.F90/atomic_capture_assign_min_x_expr_list.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155469399964204
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_and_expr.F90/atomic_capture_assign_x_and_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532423099561129
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_and_expr.F90/atomic_capture_assign_x_and_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540799199428875
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_divided_expr.F90/atomic_capture_assign_x_divided_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11520866899809334
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_divided_expr.F90/atomic_capture_assign_x_divided_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11590648200944997
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_eqv_expr.F90/atomic_capture_assign_x_eqv_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525470700871665
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_eqv_expr.F90/atomic_capture_assign_x_eqv_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153595089999726
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_minus_expr.F90/atomic_capture_assign_x_minus_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545892199501395
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_minus_expr.F90/atomic_capture_assign_x_minus_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563210398890078
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_neqv_expr.F90/atomic_capture_assign_x_neqv_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153504609974334
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_neqv_expr.F90/atomic_capture_assign_x_neqv_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572829900251236
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_or_expr.F90/atomic_capture_assign_x_or_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11513583999476396
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_or_expr.F90/atomic_capture_assign_x_or_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11590698300278746
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_plus_expr.F90/atomic_capture_assign_x_plus_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154134829994291
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_plus_expr.F90/atomic_capture_assign_x_plus_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549649300286546
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_times_expr.F90/atomic_capture_assign_x_times_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563040100736544
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_assign_x_times_expr.F90/atomic_capture_assign_x_times_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565999800222926
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_and_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_and_x_assign.F90/atomic_capture_expr_and_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11585749799269252
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_and_x_assign.F90/atomic_capture_expr_and_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553994700079784
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_divided_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_divided_x_assign.F90/atomic_capture_expr_divided_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541989599936642
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_divided_x_assign.F90/atomic_capture_expr_divided_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536670400528237
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_eqv_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_eqv_x_assign.F90/atomic_capture_expr_eqv_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153919019998284
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_eqv_x_assign.F90/atomic_capture_expr_eqv_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11594927500118501
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_minus_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_minus_x_assign.F90/atomic_capture_expr_minus_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527733199181966
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_minus_x_assign.F90/atomic_capture_expr_minus_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158053370018024
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_neqv_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_neqv_x_assign.F90/atomic_capture_expr_neqv_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11626038400572725
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_neqv_x_assign.F90/atomic_capture_expr_neqv_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11521452000306454
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_or_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_or_x_assign.F90/atomic_capture_expr_or_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11524624199955724
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_or_x_assign.F90/atomic_capture_expr_or_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562669400882442
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_plus_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_plus_x_assign.F90/atomic_capture_expr_plus_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556409401237033
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_plus_x_assign.F90/atomic_capture_expr_plus_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565297401102725
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_times_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_times_x_assign.F90/atomic_capture_expr_times_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534321799990721
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_expr_times_x_assign.F90/atomic_capture_expr_times_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11510101199382916
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_iand_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_iand_expr_x_assign.F90/atomic_capture_iand_expr_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1151594030088745
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_iand_expr_x_assign.F90/atomic_capture_iand_expr_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1656409439892741
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_iand_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_iand_x_expr_assign.F90/atomic_capture_iand_x_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537670299003366
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_iand_x_expr_assign.F90/atomic_capture_iand_x_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11587098399468232
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ior_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ior_expr_x_assign.F90/atomic_capture_ior_expr_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11602772600599565
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ior_expr_x_assign.F90/atomic_capture_ior_expr_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574199600727297
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ior_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ior_x_expr_assign.F90/atomic_capture_ior_x_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558182799490169
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ior_x_expr_assign.F90/atomic_capture_ior_x_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115331145003438
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ixor_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ixor_expr_x_assign.F90/atomic_capture_ixor_expr_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11533598399546463
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ixor_expr_x_assign.F90/atomic_capture_ixor_expr_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570053600007668
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ixor_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ixor_x_expr_assign.F90/atomic_capture_ixor_x_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541396401298698
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_ixor_x_expr_assign.F90/atomic_capture_ixor_x_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156205520092044
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_expr_list_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_expr_list_x_assign.F90/atomic_capture_max_expr_list_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530068599677179
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_expr_list_x_assign.F90/atomic_capture_max_expr_list_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115732266989653
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_expr_x_assign.F90/atomic_capture_max_expr_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537738399056252
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_expr_x_assign.F90/atomic_capture_max_expr_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152768509928137
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_x_expr_assign.F90/atomic_capture_max_x_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11502336199919228
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_x_expr_assign.F90/atomic_capture_max_x_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570988400490023
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_x_expr_list_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_x_expr_list_assign.F90/atomic_capture_max_x_expr_list_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527761199977249
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_max_x_expr_list_assign.F90/atomic_capture_max_x_expr_list_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545393099368084
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_expr_list_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_expr_list_x_assign.F90/atomic_capture_min_expr_list_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570445299730636
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_expr_list_x_assign.F90/atomic_capture_min_expr_list_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11609872200642712
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_expr_x_assign.F90/atomic_capture_min_expr_x_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550513000111096
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_expr_x_assign.F90/atomic_capture_min_expr_x_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11539742299646605
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_x_expr_assign.F90/atomic_capture_min_x_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579478699422907
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_x_expr_assign.F90/atomic_capture_min_x_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551469800178893
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_x_expr_list_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_x_expr_list_assign.F90/atomic_capture_min_x_expr_list_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11611936200642958
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_min_x_expr_list_assign.F90/atomic_capture_min_x_expr_list_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11608550700475462
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_and_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_and_expr_assign.F90/atomic_capture_x_and_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525978799909353
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_and_expr_assign.F90/atomic_capture_x_and_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11588542199751828
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_divided_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_divided_expr_assign.F90/atomic_capture_x_divided_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571562400786206
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_divided_expr_assign.F90/atomic_capture_x_divided_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562398899695836
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_eqv_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_eqv_expr_assign.F90/atomic_capture_x_eqv_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540713100112043
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_eqv_expr_assign.F90/atomic_capture_x_eqv_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574494199885521
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_minus_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_minus_expr_assign.F90/atomic_capture_x_minus_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546595400432125
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_minus_expr_assign.F90/atomic_capture_x_minus_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156771310052136
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_neqv_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_neqv_expr_assign.F90/atomic_capture_x_neqv_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545443200157024
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_neqv_expr_assign.F90/atomic_capture_x_neqv_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11584432299423497
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_or_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_or_expr_assign.F90/atomic_capture_x_or_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525523799355142
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_or_expr_assign.F90/atomic_capture_x_or_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542622798879165
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_plus_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_plus_expr_assign.F90/atomic_capture_x_plus_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536186400917359
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_plus_expr_assign.F90/atomic_capture_x_plus_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16577522300940473
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_times_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_times_expr_assign.F90/atomic_capture_x_times_expr_assign.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535576199821662
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_capture_x_times_expr_assign.F90/atomic_capture_x_times_expr_assign.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159404180070851
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_and_x.F90/atomic_expr_and_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536294600227848
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_and_x.F90/atomic_expr_and_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11608151999826077
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_and_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_and_x_end.F90/atomic_expr_and_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1658586230041692
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_and_x_end.F90/atomic_expr_and_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_and_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563011001271661
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_divided_x.F90/atomic_expr_divided_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534472099447157
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_divided_x.F90/atomic_expr_divided_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1157837669888977
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_divided_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_divided_x_end.F90/atomic_expr_divided_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156312930106651
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_divided_x_end.F90/atomic_expr_divided_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154091439966578
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_eqv_x.F90/atomic_expr_eqv_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155836200050544
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_eqv_x.F90/atomic_expr_eqv_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553555799764581
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_eqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_eqv_x_end.F90/atomic_expr_eqv_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528016600641422
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_eqv_x_end.F90/atomic_expr_eqv_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11516399300307967
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_minus_x.F90/atomic_expr_minus_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11514424500637688
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_minus_x.F90/atomic_expr_minus_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11620278299960773
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_minus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_minus_x_end.F90/atomic_expr_minus_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534222599584609
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_minus_x_end.F90/atomic_expr_minus_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546967100002803
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x.F90/atomic_expr_neqv_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-303 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x.F90, Line = 52, Column = 36 \n  Data type LOGICAL is not allowed with LOGICAL for the operation \"ne\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0036 seconds\nCray Fortran : 104 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1153816019941587
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x.F90/atomic_expr_neqv_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579667200567201
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_neqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x_end.F90/atomic_expr_neqv_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-303 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90, Line = 53, Column = 36 \n  Data type LOGICAL is not allowed with LOGICAL for the operation \"ne\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0035 seconds\nCray Fortran : 105 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11526893399422988
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_neqv_x_end.F90/atomic_expr_neqv_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11576837601023726
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_or_x.F90/atomic_expr_or_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11524319599266164
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_or_x.F90/atomic_expr_or_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11594107899873052
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_or_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_or_x_end.F90/atomic_expr_or_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530664800375234
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_or_x_end.F90/atomic_expr_or_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_or_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546704600914381
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_plus_x.F90/atomic_expr_plus_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11583140799484681
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_plus_x.F90/atomic_expr_plus_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159184049902251
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_plus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_plus_x_end.F90/atomic_expr_plus_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544189699634444
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_plus_x_end.F90/atomic_expr_plus_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579019900818821
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_times_x.F90/atomic_expr_times_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11603655300859828
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_times_x.F90/atomic_expr_times_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579858500044793
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_times_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_times_x_end.F90/atomic_expr_times_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542217999522109
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_expr_times_x_end.F90/atomic_expr_times_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_expr_times_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1151219419989502
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_expr_x.F90/atomic_iand_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11533066400443204
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_expr_x.F90/atomic_iand_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11616653300006874
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_expr_x_end.F90/atomic_iand_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579818399331998
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_expr_x_end.F90/atomic_iand_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528081800497603
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_x_expr.F90/atomic_iand_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551100100041367
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_x_expr.F90/atomic_iand_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574117399868555
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_x_expr_end.F90/atomic_iand_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11588439099432435
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_iand_x_expr_end.F90/atomic_iand_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567527599981986
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_expr_x.F90/atomic_ior_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16528148399083875
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_expr_x.F90/atomic_ior_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551619999227114
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_expr_x_end.F90/atomic_ior_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11608855199301615
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_expr_x_end.F90/atomic_ior_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11589229400851764
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_x_expr.F90/atomic_ior_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11512309299723711
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_x_expr.F90/atomic_ior_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553665899555199
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_x_expr_end.F90/atomic_ior_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550737200013828
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ior_x_expr_end.F90/atomic_ior_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548497900366783
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_expr_x.F90/atomic_ixor_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534813599428162
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_expr_x.F90/atomic_ixor_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11653350898995996
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_expr_x_end.F90/atomic_ixor_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536192199855577
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_expr_x_end.F90/atomic_ixor_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525724100647494
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_x_expr.F90/atomic_ixor_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154375979967881
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_x_expr.F90/atomic_ixor_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156291869992856
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_x_expr_end.F90/atomic_ixor_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155711150058778
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_ixor_x_expr_end.F90/atomic_ixor_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538102899794467
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_list_x.F90/atomic_max_expr_list_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11512423399835825
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_list_x.F90/atomic_max_expr_list_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532117400201969
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_list_x_end.F90/atomic_max_expr_list_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560759499843698
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_list_x_end.F90/atomic_max_expr_list_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11605788199813105
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_x.F90/atomic_max_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545701599970926
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_x.F90/atomic_max_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564645999169443
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_x_end.F90/atomic_max_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152675899938913
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_expr_x_end.F90/atomic_max_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11520074200234376
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr.F90/atomic_max_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11521476898633409
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr.F90/atomic_max_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573788600799162
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr_end.F90/atomic_max_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156336959975306
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr_end.F90/atomic_max_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545887900865637
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr_list.F90/atomic_max_x_expr_list.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152163219958311
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr_list.F90/atomic_max_x_expr_list.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154868220037315
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr_list_end.F90/atomic_max_x_expr_list_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554561600496527
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_max_x_expr_list_end.F90/atomic_max_x_expr_list_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582105699926615
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_list_x.F90/atomic_min_expr_list_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543459299718961
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_list_x.F90/atomic_min_expr_list_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156381339969812
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_list_x_end.F90/atomic_min_expr_list_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568835101206787
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_list_x_end.F90/atomic_min_expr_list_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546042200643569
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_x.F90/atomic_min_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537621000024956
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_x.F90/atomic_min_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572736599191558
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_x_end.F90/atomic_min_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535951800760813
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_expr_x_end.F90/atomic_min_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526675899222028
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr.F90/atomic_min_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11596810999617446
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr.F90/atomic_min_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154660519969184
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr_end.F90/atomic_min_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545806699723471
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr_end.F90/atomic_min_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553941399324685
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr_list.F90/atomic_min_x_expr_list.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156176350050373
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr_list.F90/atomic_min_x_expr_list.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568289999559056
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr_list_end.F90/atomic_min_x_expr_list_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536364600760862
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_min_x_expr_list_end.F90/atomic_min_x_expr_list_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544093499833252
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_and_x.F90/atomic_update_expr_and_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153221660060808
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_and_x.F90/atomic_update_expr_and_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573576199589297
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_and_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_and_x_end.F90/atomic_update_expr_and_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579413499566726
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_and_x_end.F90/atomic_update_expr_and_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542969300353434
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x.F90/atomic_update_expr_divided_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545469099655747
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x.F90/atomic_update_expr_divided_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547628299740609
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_divided_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x_end.F90/atomic_update_expr_divided_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547131299448665
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_divided_x_end.F90/atomic_update_expr_divided_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582205799641088
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_eqv_x.F90/atomic_update_expr_eqv_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537714200676419
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_eqv_x.F90/atomic_update_expr_eqv_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559583299094811
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_eqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_eqv_x_end.F90/atomic_update_expr_eqv_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11531885799195152
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_eqv_x_end.F90/atomic_update_expr_eqv_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528084700694308
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x.F90/atomic_update_expr_minus_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155378420080524
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x.F90/atomic_update_expr_minus_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11599199600459542
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_minus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x_end.F90/atomic_update_expr_minus_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532048300432507
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_minus_x_end.F90/atomic_update_expr_minus_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1151790009898832
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_neqv_x.F90/atomic_update_expr_neqv_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547787499148399
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_neqv_x.F90/atomic_update_expr_neqv_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551771200902294
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_neqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_neqv_x_end.F90/atomic_update_expr_neqv_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535154200100806
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_neqv_x_end.F90/atomic_update_expr_neqv_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11518102399713825
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_or_x.F90/atomic_update_expr_or_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11519102301099338
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_or_x.F90/atomic_update_expr_or_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11585567299334798
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_or_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_or_x_end.F90/atomic_update_expr_or_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552888399455696
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_or_x_end.F90/atomic_update_expr_or_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11533783598861191
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_plus_x.F90/atomic_update_expr_plus_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556203800137155
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_plus_x.F90/atomic_update_expr_plus_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115631159991608
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_plus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_plus_x_end.F90/atomic_update_expr_plus_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11513244100206066
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_plus_x_end.F90/atomic_update_expr_plus_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540780100040138
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_times_x.F90/atomic_update_expr_times_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11533089300792199
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_times_x.F90/atomic_update_expr_times_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11634082799719181
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_times_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_times_x_end.F90/atomic_update_expr_times_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554426400107332
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_expr_times_x_end.F90/atomic_update_expr_times_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534079199191183
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_expr_x.F90/atomic_update_iand_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542262900911737
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_expr_x.F90/atomic_update_iand_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541170798591338
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_expr_x_end.F90/atomic_update_iand_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11519733500608709
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_expr_x_end.F90/atomic_update_iand_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564370499399956
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_x_expr.F90/atomic_update_iand_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11576471800799482
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_x_expr.F90/atomic_update_iand_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578374399687164
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_x_expr_end.F90/atomic_update_iand_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563019899767824
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_iand_x_expr_end.F90/atomic_update_iand_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1151779079955304
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_expr_x.F90/atomic_update_ior_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11613141499401536
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_expr_x.F90/atomic_update_ior_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554832100227941
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_expr_x_end.F90/atomic_update_ior_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11521199400885962
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_expr_x_end.F90/atomic_update_ior_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557762800657656
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_x_expr.F90/atomic_update_ior_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11530395000590943
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_x_expr.F90/atomic_update_ior_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554812100075651
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_x_expr_end.F90/atomic_update_ior_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541925299388822
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ior_x_expr_end.F90/atomic_update_ior_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567912300233729
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_expr_x.F90/atomic_update_ixor_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115402591007296
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_expr_x.F90/atomic_update_ixor_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11618914498831145
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_expr_x_end.F90/atomic_update_ixor_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11531114399258513
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_expr_x_end.F90/atomic_update_ixor_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548435900476761
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_x_expr.F90/atomic_update_ixor_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154322479997063
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_x_expr.F90/atomic_update_ixor_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155529200041201
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_x_expr_end.F90/atomic_update_ixor_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541302100522444
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_ixor_x_expr_end.F90/atomic_update_ixor_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549906599975657
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_list_x.F90/atomic_update_max_expr_list_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11587830699863844
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_list_x.F90/atomic_update_max_expr_list_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564198099949863
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_list_x_end.F90/atomic_update_max_expr_list_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11521571000048425
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_list_x_end.F90/atomic_update_max_expr_list_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550626999814995
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_x.F90/atomic_update_max_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563551900326274
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_x.F90/atomic_update_max_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11575889599043876
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_x_end.F90/atomic_update_max_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156527020066278
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_expr_x_end.F90/atomic_update_max_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568601599719841
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr.F90/atomic_update_max_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554690900084097
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr.F90/atomic_update_max_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11509923600533511
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_end.F90/atomic_update_max_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557854899729136
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_end.F90/atomic_update_max_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548081200453453
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_list.F90/atomic_update_max_x_expr_list.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529178700584453
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_list.F90/atomic_update_max_x_expr_list.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562065000180155
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_list_end.F90/atomic_update_max_x_expr_list_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547723399417009
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_max_x_expr_list_end.F90/atomic_update_max_x_expr_list_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563503798970487
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_list_x.F90/atomic_update_min_expr_list_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11576158199750353
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_list_x.F90/atomic_update_min_expr_list_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541704800038133
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_list_x_end.F90/atomic_update_min_expr_list_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152223130047787
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_list_x_end.F90/atomic_update_min_expr_list_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557144600374158
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_x.F90/atomic_update_min_expr_x.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562228400725871
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_x.F90/atomic_update_min_expr_x.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570320000464562
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_x_end.F90/atomic_update_min_expr_x_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11517686599108856
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_expr_x_end.F90/atomic_update_min_expr_x_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570347000088077
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr.F90/atomic_update_min_x_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578790200292133
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr.F90/atomic_update_min_x_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573694400431123
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_end.F90/atomic_update_min_x_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542036400351208
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_end.F90/atomic_update_min_x_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548685299931094
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_list.F90/atomic_update_min_x_expr_list.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11581124800432008
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_list.F90/atomic_update_min_x_expr_list.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579112800245639
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_list_end.F90/atomic_update_min_x_expr_list_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11533767500077374
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_min_x_expr_list_end.F90/atomic_update_min_x_expr_list_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559727499843575
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_and_expr.F90/atomic_update_x_and_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563574000319932
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_and_expr.F90/atomic_update_x_and_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578609999560285
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_and_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_and_expr_end.F90/atomic_update_x_and_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11521780501061585
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_and_expr_end.F90/atomic_update_x_and_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557567400450353
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_divided_expr.F90/atomic_update_x_divided_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547972999687772
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_divided_expr.F90/atomic_update_x_divided_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546535200614017
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_divided_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_divided_expr_end.F90/atomic_update_x_divided_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545070400461555
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_divided_expr_end.F90/atomic_update_x_divided_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158140730112791
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_eqv_expr.F90/atomic_update_x_eqv_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568384199927095
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_eqv_expr.F90/atomic_update_x_eqv_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551318298734259
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_eqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_eqv_expr_end.F90/atomic_update_x_eqv_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551329299982172
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_eqv_expr_end.F90/atomic_update_x_eqv_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562167199735995
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_minus_expr.F90/atomic_update_x_minus_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556042400479782
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_minus_expr.F90/atomic_update_x_minus_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542917099723127
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_minus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_minus_expr_end.F90/atomic_update_x_minus_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571178599842824
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_minus_expr_end.F90/atomic_update_x_minus_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560214500059374
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_neqv_expr.F90/atomic_update_x_neqv_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558556198724546
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_neqv_expr.F90/atomic_update_x_neqv_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525204000645317
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_neqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_neqv_expr_end.F90/atomic_update_x_neqv_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534691399720032
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_neqv_expr_end.F90/atomic_update_x_neqv_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552644000039436
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_or_expr.F90/atomic_update_x_or_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11588194301293697
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_or_expr.F90/atomic_update_x_or_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152842229930684
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_or_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_or_expr_end.F90/atomic_update_x_or_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11576286501076538
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_or_expr_end.F90/atomic_update_x_or_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11594284100283403
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_plus_expr.F90/atomic_update_x_plus_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542873199505266
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_plus_expr.F90/atomic_update_x_plus_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11612156500632409
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_plus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_plus_expr_end.F90/atomic_update_x_plus_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11539078799251001
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_plus_expr_end.F90/atomic_update_x_plus_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11623454300570302
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_times_expr.F90/atomic_update_x_times_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542833100247663
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_times_expr.F90/atomic_update_x_times_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551475699525326
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_times_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_times_expr_end.F90/atomic_update_x_times_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582259999704547
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_update_x_times_expr_end.F90/atomic_update_x_times_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11614607299270574
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_and_expr.F90/atomic_x_and_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16635505099839065
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_and_expr.F90/atomic_x_and_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152733420021832
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_and_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_and_expr_end.F90/atomic_x_and_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1151920950069325
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_and_expr_end.F90/atomic_x_and_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_and_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566859199956525
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_divided_expr.F90/atomic_x_divided_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11573051099549048
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_divided_expr.F90/atomic_x_divided_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154392909957096
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_divided_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_divided_expr_end.F90/atomic_x_divided_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572611398878507
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_divided_expr_end.F90/atomic_x_divided_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560551100410521
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_eqv_expr.F90/atomic_x_eqv_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1157076890085591
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_eqv_expr.F90/atomic_x_eqv_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564252201060299
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_eqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_eqv_expr_end.F90/atomic_x_eqv_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115468226998928
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_eqv_expr_end.F90/atomic_x_eqv_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152334950020304
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_minus_expr.F90/atomic_x_minus_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156387450027978
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_minus_expr.F90/atomic_x_minus_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560735500825103
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_minus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_minus_expr_end.F90/atomic_x_minus_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11523998700431548
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_minus_expr_end.F90/atomic_x_minus_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11594049600535072
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_neqv_expr.F90/atomic_x_neqv_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553820100380108
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_neqv_expr.F90/atomic_x_neqv_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153817309968872
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_neqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_neqv_expr_end.F90/atomic_x_neqv_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11518780700862408
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_neqv_expr_end.F90/atomic_x_neqv_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561406799592078
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_or_expr.F90/atomic_x_or_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529853100364562
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_or_expr.F90/atomic_x_or_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582238800474443
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_or_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_or_expr_end.F90/atomic_x_or_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11521574099606369
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_or_expr_end.F90/atomic_x_or_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_or_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554840199823957
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_plus_expr.F90/atomic_x_plus_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540530700585805
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_plus_expr.F90/atomic_x_plus_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11601222498575225
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_plus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_plus_expr_end.F90/atomic_x_plus_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154842469986761
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_plus_expr_end.F90/atomic_x_plus_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572432999673765
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_times_expr.F90/atomic_x_times_expr.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11516791798931081
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_times_expr.F90/atomic_x_times_expr.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153380269970512
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_times_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_times_expr_end.F90/atomic_x_times_expr_end.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546073199133389
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/atomic_x_times_expr_end.F90/atomic_x_times_expr_end.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/atomic_x_times_expr_end.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11603791400557384
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copy_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copy_no_lower_bound.F90/data_copy_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534141300944611
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copy_no_lower_bound.F90/data_copy_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copy_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574112299422268
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyin_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyin_no_lower_bound.F90/data_copyin_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11607446400739718
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyin_no_lower_bound.F90/data_copyin_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554640700342134
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyout_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_no_lower_bound.F90/data_copyout_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1161210040008882
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_no_lower_bound.F90/data_copyout_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548611099715345
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyout_reference_counts.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535607099358458
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556407200987451
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559904900786933
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.16560249199392274
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547666200203821
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155613959999755
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540862199035473
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1161857789993519
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_create.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156173039926216
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11598874899209477
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578533799911384
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578555700543802
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561225399782415
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540125800820533
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546846698911395
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create.F90/data_create.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11612847799551673
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_create_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create_no_lower_bound.F90/data_create_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528557499696035
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_create_no_lower_bound.F90/data_create_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_create_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11523138100164942
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_present_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/data_present_no_lower_bound.F90/data_present_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547715400229208
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_present_no_lower_bound.F90/data_present_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_present_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556958100118209
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_with_changing_subscript.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/data_with_changing_subscript.F90/data_with_changing_subscript.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553248000564054
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_with_changing_subscript.F90/data_with_changing_subscript.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_with_changing_subscript.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11580019599932712
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_with_derived_type.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/data_with_derived_type.F90/data_with_derived_type.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548712299554609
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/data_with_derived_type.F90/data_with_derived_type.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/data_with_derived_type.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569570501160342
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0027 seconds\nCray Fortran : 246 source lines\nCray Fortran : 1 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11527418300101999
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 15, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 32, Column = 69 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"FIXED_SIZE_ARRAY\".\n\n\nftn-511 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 36, Column = 23 \n  \"FIXED_SIZE_ARRAY\" is scalar, but it is being used as an array or function reference.\n\n\nftn-511 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 42, Column = 28 \n  \"FIXED_SIZE_ARRAY\" is scalar, but it is being used as an array or function reference.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0259 seconds\nCray Fortran : 255 source lines\nCray Fortran : 5 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11595318099716678
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 58, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 74, Column = 69 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SCALAR\".\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 77, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 78, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 78, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 84, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 84, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0081 seconds\nCray Fortran : 255 source lines\nCray Fortran : 8 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11618714100040961
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 100, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 119, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 126, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 126, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0075 seconds\nCray Fortran : 255 source lines\nCray Fortran : 5 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11576079999213107
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 142, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 161, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 162, Column = 9 \n  Program unit \"MULTIPLYDATA\" is defined as a FUNCTION at line 2 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 168, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 168, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0076 seconds\nCray Fortran : 255 source lines\nCray Fortran : 6 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11541427299380302
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0028 seconds\nCray Fortran : 246 source lines\nCray Fortran : 1 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1155792509962339
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_copyin_mod.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_copyin_mod.F90/declare_copyin_mod.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_copyin_mod.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557990200526547
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_create.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0027 seconds\nCray Fortran : 251 source lines\nCray Fortran : 4 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11534570099320263
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 33, Column = 69 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"FIXED_SIZE_ARRAY\".\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 36, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-724 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 37, Column = 25 \n  Unknown statement.  Expected assignment statement but found \"(\" instead of \"=\" or \"=>\".\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 43, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 43, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-557 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 43, Column = 23 \n  \"FIXED_SIZE_ARRAY\" has been used as a variable, therefore it must not be declared or used as a procedure.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 49, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 49, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 260 source lines\nCray Fortran : 12 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11571135401027277
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 79, Column = 3 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SCALAR\".\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 84, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 85, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 85, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 91, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 91, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 260 source lines\nCray Fortran : 10 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11577426599978935
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-1725 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 121, Column = 15 \n  Unexpected syntax while parsing the DIRECTIVE statement : \"HOST, DEVICE, IF and/or ASYNC\" was expected but found \"EOS\".\n\n\nftn-113 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 125, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 132, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 132, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 260 source lines\nCray Fortran : 8 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11599393899086863
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 166, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 167, Column = 9 \n  Program unit \"MULTIPLYDATA\" is defined as a FUNCTION at line 6 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 173, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 173, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 260 source lines\nCray Fortran : 8 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11558835800678935
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_create.F90/declare_create.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0028 seconds\nCray Fortran : 251 source lines\nCray Fortran : 4 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11521348700625822
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0028 seconds\nCray Fortran : 289 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11570113600464538
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 44, Column = 7 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11591938600759022
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 93, Column = 9 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0061 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11549262401240412
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 145, Column = 11 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11589711300621275
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 200, Column = 11 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11563892599951942
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0029 seconds\nCray Fortran : 289 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11550652000005357
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0102 seconds\nCray Fortran : 288 source lines\nCray Fortran : 5 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11558773700380698
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0088 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11540152800444048
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0086 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11586999100109097
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0087 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11604716200963594
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0087 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1157673420093488
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0090 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11539499599894043
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0083 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11544363900611643
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0082 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11523816401313525
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0093 seconds\nCray Fortran : 247 source lines\nCray Fortran : 4 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11591392500849906
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0082 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11557316899416037
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0081 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11592188000213355
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0079 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11567345199000556
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0082 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11535315599758178
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0077 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11559839799883775
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0075 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11544285899435636
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0079 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11558562300342601
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_create.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0115 seconds\nCray Fortran : 276 source lines\nCray Fortran : 4 errors, 12 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1154667039954802
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0096 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11558770699775778
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0090 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11545494200254325
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0090 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11545187600131612
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0096 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11540144799801055
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0095 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.115613296002266
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0094 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11536082900420297
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0094 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11590691200399306
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_present.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 22 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 28 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0083 seconds\nCray Fortran : 188 source lines\nCray Fortran : 2 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11552035699423868
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 179 source lines\nCray Fortran : 2 errors, 4 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11550651099241804
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 22 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 28 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0061 seconds\nCray Fortran : 179 source lines\nCray Fortran : 2 errors, 4 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11541728899464943
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 179 source lines\nCray Fortran : 2 errors, 4 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11529456199787091
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_copyin_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_copyin_no_lower_bound.F90/enter_data_copyin_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11616820401104633
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_copyin_no_lower_bound.F90/enter_data_copyin_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572224600240588
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_create.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158971529948758
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.165659341000719
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153290690126596
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545615398790687
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582845100201666
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11575860599987209
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556462199951056
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11522903600416612
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_create_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create_no_lower_bound.F90/enter_data_create_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540569699718617
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_create_no_lower_bound.F90/enter_data_create_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566796099941712
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_if.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525722999067511
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538953600393143
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532507199444808
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571365900454111
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562609100656118
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569962299836334
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT5 -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/j/jarmusch/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538799200206995
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data.F90/exit_data.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563470799592324
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data.F90/exit_data.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11577587999636307
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data.F90/exit_data.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11593319299572613
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data.F90/exit_data.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11519102299644146
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_copyout_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_no_lower_bound.F90/exit_data_copyout_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11522522899031173
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_no_lower_bound.F90/exit_data_copyout_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556473400560208
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_copyout_reference_counts.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547707401041407
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562638099712785
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11590824500308372
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536292399978265
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579698999412358
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11523957700410392
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571321899828035
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156557180074742
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_delete_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_delete_no_lower_bound.F90/exit_data_delete_no_lower_bound.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535518898745067
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_delete_no_lower_bound.F90/exit_data_delete_no_lower_bound.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561474000336602
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_delete_no_lower_bound.F90/exit_data_delete_no_lower_bound.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565194200375117
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_delete_no_lower_bound.F90/exit_data_delete_no_lower_bound.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11598285801301245
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_finalize.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_finalize.F90/exit_data_finalize.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579702100425493
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/exit_data_finalize.F90/exit_data_finalize.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/exit_data_finalize.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11576076000346802
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_async.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_async.F90/kernels_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525289200653788
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_async.F90/kernels_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565501701261383
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561463899852242
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557086399989203
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550760200771037
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1151922650024062
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549632099922746
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549240400199778
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11533062200760469
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11556056501285639
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535810500208754
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11583870099275373
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1656892989994958
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559370800387114
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582032499427442
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563714299700223
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578008699871134
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570414200832602
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyout.F90/kernels_copyout.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11616343600326218
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyout.F90/kernels_copyout.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564338400785346
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyout.F90/kernels_copyout.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544431099900976
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_copyout.F90/kernels_copyout.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555602500448003
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_create.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552779200428631
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11597618600353599
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158383799920557
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1157857179932762
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565408499154728
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570806900272146
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532641400117427
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_create.F90/kernels_create.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154860710084904
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_default_copy.F90/kernels_default_copy.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11580355299520306
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_default_copy.F90/kernels_default_copy.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557598499348387
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_default_copy.F90/kernels_default_copy.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154363759997068
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_default_copy.F90/kernels_default_copy.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525987599452492
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_if.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564722198818345
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11656709300586954
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11575765399902593
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154532889922848
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -DT2 -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-303 ftn: ERROR TEST4, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_if.F90, Line = 188, Column = 24 \n  Data type LOGICAL is not allowed with INTEGER for the operation \"eq\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 299 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11543635600537527
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_if.F90/kernels_if.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152567990066018
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop.F90/kernels_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 27 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 31 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 35 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 39 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 43 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 47 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 51 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 55 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 59 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 23, Column = 16 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 25, Column = 18 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 27, Column = 20 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 29, Column = 22 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 31, Column = 24 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 33, Column = 26 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 35, Column = 28 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 37, Column = 30 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 39, Column = 32 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 41, Column = 34 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90, Line = 42, Column = 35 \n  Unexpected syntax while parsing the assignment statement : \"operand\" was expected but found \"_\".\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 108 source lines\nCray Fortran : 21 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11531065301096532
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop.F90/kernels_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570746799407061
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_independent.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_independent.F90/kernels_loop_independent.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532738601090387
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_independent.F90/kernels_loop_independent.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_independent.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582182900747284
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_general.F90/kernels_loop_reduction_add_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115159542998299
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_general.F90/kernels_loop_reduction_add_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570146599842701
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_loop.F90/kernels_loop_reduction_add_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11603068999829702
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_loop.F90/kernels_loop_reduction_add_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11641932900238317
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_vector_loop.F90/kernels_loop_reduction_add_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542152700712904
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_add_vector_loop.F90/kernels_loop_reduction_add_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11621490400284529
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_general.F90/kernels_loop_reduction_and_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154627069918206
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_general.F90/kernels_loop_reduction_and_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11582996300421655
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_loop.F90/kernels_loop_reduction_and_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541988399403635
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_loop.F90/kernels_loop_reduction_and_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549054000352044
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_vector_loop.F90/kernels_loop_reduction_and_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560740400454961
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_and_vector_loop.F90/kernels_loop_reduction_and_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567316199943889
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_general.F90/kernels_loop_reduction_bitand_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536222300492227
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_general.F90/kernels_loop_reduction_bitand_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543056499795057
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_loop.F90/kernels_loop_reduction_bitand_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549673200352117
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_loop.F90/kernels_loop_reduction_bitand_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154065279988572
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_vector_loop.F90/kernels_loop_reduction_bitand_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526046699145809
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitand_vector_loop.F90/kernels_loop_reduction_bitand_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11525177001021802
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_general.F90/kernels_loop_reduction_bitor_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570113599009346
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_general.F90/kernels_loop_reduction_bitor_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549749400001019
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_loop.F90/kernels_loop_reduction_bitor_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11570100499375258
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_loop.F90/kernels_loop_reduction_bitor_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152124950021971
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_vector_loop.F90/kernels_loop_reduction_bitor_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541000500437804
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitor_vector_loop.F90/kernels_loop_reduction_bitor_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158311559993308
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_general.F90/kernels_loop_reduction_bitxor_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11650735800503753
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_general.F90/kernels_loop_reduction_bitxor_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541859198769089
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_loop.F90/kernels_loop_reduction_bitxor_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11586556199472398
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_loop.F90/kernels_loop_reduction_bitxor_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552356400352437
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_vector_loop.F90/kernels_loop_reduction_bitxor_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1159158989903517
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_bitxor_vector_loop.F90/kernels_loop_reduction_bitxor_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543586499465164
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_general.F90/kernels_loop_reduction_max_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152746950101573
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_general.F90/kernels_loop_reduction_max_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548964800022077
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_loop.F90/kernels_loop_reduction_max_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11596526400535367
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_loop.F90/kernels_loop_reduction_max_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543616400740575
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_vector_loop.F90/kernels_loop_reduction_max_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11520730500342324
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_max_vector_loop.F90/kernels_loop_reduction_max_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11569705800502561
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_general.F90/kernels_loop_reduction_min_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546096300298814
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_general.F90/kernels_loop_reduction_min_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158977940067416
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_loop.F90/kernels_loop_reduction_min_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11609007400693372
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_loop.F90/kernels_loop_reduction_min_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574523999297526
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_vector_loop.F90/kernels_loop_reduction_min_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538398399716243
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_min_vector_loop.F90/kernels_loop_reduction_min_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11593309299496468
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_general.F90/kernels_loop_reduction_multiply_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158005160104949
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_general.F90/kernels_loop_reduction_multiply_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567603799630888
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_loop.F90/kernels_loop_reduction_multiply_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155794509977568
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_loop.F90/kernels_loop_reduction_multiply_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11579828298999928
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_vector_loop.F90/kernels_loop_reduction_multiply_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532025098858867
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_multiply_vector_loop.F90/kernels_loop_reduction_multiply_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538175999885425
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_general.F90/kernels_loop_reduction_or_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11607249001099262
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_general.F90/kernels_loop_reduction_or_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155731999897398
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_loop.F90/kernels_loop_reduction_or_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536765399796423
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_loop.F90/kernels_loop_reduction_or_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537803401006386
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_vector_loop.F90/kernels_loop_reduction_or_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11578605900285766
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_reduction_or_vector_loop.F90/kernels_loop_reduction_or_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532974000147078
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_seq.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_seq.F90/kernels_loop_seq.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538100900361314
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_seq.F90/kernels_loop_seq.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_seq.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561260600865353
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_tile.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_tile.F90/kernels_loop_tile.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_tile.F90",
                    "config": 1,
                    "errors": "\n\nftn-1342 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_tile.F90, Line = 28, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\n\nftn-1342 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_tile.F90, Line = 31, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0034 seconds\nCray Fortran : 94 source lines\nCray Fortran : 2 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11587176300236024
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_tile.F90/kernels_loop_tile.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_tile.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553685899707489
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_vector_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_vector_blocking.F90/kernels_loop_vector_blocking.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11547100299503654
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_vector_blocking.F90/kernels_loop_vector_blocking.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550299399823416
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_worker_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_worker_blocking.F90/kernels_loop_worker_blocking.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11566959500487428
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_loop_worker_blocking.F90/kernels_loop_worker_blocking.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528749899298418
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_present.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_present.F90/kernels_present.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115529794988106
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_present.F90/kernels_present.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526191000302788
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_wait.F90/kernels_wait.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_wait.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563758298871107
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/kernels_wait.F90/kernels_wait.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/kernels_wait.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528245999943465
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_collapse.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_collapse.F90/loop_collapse.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155081339966273
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_collapse.F90/loop_collapse.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155656250048196
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_collapse.F90/loop_collapse.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156496860057814
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_collapse.F90/loop_collapse.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.115222663996974
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_no_collapse.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_no_collapse.F90/loop_no_collapse.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11518257699208334
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_no_collapse.F90/loop_no_collapse.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560471999109723
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_no_collapse.F90/loop_no_collapse.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567668900534045
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/loop_no_collapse.F90/loop_no_collapse.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/loop_no_collapse.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538993600697722
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel.F90/parallel.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550648100092076
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel.F90/parallel.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563057999592274
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_async.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_async.F90/parallel_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544847799814306
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_async.F90/parallel_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11563733300135937
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copy.F90/parallel_copy.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548919700726401
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copy.F90/parallel_copy.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158469070069259
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyin.F90/parallel_copyin.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568645700754132
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyin.F90/parallel_copyin.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyin.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537674099963624
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11590583900397178
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542192799970508
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561269499361515
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153447880060412
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540973299997859
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546444000850897
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555452400352806
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564524799177889
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_create.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_create.F90/parallel_create.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544669599970803
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_create.F90/parallel_create.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_create.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557032298878767
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_default_copy.F90/parallel_default_copy.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11549105099402368
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_default_copy.F90/parallel_default_copy.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567257999558933
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_default_copy.F90/parallel_default_copy.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543915999936871
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_default_copy.F90/parallel_default_copy.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_default_copy.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534833699988667
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_firstprivate.F90/parallel_firstprivate.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11518633399100509
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_firstprivate.F90/parallel_firstprivate.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153202210116433
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_firstprivate.F90/parallel_firstprivate.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11536179199174512
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_firstprivate.F90/parallel_firstprivate.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11576594099460635
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_if.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11534470999322366
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535884700424504
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1152673509932356
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11523064899665769
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT3 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F904 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553549599193502
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F905 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153050830034772
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F906 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11580488500476349
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_if.F90/parallel_if.F907 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571745699620806
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop.F90/parallel_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548562100506388
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop.F90/parallel_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11584084399510175
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT2 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop.F90/parallel_loop.F902 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11589704199286643
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop.F90/parallel_loop.F903 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11568106700724456
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_async.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_async.F90/parallel_loop_async.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-802 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_async.F90, Line = 30, Column = 66 \n  Variable subobjects are not allowed as arguments for this clause or directive.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0033 seconds\nCray Fortran : 91 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1156665490125306
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_async.F90/parallel_loop_async.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_async.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540835100458935
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_auto.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_auto.F90/parallel_loop_auto.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11632046698650811
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_auto.F90/parallel_loop_auto.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_auto.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11588738499267492
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_gang.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_gang.F90/parallel_loop_gang.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11532452999381348
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_gang.F90/parallel_loop_gang.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_gang.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11529023399634752
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_general.F90/parallel_loop_reduction_add_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11611538300348911
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_general.F90/parallel_loop_reduction_add_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1156069950084202
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_loop.F90/parallel_loop_reduction_add_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543990300560836
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_loop.F90/parallel_loop_reduction_add_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562042999139521
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.F90/parallel_loop_reduction_add_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11535365600138903
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.F90/parallel_loop_reduction_add_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11680561301182024
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_general.F90/parallel_loop_reduction_and_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11598521200357936
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_general.F90/parallel_loop_reduction_and_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11612283799331635
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_loop.F90/parallel_loop_reduction_and_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11590512799739372
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_loop.F90/parallel_loop_reduction_and_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567701899912208
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.F90/parallel_loop_reduction_and_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560836700664368
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.F90/parallel_loop_reduction_and_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537727199902292
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_general.F90/parallel_loop_reduction_bitand_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541166799725033
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_general.F90/parallel_loop_reduction_bitand_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553744001139421
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.F90/parallel_loop_reduction_bitand_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11542213900247589
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.F90/parallel_loop_reduction_bitand_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11567670799558982
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.F90/parallel_loop_reduction_bitand_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1153205419977894
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.F90/parallel_loop_reduction_bitand_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546148400520906
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_general.F90/parallel_loop_reduction_bitor_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154611429956276
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_general.F90/parallel_loop_reduction_bitor_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158710930030793
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.F90/parallel_loop_reduction_bitor_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538844300957862
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.F90/parallel_loop_reduction_bitor_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548711299838033
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.F90/parallel_loop_reduction_bitor_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11540823099494446
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.F90/parallel_loop_reduction_bitor_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541695799678564
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.F90/parallel_loop_reduction_bitxor_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559307799325325
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.F90/parallel_loop_reduction_bitxor_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11564459699729923
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.F90/parallel_loop_reduction_bitxor_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562738299835473
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.F90/parallel_loop_reduction_bitxor_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1161523040063912
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.F90/parallel_loop_reduction_bitxor_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11533776599389967
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.F90/parallel_loop_reduction_bitxor_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11546990100760013
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_general.F90/parallel_loop_reduction_max_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11584103498898912
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_general.F90/parallel_loop_reduction_max_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11562684200180229
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_loop.F90/parallel_loop_reduction_max_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528946299222298
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_loop.F90/parallel_loop_reduction_max_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537901499832515
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.F90/parallel_loop_reduction_max_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565656001039315
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.F90/parallel_loop_reduction_max_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11589860598905943
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_general.F90/parallel_loop_reduction_min_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11560052199638449
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_general.F90/parallel_loop_reduction_min_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11557513299339917
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_loop.F90/parallel_loop_reduction_min_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565418499230873
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_loop.F90/parallel_loop_reduction_min_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11558204599714372
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.F90/parallel_loop_reduction_min_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11538214200118091
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.F90/parallel_loop_reduction_min_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11531161500897724
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_general.F90/parallel_loop_reduction_multiply_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11587598199548665
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_general.F90/parallel_loop_reduction_multiply_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1155355360097019
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.F90/parallel_loop_reduction_multiply_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11544261800008826
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.F90/parallel_loop_reduction_multiply_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574219400063157
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.F90/parallel_loop_reduction_multiply_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158867129997816
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.F90/parallel_loop_reduction_multiply_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11545927000406664
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_general.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_general.F90/parallel_loop_reduction_or_general.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11548576099448837
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_general.F90/parallel_loop_reduction_or_general.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574347599525936
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_loop.F90/parallel_loop_reduction_or_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551702099677641
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_loop.F90/parallel_loop_reduction_or_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11526728999160696
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_vector_loop.F90/parallel_loop_reduction_or_vector_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554293098743074
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_reduction_or_vector_loop.F90/parallel_loop_reduction_or_vector_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11574717199255247
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_seq.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_seq.F90/parallel_loop_seq.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11610024199762847
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_seq.F90/parallel_loop_seq.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_seq.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11581589399429504
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_tile.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_tile.F90/parallel_loop_tile.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_tile.F90",
                    "config": 1,
                    "errors": "\n\nftn-1342 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_tile.F90, Line = 28, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\n\nftn-1342 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_tile.F90, Line = 31, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0036 seconds\nCray Fortran : 94 source lines\nCray Fortran : 2 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11555746800149791
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_tile.F90/parallel_loop_tile.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_tile.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11572966899257153
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_vector.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_vector.F90/parallel_loop_vector.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11543728499964345
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_vector.F90/parallel_loop_vector.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_vector.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11524240000289865
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_vector_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_vector_blocking.F90/parallel_loop_vector_blocking.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11554849000822287
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_vector_blocking.F90/parallel_loop_vector_blocking.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11527433100854978
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_worker.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_worker.F90/parallel_loop_worker.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11618934400030412
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_worker.F90/parallel_loop_worker.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_worker.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11528766700939741
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_worker_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_worker_blocking.F90/parallel_loop_worker_blocking.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11561105099099223
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_loop_worker_blocking.F90/parallel_loop_worker_blocking.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11596076301066205
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_present.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_present.F90/parallel_present.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1154925419978099
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_present.F90/parallel_present.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_present.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11539933300809935
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_private.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_private.F90/parallel_private.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_private.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11537925399898086
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_private.F90/parallel_private.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_private.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11565093799435999
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_reduction.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_reduction.F90/parallel_reduction.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11551569699076936
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_reduction.F90/parallel_reduction.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_reduction.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11553654698946048
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_scalar_default_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_scalar_default_firstprivate.F90/parallel_scalar_default_firstprivate.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11571478999394458
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_scalar_default_firstprivate.F90/parallel_scalar_default_firstprivate.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11555746600788552
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_switch.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_switch.F90/parallel_switch.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_switch.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541516199940816
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_switch.F90/parallel_switch.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_switch.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11552347098768223
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_wait.F90/parallel_wait.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_wait.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11559020000277087
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_wait.F90/parallel_wait.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_wait.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11600578000070527
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_while_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_while_loop.F90/parallel_while_loop.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": false,
                    "output": "",
                    "result": 2,
                    "runtime": 0.1158650399884209
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/parallel_while_loop.F90/parallel_while_loop.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/parallel_while_loop.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11541806798777543
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "template.F90": [
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -o /global/u1/j/jarmusch/OpenACCV-V/build/template.F90/template.F900 /global/u1/j/jarmusch/OpenACCV-V/Tests/template.F90",
                    "config": 1,
                    "errors": "\n\nftn-1403 ftn: ERROR TEST1, File = ../../../global/u1/j/jarmusch/OpenACCV-V/Tests/template.F90, Line = 25, Column = 17 \n  OpenMP or OpenACC construct PARALLEL should have a structured block between the directive and the END directive.\n\nCray Fortran : Version 14.0.1 (20220526224428_3a8780657c742829e80f36338fb6ec6578642bb7)\nCray Fortran : Compile time:  0.0032 seconds\nCray Fortran : 79 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11525272000289988
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -hacc,noomp -DT1 -o /global/u1/j/jarmusch/OpenACCV-V/build/template.F90/template.F901 /global/u1/j/jarmusch/OpenACCV-V/Tests/template.F90",
                    "config": 1,
                    "errors": "ftn-2116 ftn: INTERNAL  \n  \"/opt/cray/pe/cce/14.0.1/cce/x86_64/bin/optcg\" was terminated due to receipt of signal 013:  Segmentation fault.\n",
                    "export": true,
                    "output": "",
                    "result": 2,
                    "runtime": 0.11550641899520997
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ]
    },
    "summary": {
        "1": {
            "1": {
                "1": {
                    "acc_async_test.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_async_test_all.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyin.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "6": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "7": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyin_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "6": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "7": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyout.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "4": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "5": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyout_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_create.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "acc_create_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "acc_delete.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_delete_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_get_device_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_num_devices.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_init.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_is_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_is_present_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_on_device.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_num.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_type.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_shutdown.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_update_device.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_device_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_self.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_update_self_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "acc_wait.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_wait_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_and_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_divided_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_eqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_minus_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_neqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_or_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_plus_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_times_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_iand_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_iand_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ior_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ior_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ixor_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ixor_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_expr_list_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_x_expr_list.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_expr_list_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_x_expr_list.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_and_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_divided_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_eqv_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_minus_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_neqv_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_or_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_plus_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_times_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_and_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_divided_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_eqv_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_minus_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_neqv_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_or_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_plus_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_times_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_iand_expr_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_iand_x_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ior_expr_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ior_x_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ixor_expr_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ixor_x_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_expr_list_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_expr_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_x_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_x_expr_list_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_expr_list_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_expr_x_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_x_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_x_expr_list_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_and_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_divided_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_eqv_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_minus_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_neqv_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_or_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_plus_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_times_expr_assign.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_and_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_and_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_divided_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_divided_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_eqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_eqv_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_minus_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_minus_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_neqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_neqv_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_or_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_or_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_plus_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_plus_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_times_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_times_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_list_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_list_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_list.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_list_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_list_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_list_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_list.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_list_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_and_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_and_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_divided_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_divided_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_eqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_eqv_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_minus_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_minus_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_neqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_neqv_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_or_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_or_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_plus_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_plus_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_times_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_times_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_list_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_list_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_list.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_list_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_list_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_list_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_list.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_list_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_and_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_and_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_divided_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_divided_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_eqv_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_eqv_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_minus_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_minus_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_neqv_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_neqv_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_or_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_or_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_plus_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_plus_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_times_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_times_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_and_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_and_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_divided_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_divided_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_eqv_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_eqv_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_minus_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_minus_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_neqv_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_neqv_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_or_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_or_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_plus_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_plus_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_times_expr.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_times_expr_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_copy_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_copyin_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_copyout_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_copyout_reference_counts.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "data_create.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "data_create_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_present_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_with_changing_subscript.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "data_with_derived_type.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "declare_copyin.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_create.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_copy.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_copyin.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_copyout.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_create.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "enter_data_copyin_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "enter_data_create.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "enter_data_create_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "enter_data_if.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        },
                        "5": {
                            "result": "Compilation Failure",
                            "run_index": 5
                        }
                    },
                    "exit_data.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "exit_data_copyout_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "exit_data_copyout_reference_counts.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "exit_data_delete_no_lower_bound.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "exit_data_finalize.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "kernels_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_copy.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_copyin.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_copyout.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_create.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "kernels_default_copy.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "kernels_if.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "kernels_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_independent.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_seq.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_tile.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_vector_blocking.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_worker_blocking.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_wait.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "loop_collapse.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "loop_no_collapse.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_copy.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_copyin.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_copyout.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "parallel_create.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_default_copy.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_firstprivate.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_if.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "parallel_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "parallel_loop_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_auto.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_gang.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_general.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_vector_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_seq.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_tile.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector_blocking.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker_blocking.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_private.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_reduction.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_scalar_default_firstprivate.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_switch.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_wait.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_while_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "template.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    }
                }
            }
        }
    },
    "systems": [
        {
            "id": 1,
            "machine": "x86_64",
            "name": null,
            "node": "nid002016",
            "processor": "x86_64",
            "release": "5.3.18-150300.59.43_11.0.51-cray_shasta_c",
            "version": "#1 SMP Thu Mar 31 18:57:28 UTC 2022 (514bda1)"
        }
    ],
    "testsuites": [
        {
            "acc_async_test.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n        \n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT)) async(1)\n        !$acc enter data copyin(d(1:LOOPCOUNT)) create(e(1:LOOPCOUNT)) async(2)\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1) wait(2)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            e(x) = c(x) + d(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(e(1:LOOPCOUNT)) async(1)\n\n\n        DO WHILE (acc_async_test(1) .eqv. .FALSE.)\n          CONTINUE\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .GT. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:async,runtime,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e\n        INTEGER :: errors\n        errors = 0\n        \n        !Initialization\n        CALL RANDOM_SEED()\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n          DO WHILE (acc_async_test(1) .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .GT. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e\n        INTEGER :: errors, async_val\n        INTEGER :: acc_get_default_async\n        async_val = acc_get_default_async()\n        errors = 0\n\n        !Initialization\n        CALL RANDOM_SEED()\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n          DO WHILE (acc_async_test(async_val) .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_async_test_all.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc enter data create(a(1:LOOPCOUNT,1:10), b(1:LOOPCOUNT,1:10), c(1:LOOPCOUNT,1:10), d(1:LOOPCOUNT,1:10), e(1:LOOPCOUNT,1:10))\n        DO y = 1, 10\n          !$acc update device(a(1:LOOPCOUNT,y:y), b(1:LOOPCOUNT,y:y), d(1:LOOPCOUNT,y:y)) async(y)\n          !$acc parallel present(a(1:LOOPCOUNT,y:y), b(1:LOOPCOUNT,y:y), c(1:LOOPCOUNT,y:y)) async(y)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x, y) = a(x, y) + b(x, y)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT,y:y), d(1:LOOPCOUNT,y:y),e(1:LOOPCOUNT,y:y)) async(y)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x, y) = c(x, y) + d(x, y)\n            END DO\n          !$acc end parallel\n          !$acc update host(e(1:LOOPCOUNT,y:y)) async(y)\n        END DO\n\n        DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n          CONTINUE\n        END DO\n\n        DO y = 1, 10\n          DO x = 1, LOOPCOUNT\n            IF (abs(e(x, y) - (a(x, y) + b(x, y) + d(x, y))) .GT. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:async,runtime,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT,1:10), d(1:LOOPCOUNT, 1:10)) copyout(c(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10))\n          DO x = 1, 10\n            !$acc parallel present(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10)) async(x)\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                c(y, x) = a(y, x) + b(y, x)\n              END DO\n            !$acc end parallel\n            !$acc parallel present(c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10)) async(x)\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                e(y, x) = c(y, x) + d(y, x)\n              END DO\n            !$acc end parallel\n          END DO\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, 10\n          DO y = 1, LOOPCOUNT\n            IF (abs(e(y, x) - (a(y, x) + b(y, x) + d(y, x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:async,runtime,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10)) copyout(c(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10))\n          DO x = 1, 10\n            CALL acc_set_default_async(x)\n            !$acc parallel present(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10)) async\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                c(y, x) = a(y, x) + b(y, x)\n              END DO\n            !$acc end parallel\n            !$acc parallel present(c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10)) async\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                e(y, x) = c(y, x) + d(y, x)\n              END DO\n            !$acc end parallel\n          END DO\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, 10\n          DO y = 1, LOOPCOUNT\n            IF (abs(e(y, x) - (a(y, x) + b(y, x) + d(y, x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin.F90": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 1\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(a(1:LOOPCOUNT))\n        CALL acc_copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          a_copy(:) = a(:)\n          CALL RANDOM_NUMBER(b)\n          b_copy(:) = b(:)\n          c = 0\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x) - b_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,executable-data,construct-independent,compatibility-features,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcopyin(a(1:LOOPCOUNT))\n        CALL acc_pcopyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,executable-data,construct-independent,compatibility-features,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        \n        CALL acc_present_or_copyin(a(1:LOOPCOUNT))\n        CALL acc_present_or_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n!T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test6()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test6 = .FALSE.\n        ELSE\n          test6 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T6\n        LOGICAL :: test6\n#endif\n#ifndef T6\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test6()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 5\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n!T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test7()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          !Initialization\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          a_copy = a\n          b_copy = b\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          a = 0\n          b = 0\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test7 = .FALSE.\n        ELSE\n          test7 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T7\n        LOGICAL :: test7\n#endif\n#ifndef T7\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test7()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 6\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel async(1) present(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2) present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2) wait(1) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x)*a_host(x) + b_host(x)*b_host(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyin_async(c(1:LOOPCOUNT), 1)\n          !$acc exit data delete(c(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n      LOGICAL :: test4\n#endif\n#ifndef T4\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test4()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 3\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        CALL RANDOM_NUMBER(b)\n        b_copy = b\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        a = 0\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n      LOGICAL :: test5\n#endif\n#ifndef T5\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test5()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 4\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async_with_len.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel wait(1, 2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x)*a_host(x) + b_host(x)*b_host(x))) .gt. 4*PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEn\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyin_async(c(1), LOOPCOUNT*8, 1)\n          !$acc exit data delete(c(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_with_len.F90": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc Loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(a(1:LOOPCOUNT))\n        CALL acc_copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) .eq. 1) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          a_copy = a\n          b_copy = b\n          c = 0\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          CALL acc_copyout(a(1:LOOPCOUNT))\n          CALL acc_copyout(b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x) - b_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcopyin(a(1), LOOPCOUNT*8)\n        CALL acc_pcopyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T4\n      LOGICAL :: test4\n#endif\n#ifndef T4\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test4()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 3\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_present_or_copyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T5\n      LOGICAL :: test5\n#endif\n#ifndef T5\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test5()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 4\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n!T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test6()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) + (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test6 = .FALSE.\n        ELSE\n          test6 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T6\n      LOGICAL :: test6\n#endif\n#ifndef T6\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test6()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 5\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n!T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test7()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          a_copy = a\n          b_copy = b\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          a = 0\n          b = 0\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n        IF (errors .eq. 0) THEN\n          test7 = .FALSE.\n        ELSE\n          test7 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T7\n      LOGICAL :: test7\n#endif\n#ifndef T7\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test7()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 6\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,construct-independent,devonly,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_copyout(c(1:LOOPCOUNT))\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(c(1:LOOPCOUNT))\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data create(c(1:LOOPCOUNT))\n          !$acc enter data create(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_copyout(c(1:LOOPCOUNT))\n          !$acc exit data delete(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_async(c(1:LOOPCOUNT), 1)\n          CALL acc_copyout_async(f(1:LOOPCOUNT), 2)\n        !$acc end data\n        !$acc wait\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_copyout_async(f(1), LOOPCOUNT*8, 2)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout_finalize(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_finalize_async(c(1:LOOPCOUNT), 1)\n          CALL acc_copyout_finalize_async(f(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_finalize_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_copyout_finalize_async(f(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout_finalize(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c= 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcreate(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          CALL acc_create_async(c(1:LOOPCOUNT), 1)\n          CALL acc_create_async(f(1:LOOPCOUNT), 2)\n          !$acc data present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                f(x) = d(x) + e(x)\n              END DO\n            !$acc end parallel\n            !$acc wait\n          !$acc end data\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          CALL acc_create_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_create_async(f(1), LOOPCOUNT*8, 2)\n          !$acc data present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                f(x) = d(x) + e(x)\n              END DO\n            !$acc end parallel\n            !$acc wait\n          !$acc end data\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_with_len.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c= 0\n\n        CALL acc_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcreate(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1:LOOPCOUNT))\n        CALL acc_delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1:LOOPCOUNT))\n        CALL acc_delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_async(a(1:LOOPCOUNT), 1)\n          CALL acc_delete_async(b(1:LOOPCOUNT), 1)\n          CALL acc_delete_async(d(1:LOOPCOUNT), 2)\n          CALL acc_delete_async(e(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c!Data\n        INTEGER,DIMENSION(1) :: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) == 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_delete_async(c(1:LOOPCOUNT), 1)\n          !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_async(a(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_async(b(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_async(d(1), LOOPCOUNT*8, 2)\n          CALL acc_delete_async(e(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) == 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_delete_async(c(1), LOOPCOUNT*8, 1)\n          !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1:LOOPCOUNT))\n        CALL acc_delete_finalize(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1:LOOPCOUNT))\n        CALL acc_delete_finalize(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_finalize_async(a(1:LOOPCOUNT), 1)\n          CALL acc_delete_finalize_async(b(1:LOOPCOUNT), 1)\n          CALL acc_delete_finalize_async(d(1:LOOPCOUNT), 2)\n          CALL acc_delete_finalize_async(e(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize_async(c(1:LOOPCOUNT), 1)\n\n        !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_finalize_async(a(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_finalize_async(b(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_finalize_async(d(1), LOOPCOUNT*8, 2)\n          CALL acc_delete_finalize_async(e(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize_async(c(1), LOOPCOUNT*8, 1)\n\n        !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1), LOOPCOUNT*8)\n        CALL acc_delete_finalize(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1), LOOPCOUNT*8)\n        CALL acc_delete_finalize(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1), LOOPCOUNT*8)\n        CALL acc_delete(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1), LOOPCOUNT*8)\n        CALL acc_delete(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,internal-control-values,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, holder !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        INTEGER :: acc_get_default_async\n        errors = 0\n        holder = acc_get_default_async()\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(holder)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (acc_get_default_async() .lt. 0) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER :: errors\n        errors = 0\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            CALL acc_set_device_num(x, acc_get_device_type())\n            IF (acc_get_device_num(acc_get_device_type()) .ne. x) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_num_devices.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors\n        errors = 0\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          IF (acc_get_num_devices(acc_get_device_type()) .eq. 0) THEN\n            errors = errors + 1\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,nonvalidating,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: output\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          output = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_memory)\n          output = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory)\n        END IF\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property_string.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,nonvalidating,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        CHARACTER(len=:),ALLOCATABLE :: output1\n        CHARACTER(len=:),ALLOCATABLE :: output2\n        CHARACTER(len=:),ALLOCATABLE :: output3\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_name, output1)\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_vendor, output2)\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type, acc_property_driver, output3)\n        END IF\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_init.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_init(acc_get_device_type())\n        END IF\n\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,devonly,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors\n        errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        IF (acc_is_present(a(1:LOOPCOUNT)) .eqv. .FALSE.) THEN\n          errors = errors + 1\n          PRINT*, 1\n        END IF\n        !$acc exit data delete(a(1:LOOPCOUNT))\n\n        IF (devtest(1) .eq. 1) THEN\n          IF (acc_is_present(a(1:LOOPCOUNT)) .eqv. .TRUE.) THEN\n            errors = errors + 1\n            PRINT*, 2\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,devonly,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        IF (acc_is_present(a(1), LOOPCOUNT*8) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n        !$acc exit data delete(a(1:LOOPCOUNT))\n\n        IF (devtest(1) .eq. 1) THEN\n          IF (acc_is_present(a(1), LOOPCOUNT*8) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_on_device.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,present,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors\n        INTEGER :: device_type\n        errors = 0\n        device_type = acc_get_device_type()\n        IF (device_type .ne. acc_device_none) THEN\n          !$acc parallel\n            IF (acc_on_device(device_type) .eqv. .FALSE.) THEN\n              errors = errors + 1\n            END IF\n          !$acc end parallel\n        ELSE\n          !$acc parallel\n            IF (acc_on_device(acc_device_host) .eqv. .FALSE.) THEN\n              errors = errors + 1\n            END IF\n          !$acc end parallel\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "present"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a_host = a\n        b_host = b\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_set_default_async(1)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_set_default_async(2)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x) * a_host(x) + b_host(x) * b_host(x))) .gt. 4 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(:, :),ALLOCATABLE :: host_copy\n        INTEGER :: errors = 0\n\n        CALL RANDOM_SEED\n        ALLOCATE(host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT))\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          !host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT)\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            DO y = 1, LOOPCOUNT\n              CALL RANDOM_NUMBER(a)\n              host_copy(x) = a\n            END DO\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc enter data copyin(a(1:LOOPCOUNT))\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type)\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc data present(a(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(y) = a(y) + 1\n                END DO\n              !$acc end parallel\n            !$acc end data\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            acc_set_device_num(x, acc_get_device_type())\n            !$acc exit data copyout(a(1:LOOPCOUNT))\n            DO y = 1, LOOPCOUNT\n              IF (abs(a(y) - (host_copy(x, y) + 1)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.fh\"\n        INTEGER :: errors = 0\n        INTEGER :: device_type\n\n        device_type = acc_get_device_type()\n        CALL acc_set_device_type(device_type)\n        IF (acc_get_device_type() .ne. device_type) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_shutdown.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_shutdown(acc_get_device_type())\n        END IF\n\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) create(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          CALL acc_update_device(a(1:LOOPCOUNT))\n          CALL acc_update_device(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_update_device_async(a(1:LOOPCOUNT), 1)\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_device_async(b(1:LOOPCOUNT), 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(a(1:LOOPCOUNT), 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(b(1:LOOPCOUNT), 2)\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_update_device_async(a(1), LOOPCOUNT*8, 1)\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_device_async(b(1), LOOPCOUNT*8, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors\n        errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(a(1), LOOPCOUNT*8, 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(b(1), LOOPCOUNT*8, 2)\n            !$acc parallel async(1), wait(2)\n              !$acc loop\n               DO x = 1, LOOPCOUNT\n                 c(x) = a(x) + b(x)\n               END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) create(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          CALL acc_update_device(a(1), LOOPCOUNT*8)\n          CALL acc_update_device(b(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(a(1), LOOPCOUNT*8)\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(b(1), LOOPCOUNT*8)\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(c(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(a(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self_async(c(1:LOOPCOUNT), 1)\n          CALL acc_update_self_async(d(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x) - (a(x) * b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(a(1:LOOPCOUNT), 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(b(1:LOOPCOUNT), 2)\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) * b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - ((a(x) + 1) * (b(x) + 1))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_update_self_async(d(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x) - (a(x) * b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(a(1), LOOPCOUNT*8, 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(b(1), LOOPCOUNT*8, 2)\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) * b(x)\n              END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - ((a(x) + 1) * (b(x) + 1))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(c(1), LOOPCOUNT*8)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(a(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(b(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data  copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT)) async(1)\n        !$acc enter data copyin(d(1:LOOPCOUNT)) create(e(1:LOOPCOUNT)) async(2)\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1) wait(2)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            e(x) = c(x) + d(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(e(1:LOOPCOUNT)) async(1)\n\n        CALL acc_wait(1)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, a_host, b_host, c_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n        d = 0\n        a_host = a\n        b_host = b\n        c_host = c\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) * c(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all()\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) + b(x) + c(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(d(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)) + (c_host(x) * c_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g, h, i, j, k !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: a_host, d_host, g_host\n        REAL(8) :: RAND\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        CALL RANDOM_NUMBER(g)\n        CALL RANDOM_NUMBER(h)\n        i = 0\n        j = 0\n        k = 0\n        a_host = a\n        d_host = d\n        g_host = g\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), g(1:LOOPCOUNT), h(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), f(1:LOOPCOUNT), i(1:LOOPCOUNT), j(1:LOOPCOUNT)) copyout(k(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              i(x) = g(x) + h(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all_async(4)\n          !$acc parallel async(4)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              j(x) = c(x) + f(x) + i(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = b(x) * c(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = e(x) * f(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = h(x) * i(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all_async(4)\n          !$acc parallel async(4)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              k(x) = j(x) + a(x) + d(x) + g(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(4)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = a_host(x) + b(x) + d_host(x) + e(x) + g_host(x) + h(x)\n          temp = temp + (b(x) * (a_host(x) + b(x))) + (e(x) * (d_host(x) + e(x))) + (h(x) * (g_host(x) + h(x)))\n          IF (abs(k(x) - temp) .gt. PRECISION * 10) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g, h, i !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        CALL RANDOM_NUMBER(g)\n        h = 0\n        i = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), g(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), f(1:LOOPCOUNT), h(1:LOOPCOUNT)) copyout(i(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n          !$acc end parallel\n          CALL acc_wait_async(1, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              h(x) = c(x) + g(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_async(1, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              i(x) = h(x) + f(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(2)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(i(x) - (a(x) + b(x) + g(x) + d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n        LOGICAL :: init\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        REAL(8),DIMENSION(10):: passed_b\n        REAL(8) :: holder\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL:: init\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL:: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 1\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER,DIMENSION(10):: passed_a, passed_b\n        INTEGER:: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            DO z = 1, 8\n              IF (randoms(x, y, z) .lt. .933) THEN\n                a(x, y) = a(x, y) + ISHFT(1, z - 1)\n              END IF\n            END DO\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = iand(a(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          DO y = 0, 7\n            init = init + ISHFT(1, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .lt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 0, 7\n      totals(x) = totals(x) + ISHFT(1, y)\n      totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = iand(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    DO y = 0, 7\n      init = init + ISHFT(1, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ior(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ior(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ieor(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\nLOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ieor(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  c(x, y) = totals(x)\n                  totals(x) = max(a(x, y), b(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = max(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = max(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = max(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\nIMPLICIT NONE\nINCLUDE \"acc_testsuite.Fh\"\nINTEGER :: x, y !Iterators\nREAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\nREAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\nREAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\nREAL(8):: init\nLOGICAL IS_POSSIBLE\nINTEGER :: errors = 0\n\n!Initilization\nSEEDDIM(1) = 1\n#ifdef SEED\nSEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  c(x, y) = totals(x)\n                  totals(x) = min(a(x, y), b(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = min(a(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = min(totals(x), a(x, y))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n      IMPLICIT NONE\n      INCLUDE \"acc_testsuite.Fh\"\n      INTEGER :: x, y !Iterators\n      REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n      REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n      REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n      REAL(8):: init\n      LOGICAL IS_POSSIBLE\n      INTEGER :: errors = 0\n\n      !Initilization\n      SEEDDIM(1) = 1\n#     ifdef SEED\n      SEEDDIM(1) = SEED\n#     endif\n      CALL RANDOM_SEED(PUT=SEEDDIM)\n\n      CALL RANDOM_NUMBER(a)\n      CALL RANDOM_NUMBER(b)\n\n      totals = 1\n      totals_comparison = 1\n\n      !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            DO y = 1, 10\n              !$acc atomic capture\n                c(x, y) = totals(x)\n                totals(x) = min(totals(x), a(x, y), b(x, y))\n              !$acc end atomic\n            END DO\n          END DO\n        !$acc end parallel\n      !$acc end data\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n        END DO\n      END DO\n      DO x = 1, LOOPCOUNT\n        IF (totals_comparison(x) .NE. totals(x)) THEN\n          errors = errors + 1\n          WRITE(*, *) totals_comparison(x)\n        END IF\n      END DO\n\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          passed_a(y) = a(x, y)\n          passed_b(y) = b(x, y)\n          passed_c(y) = c(x, y)\n        END DO\n        init = 1\n        IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n      END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\nLOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER :: errors = 0\n  LOGICAL :: init\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) < .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .AND. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed\n  REAL(8),DIMENSION(10):: passed_b\n  REAL(8) :: holder\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) / a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL:: init\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .EQV. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) - a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .NEQV. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL:: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .OR. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) + a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) + a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n  totals_comparison = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) * a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) * a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 1\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_and_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: b\n        LOGICAL IS_POSSIBLE\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .AND. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_divided_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        REAL(8),DIMENSION(10):: passed_b\n        REAL(8) :: holder\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) / totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_eqv_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL:: init\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .EQV. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_minus_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) - totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_neqv_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_or_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL:: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .OR. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_plus_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) + totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_times_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) * totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 1\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_iand_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER,DIMENSION(10):: passed_a, passed_b\n        INTEGER:: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            DO z = 1, 8\n              IF (randoms(x, y, z) .lt. .933) THEN\n                a(x, y) = a(x, y) + ISHFT(1, z - 1)\n              END IF\n            END DO\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = iand(a(x, y), totals(x))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          DO y = 0, 7\n            init = init + ISHFT(1, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_iand_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .lt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 0, 7\n      totals(x) = totals(x) + ISHFT(1, y)\n      totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = iand(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    DO y = 0, 7\n      init = init + ISHFT(1, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ior_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ior(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ior_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ior(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ixor_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ieor(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ixor_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ieor(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_expr_list_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = max(a(x, y), b(x, y), totals(x))\n                  c(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = max(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = max(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = max(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_x_expr_list_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\nIMPLICIT NONE\nINCLUDE \"acc_testsuite.Fh\"\nINTEGER :: x, y !Iterators\nREAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\nREAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\nREAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\nREAL(8):: init\nLOGICAL IS_POSSIBLE\nINTEGER :: errors = 0\n\n!Initilization\nSEEDDIM(1) = 1\n#ifdef SEED\nSEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_expr_list_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(a(x, y), b(x, y), totals(x))\n                  c(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(a(x, y), totals(x))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(totals(x), a(x, y))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_x_expr_list_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n      IMPLICIT NONE\n      INCLUDE \"acc_testsuite.Fh\"\n      INTEGER :: x, y !Iterators\n      REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n      REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n      REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n      REAL(8):: init\n      LOGICAL IS_POSSIBLE\n      INTEGER :: errors = 0\n\n      !Initilization\n      SEEDDIM(1) = 1\n#     ifdef SEED\n      SEEDDIM(1) = SEED\n#     endif\n      CALL RANDOM_SEED(PUT=SEEDDIM)\n\n      CALL RANDOM_NUMBER(a)\n      CALL RANDOM_NUMBER(b)\n\n      totals = 1\n      totals_comparison = 1\n\n      !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            DO y = 1, 10\n              !$acc atomic capture\n                totals(x) = min(totals(x), a(x, y), b(x, y))\n                c(x, y) = totals(x)\n              !$acc end atomic\n            END DO\n          END DO\n        !$acc end parallel\n      !$acc end data\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n        END DO\n      END DO\n      DO x = 1, LOOPCOUNT\n        IF (totals_comparison(x) .NE. totals(x)) THEN\n          errors = errors + 1\n          WRITE(*, *) totals_comparison(x)\n        END IF\n      END DO\n\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          passed_a(y) = a(x, y)\n          passed_b(y) = b(x, y)\n          passed_c(y) = c(x, y)\n        END DO\n        init = 1\n        IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n      END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_and_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER :: errors = 0\n  LOGICAL :: init\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) < .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .AND. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_divided_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed\n  REAL(8),DIMENSION(10):: passed_b\n  REAL(8) :: holder\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) / a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_eqv_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL:: init\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .EQV. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_minus_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) - a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_neqv_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .NEQV. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_or_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL:: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .OR. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_plus_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) + a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) + a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_times_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n  totals_comparison = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) * a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) * a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 1\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .AND. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_and_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) / totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .EQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_eqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) - totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .NEQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_neqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .OR. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_or_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) + totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) * totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_times_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .AND. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_and_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) / totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .EQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_eqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) - totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .NEQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_neqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .OR. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_or_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) + totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) * totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_times_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .AND. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_and_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .AND. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) / a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) / a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .EQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_eqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .EQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) - a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) - a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .NEQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_neqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .NEQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .OR. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_or_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .OR. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) + a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) + a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) * a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_times_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) * a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .AND. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_and_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .AND. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) / a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) / a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .EQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_eqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .EQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) - a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) - a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .NEQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_neqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .NEQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .OR. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_or_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .OR. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) + a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) + a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) * a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_times_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) * a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copy_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyin_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(:LOOPCOUNT), b(:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_reference_counts.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          !$acc data copyin(c(1:LOOPCOUNT))\n            !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO x = 1, LOOPCOUNT\n                  c(x) = c(x) + a(x) + b(x)\n                END DO\n              !$acc end parallel\n            !$acc end data\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n              EXIT\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        IF (devtest(1) .eq. 1) THEN\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 2\n              EXIT\n            END IF\n          END DO\n        END IF\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(c(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 8\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0 \n\n        !$acc data create(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc data present_or_create(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc data pcreate(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n     \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) create(c(:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_present_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n \n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_changing_subscript.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, indexer !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        indexer = LOOPCOUNT\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:indexer), b(1:indexer)) copyout(c(1:indexer))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, indexer\n              c(x) = a(x) + b(x)\n            END DO\n            indexer = 1\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_derived_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        TYPE multi_item\n          REAL(8) :: a\n          REAL(8) :: b\n          REAL(8) :: c\n        END TYPE multi_item\n        INTEGER :: x !Iterators\n        TYPE (multi_item),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        DO x = 1, LOOPCOUNT\n          CALL RANDOM_NUMBER(a(x)%a)\n          CALL RANDOM_NUMBER(a(x)%b)\n          a(x)%c = 0.0\n        END DO\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x)%c = a(x)%a + a(x)%b\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x)%c - (a(x)%a + a(x)%b)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  INTEGER :: x\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(fixed_size_array)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + fixed_size_array(MOD(x, 10))\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + fixed_size_array(MOD(x, 10)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(scalar)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL externMultiplyData(a, LOOPCOUNT)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL multiplyData(a)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin_mod.F90": {
                "num tests": 0,
                "tests": {}
            },
            "declare_create.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,declare,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  !$acc update device(n)\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(fixed_size_array)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 10\n        fixed_size_array(x) = x * x\n      END DO\n    !$acc end parallel\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + fixed_size_array(MOD(x, 10))\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + (MOD(x, 10) * MOD(x, 10)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,declare,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  scalar = 10\n  !$acc update device(scalar)\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(scalar)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n  !$acc update\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL externMultiplyData(a, LOOPCOUNT)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL multiplyData(a)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copy.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(1:LOOPCOUNT, x:x))\n        CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (2 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(1:LOOPCOUNT, x:x))\n          CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 4\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copy(c(1:LOOPCOUNT, x:x))\n          CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(y, x) - 4) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - (4 + a(y, x) + b(y, x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyin.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n\n  !$acc data copy(c(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL function_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n        PRINT*, \"1\"\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 0\n    a_host = a\n    b_host = b\n\n    !$acc data copy(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT), c(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        CALL function_test_dev_only(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      END DO\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      DO y = 1, LOOPCOUNT\n        IF (abs(a(x, y) + 1) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"2\"\n        END IF\n        IF (abs(b(x, y) + 1) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"3\"\n        END IF\n        IF (abs(c(x, y) - (a_host(x, y) + b_host(x, y))) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"4\"\n        END IF\n      END DO\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 1\n    a_host = a\n    b_host = b\n\n    !$acc data copy(c(1:LOOPCOUNT, 1:LOOPCOUNt))\n      DO x = 1, LOOPCOUNT\n        CALL function_test_dev_only(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      END DO\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      DO y = 1, LOOPCOUNT\n        IF (abs(a(x, y) - a_host(x, y)) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"5\"\n        END IF\n        IF (abs(b(x, y) - b_host(x, y)) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"6\"\n        END IF\n        IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"7\"\n        END IF\n      END DO\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(1:LOOPCOUNT, x:x))\n        CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(1:LOOPCOUNT, x:x))\n          CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL create_test(a(x), b(x), c(x), d(x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(d(x, y) - (a(x, y) * (a(x, y) + b(x, y)))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copy(c(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL create_as_present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (2 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(d(x, y) - (a(x, y) * c(x, y))) .gt. PRECISION * 2) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(x:x, 1:LOOPCOUNT)) copyout(d(x:x, 1:LOOPCOUNT))\n          CALL create_as_present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(x, y) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x, y) - (a(x, y) * (3 + a(x, y) + b(x, y)))) .gt. PRECISION * 2) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_present.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(x:x, 1:LOOPCOUNT))\n        CALL present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(d(x, y) - (a(x, y) * c(x, y))) .gt. PRECISION * 2) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(x:x, 1:LOOPCOUNT)) copyout(d(x:x, 1:LOOPCOUNT))\n          CALL present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(x, y) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x, y) - (a(x, y) * (3 + a(x, y) + b(x, y)))) .gt. PRECISION * 2) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_copyin_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(:LOOPCOUNT), b(:LOOPCOUNT))\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n\n        !$acc enter data create(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop \n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n        !$acc enter data present_or_create(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc enter data pcreate(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_if.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          a_copy = a\n          CALL RANDOM_NUMBER(b)\n          b_copy = b\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n          CALL RANDOM_NUMBER(a)\n          a_copy = a\n          CALL RANDOM_NUMBER(b)\n          b_copy = b\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n\n        IF (devtest(1) .eq. 1) THEN\n          !$acc enter data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) + 1\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(a(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        !$acc enter data copyin(a(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = a(x) + 1\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (a_copy(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_reference_counts.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        IF (devtest(1) .eq. 1) THEN\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data copyin(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n              EXIT\n            END IF\n          END DO \n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc data copyin(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = c(x) + a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(c(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_delete_no_lower_bound.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: has_device\n\n        has_device(1) = .TRUE.\n        !$acc enter data copyin(has_device(1:1))\n        !$acc parallel present(has_device(1:1))\n          has_device(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(:LOOPCOUNT), b(:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: has_device\n\n        has_device(1) = .TRUE.\n        !$acc enter data copyin(has_device(1:1))\n        !$acc parallel present(has_device(1:1))\n          has_device(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (has_device(1) .eqv. .TRUE.) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          \n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(c(:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_finalize.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        IF (devtest(1) .eq. 1) THEN\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) finalize\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "id": 1,
            "init.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_num = acc_get_device_num(acc_get_device_type())\n        !$acc init device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_num.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(host) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(multicore) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(default) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_num_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(nvidia) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,kernels,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        g = 0\n        !$acc enter data create(g(1:LOOPCOUNT), c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc kernels async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end kernels\n          !$acc kernels async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end kernels\n          !$acc kernels wait(1, 2) async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = c(x) + f(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        !$acc wait(1, 2)\n        !$acc update host(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc exit data copyout(g(1:LOOPCOUNT)) async(3)\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" a: \", c(x), \" = \", a(x), \" + \", b(x)\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" b: \", f(x), \" = \", d(x), \" + \", e(x)\n          END IF\n        END DO\n        !$acc wait(3)\n        DO x = 1, LOOPCOUNT\n          IF (abs(g(x) - (c(x) + f(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" c: \", g(x), \" = \", c(x), \" + \", f(x)\n          END IF\n        END DO\n        !$acc exit data delete(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "kernels",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copy.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels copy(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc kernels copy(c(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - 1) .gt. PRECISION) THEN\n              IF ((a(x) + b(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n            DO x = 1, LOOPCOUNT\n              c(x) = 0\n            END DO\n            !$acc kernels copy(c(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n            DO x = 1, LOOPCOUNT\n              IF (abs(c(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (1 + a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyin.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copy(b(1:LOOPCOUNT))\n          !$acc kernels copyin(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) + a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            DO x = 1, LOOPCOUNT\n              a(x) = -1\n            END DO\n            !$acc kernels copyin(a(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n            DO x = 1, LOOPCOUNT\n              IF (abs(a(x) + 1) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc kernels copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyout.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          \n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc kernels copyout(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          \n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc kernels create(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1)) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc kernels\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n          !$acc exit data copyout(c(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,default,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels default(present)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data delete(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_if.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        data_on_device = .TRUE.\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data copyout(b(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            a(x) = -1\n          END DO\n\n          !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          data_on_device = .FALSE.\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9 !Iterators\n        REAL(8),DIMENSION(1024):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:1024)) copyout(b(1:1024))\n          !$acc kernels\n            !$acc loop\n            DO _0 = 0, 1\n              !$acc loop\n              DO _1 = 0, 1\n                !$acc loop\n                DO _2 = 0, 1\n                  !$acc loop\n                  DO _3 = 0, 1\n                    !$acc loop\n                    DO _4 = 0, 1\n                      !$acc loop\n                      DO _5 = 0, 1\n                        !$acc loop\n                        DO _6 = 0, 1\n                          !$acc loop\n                          DO _7 = 0, 1\n                            !$acc loop\n                            DO _8 = 0, 1\n                              !$acc loop\n                              DO _9 = 1, 2\n                                b(_0*512+_1*256+_2*128+_3*64+_4*32+_5*16+_6*8+_7*4+_8*2+_9)=a(_0*512+_1*256+_2*128+_3*64+_4*32+_5*16+_6*8+_7*4+_8*2+_9)\n                              END DO\n                            END DO\n                          END DO\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, 1024\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_independent.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc kernels loop independent\n          DO x = 1, LOOPCOUNT\n            b(x) = b(x) + a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        total = 0\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(total)\n          !$acc parallel loop reduction(+:total)\n          DO x = 1, LOOPCOUNT\n            total = total + a(x) + b(x)\n          END DO\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. LOOPCOUNT * PRECISION) THEN\n          WRITE(*, *) total\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c, d !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        avg = 0\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) create(c(1:10*LOOPCOUNT)) copyout(d(1:10*LOOPCOUNT))\n          !$acc kernels loop gang private(avg)\n          DO x = 0, 9\n            avg = 0\n            !$acc loop worker reduction(+:avg)\n            DO y = 1, LOOPCOUNT\n              avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            avg = avg / LOOPCOUNT\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              d(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y) / avg\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          avg = 0\n          DO y = 1, LOOPCOUNT\n            avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          avg = avg / LOOPCOUNT\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / avg)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0.0\n            !$acc loop vector reduction(+:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .TRUE.\n        LOGICAL :: host_results = .TRUE.\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(.and.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .and. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          host_results = host_results .and. a(x)\n        END DO\n        IF (host_results .neqv. results) THEN\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results, has_false\n        LOGICAL :: host_results = .TRUE.\n        LOGICAL :: temp = .TRUE.\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / LOOPCOUNT)\n        INTEGER :: errors = 0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, 10\n          results(x) = .TRUE.\n          has_false(x) = .FALSE.\n        END DO\n        DO x = 1, 10*LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n            a_copy(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n            a_copy(x) = .FALSE.\n            has_false(x / LOOPCOUNT) = .TRUE.\n          END IF\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc kernels loop gang\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop worker reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (temp .eqv. .TRUE.) THEN\n                IF (a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          temp = .TRUE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .AND. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .TRUE.) THEN\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10):: b\n        LOGICAL,DIMENSION(10):: has_false\n        LOGICAL :: temp\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(10*LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        DO x = 1, 10\n          has_false(x) = .FALSE.\n          b(x) = .TRUE.\n        END DO\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (randoms(x * LOOPCOUNT + y) .lt. false_margin) THEN\n              a(x * LOOPCOUNT + y) = .TRUE.\n            ELSE\n              a(x * LOOPCOUNT + y) = .FALSE.\n              has_false(x + 1) = .TRUE.\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop vector reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) .eqv. .FALSE.) THEN\n              temp = .TRUE.\n            END IF\n          END DO\n          IF (temp .neqv. has_false(x + 1)) THEN\n            errors = 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: b\n        REAL(8),DIMENSION(16 * LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 15\n            IF (randoms(y * LOOPCOUNT + x) .lt. false_margin) THEN\n              temp = 1\n              DO z = 0, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        b = a(1)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(iand:b)\n          DO x = 1, LOOPCOUNT\n            b = iand(b, a(x))\n          END DO\n        !$acc end data\n\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = iand(a(x), temp)\n        END DO\n        IF (temp .ne. b) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) b\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160*LOOPCOUNT)::randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(10000 * randoms2)\n        b_copy = b\n        false_margin = exp(log(.5)/LOOPCOUNT)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms((y - 1) * 10 * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        DO x = 1, 10\n         c(x) = a((x - 1) * LOOPCOUNT + x)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 1, 10\n            temp = a((x - 1) * LOOPCOUNT + 1)\n            !$acc loop worker reduction(iand:temp)\n            DO y = 2, LOOPCOUNT\n              temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n            END DO\n            c(x) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b((x - 1) * LOOPCOUNT + y) = b((x - 1) * LOOPCOUNT + y) + c(x)\n            END DO\n          END DO\n        !$acc end data\n\n       DO x = 1, 10\n         temp = a((x - 1) * LOOPCOUNT + 1)\n         DO y = 2, LOOPCOUNT\n           temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n         END DO\n         IF (temp .ne. c(x)) THEN\n           errors = errors + 1\n         END IF\n         DO y = 1, LOOPCOUNT\n           IF (b((x - 1) * LOOPCOUNT + y) .ne. b_copy((x - 1) * LOOPCOUNT + y) + temp) THEN\n             errors = errors + 1\n           END IF\n         END DO\n       END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: random\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5) / n)\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (random(x * 16 * LOOPCOUNT + (y - 1) * 16 + z - 1) < false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc kernels loop private(c)\n          DO x = 0, 9\n            c = a(x * LOOPCOUNT + 1)\n            !$acc loop vector reduction(iand:c)\n            DO y = 1, LOOPCOUNT\n              c = iand(c, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = c\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = a(x * LOOPCOUNT + 1)\n          DO y = 2, LOOPCOUNT\n            temp = iand(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (b(x + 1) .ne. temp) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(16*LOOPCOUNT):: random\n        INTEGER :: errors = 0\n        INTEGER :: temp\n        INTEGER :: b\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 16\n            IF (random((y - 1) * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        b = a(1)\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(ior:b)\n          DO x = 2, LOOPCOUNT\n            b = ior(b, a(x))\n          END DO\n        !$acc end data\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = ior(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        false_margin = exp(log(.5)/n)\n        b = FLOOR(6*randoms2)\n        b_copy = b\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (randoms(x * 16 * LOOPCOUNT + y * 16 + z - 1) .gt. false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10 * LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10) :: b\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160 * LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / n)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms(y * 10 * LOOPCOUNT + y - 1) .gt. false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        INTEGER :: errors = 0\n        INTEGER :: b = 0\n        INTEGER :: temp = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(ieor:b)\n          DO x = 1, LOOPCOUNT\n            b = ieor(b, a(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = ieor(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms, randoms2\n        INTEGER,DIMENSION(10):: c\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(randoms2*1000000)\n        b_copy = b\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: maximum, temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        maximum = 0\n        temp = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels loop reduction(max:maximum)\n          DO x = 1, LOOPCOUNT\n            maximum = max(maximum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = max(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - maximum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: maximum\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / maximum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) - maximum(x + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            ELSE IF ((c(x * LOOPCOUNT + y) - 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: maximum\n        INTEGER :: errors = 0\n        REAL(8) :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        maximum = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(maximum(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - maximum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8):: minimum = 1000\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels loop reduction(min:minimum)\n          DO x = 1, LOOPCOUNT\n            minimum = min(minimum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = min(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - minimum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = a + 1\n        b = b + 1\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc kernels loop gang independent private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop worker independent reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n            !$acc loop independent\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / minimum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) minimum(x + 1)\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) / temp)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y!Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop vector reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: temp = 1\n        REAL(8) :: multiplied_total = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a)/1000\n        b = (999.4 + b)/1000\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(*:multiplied_total)\n          DO x = 1, LOOPCOUNT\n            multiplied_total = multiplied_total * (a(x) + b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp * (a(x) + b(x))\n        END DO\n        IF (abs(temp - multiplied_total) .gt. ((temp / 2) + (multiplied_total / 2)) * PRECISION) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) multiplied_total\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: totals\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = (999.4 + a) / 2000\n        b = (999.4 + b) / 2000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT), totals(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop worker reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            totals(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - totals(x + 1)) .gt. ((temp / 2) + (totals(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) temp\n            WRITE(*, *) totals(x + 1)\n            WRITE(*, *) \" \"\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1))) .gt. c(x * LOOPCOUNT + y) * PRECISION) THEN\n              errors = errors + 1\n              WRITE(*, *) c(x * LOOPCOUNT + y)\n              WRITE(*, *) a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              WRITE(*, *) \" \"\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a) / 1000\n        b = (999.4 + b) / 1000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop vector reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. ((temp / 2) + (c(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .FALSE.\n        LOGICAL :: temp = .FALSE.\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        REAL(8),DIMENSION(LOOPCOUNT):: random\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        DO x = 1, LOOPCOUNT\n          IF (random(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(.OR.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .OR. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp .OR. a(x)\n        END DO\n        IF (temp .neqv. results) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results\n        LOGICAL :: temp = .FALSE.\n        REAL(8),DIMENSION(10 * LOOPCOUNT) :: random\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (random(x) .gt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n          a_copy(x) = a(x)\n        END DO\n\n        DO x = 1, 10\n          results(x) = .FALSE.\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop worker reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (results(x + 1) .eqv. .TRUE.) THEN\n                IF(a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .FALSE.) THEN\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10) :: b\n        LOGICAL :: temp\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / 2)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (randoms(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop vector reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc kernels loop seq\n          DO x = 2, LOOPCOUNT\n            b(x) = b(x - 1) + a(x)\n          END DO\n        !$acc end data\n\n        DO x = 2, LOOPCOUNT\n          IF (abs(b(x) - (b(x - 1) + a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,tile,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT,SMALL_LOOPCOUNT)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copyin(a(1:SMALL_LOOPCOUNT), b(1:SMALL_LOOPCOUNT), c(1:SMALL_LOOPCOUNT)) copyout(d(1:SMALL_LOOPCOUNT,1:SMALL_LOOPCOUNT))\n          !$acc kernels loop tile(*, *) reduction(+:temp)\n          DO x = 1, SMALL_LOOPCOUNT\n            DO y = 1, SMALL_LOOPCOUNT\n              temp = 0\n              DO z = 1, SMALL_LOOPCOUNT\n                temp = temp + a(z) + b(z) + c(z)\n              END DO\n              d(x,y) = temp\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 1, SMALL_LOOPCOUNT\n          DO y = 1, SMALL_LOOPCOUNT\n            temp = 0\n            DO z = 1, SMALL_LOOPCOUNT\n              temp = temp + a(z) + b(z) + c(z)\n            END DO\n            IF (abs(d(x,y) - temp) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplier\n        INTEGER :: errors = 0\n\n        multiplier = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplier\n            END DO\n            multiplier = multiplier + 1\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        REAL(8) :: multiplier\n        INTEGER :: errors = 0\n\n        multiplier = 1\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplier\n            END DO\n            multiplier = multiplier + 1\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + (a(x) + b(x)) * multiplier\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_gangs.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER :: results !Data\n        INTEGER :: errors = 0\n\n        results = 0\n\n        !$acc kernels num_gangs(8)\n          !$acc loop gang reduction(+:results)\n          DO x = 1, LOOPCOUNT\n            results = 1\n          END DO\n        !$acc end kernels\n          \n        IF (results .ne. 8) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_workers.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels loop num_workers(16)\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data delete(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_scalar_default_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: total = 0.0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        DO x = 1, LOOPCOUNT\n          total = total + a(x)\n        END DO\n        !$acc data copyin(b(1:LOOPCOUNT))\n          !$acc kernels num_gangs(1) vector_length(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              total = total + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. (2 * LOOPCOUNT - 2) * PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_vector_length.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels vector_length(16)\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n        !$acc kernels wait(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_collapse.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x*LOOPCOUNT + 1) = a(x*LOOPCOUNT + 1) + b(x*LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x*LOOPCOUNT + y) = c(x*LOOPCOUNT + y - 1) + a(x*LOOPCOUNT + y) + b(x*LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent collapse(2)\n            DO x = 0, 9\n              DO y = 1, LOOPCOUNT\n                c(x*LOOPCOUNT + y) = a(x*LOOPCOUNT + y) + b(x*LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x*LOOPCOUNT+y) - (a(x*LOOPCOUNT+y)+b(x*LOOPCOUNT+y))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_no_collapse.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x * LOOPCOUNT + 1) = a(x * LOOPCOUNT + 1) + b(x * LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y - 1) + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x * LOOPCOUNT + 1) = a(x * LOOPCOUNT + 1) + b(x * LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc kernels\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y - 1) + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, i_a, i_b, i_c, i_d, i_e, i_f, i_g, i_h, i_i, i_j !Iterators\n        INTEGER, PARAMETER :: PRIVATE_LOOPCOUNT = 1024\n        REAL(8),DIMENSION(PRIVATE_LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:PRIVATE_LOOPCOUNT), b(1:PRIVATE_LOOPCOUNT)) copy(c(1:PRIVATE_LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO i_a = 0, 1\n              !$acc loop\n              DO i_b = 0, 1\n                !$acc loop\n                DO i_c = 0, 1\n                  !$acc loop\n                  DO i_d = 0, 1\n                    !$acc loop\n                    DO i_e = 0, 1\n                      !$acc loop\n                      DO i_f = 0, 1\n                        !$acc loop\n                        DO i_g = 0, 1\n                          !$acc loop\n                          DO i_h = 0, 1\n                            !$acc loop\n                            DO i_i = 0, 1\n                              !$acc loop\n                              DO i_j = 0, 1\n                                c(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) = &\n                                a(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) + &\n                                b(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1)\n                              END DO\n                            END DO\n                          END DO\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, PRIVATE_LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        g = 0\n        \n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), c(1:LOOPCOUNT), f(1:LOOPCOUNT), g(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(c(1:LOOPCOUNT)) wait(1) async(4)\n          !$acc update host(f(1:LOOPCOUNT)) wait(2) async(5)\n          !$acc parallel wait(1, 2) async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = c(x) + f(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(g(1:LOOPCOUNT)) async(3)\n        !$acc end data\n        !$acc wait\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          ELSE IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          ELSE IF (abs(g(x) - (f(x) + c(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_host = a\n\n        !$acc parallel copy(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 2 * a(x)\n          END DO \n        !$acc end parallel\n    \n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a_host(x) - (a(x) / 2)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyin.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        b = 0\n\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !$acc parallel copyin(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 0.0\n          END DO\n\n        !$acc end parallel\n\n        DO x = 1, LOOPCOUNT\n          IF ((abs(a(x) - a_copy(x)) > PRECISION .AND. hasDevice(1) .eq. 1) .OR. (hasDevice(1) .eq. 0 .AND. abs(a(x)) > PRECISION)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n        IF (hasDevice(1) .eq. 1) THEN\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel copyout(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) - a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) - a(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(b(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x)) > 2 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_create.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,parallel,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1)) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n          !$acc exit data copyout(c(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,default,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: errors = 0\n\n        a = 0\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel default(present)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = 1.0\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - 1) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_firstprivate.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,firstprivate,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, d !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c, c_copy\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n        c_copy = c\n        d = 0\n        \n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(d(1:10*LOOPCOUNT))\n          !$acc parallel firstprivate(c(1:LOOPCOUNT))\n            !$acc loop gang\n            DO x = 0, 9\n              !$acc loop worker\n              DO y = 1, LOOPCOUNT\n                d(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,firstprivate,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, d !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c, c_copy\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n        \n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(d(1:10*LOOPCOUNT))\n          !$acc parallel firstprivate(c(1:LOOPCOUNT))\n            !$acc loop gang independent\n            DO x = 0, 9\n              !$acc loop worker independent\n              DO y = 1, LOOPCOUNT\n                c(y) = a(x * LOOPCOUNT + y) - b(x * LOOPCOUNT + y)\n              END DO\n              !$acc loop worker independent\n              DO y = 1, LOOPCOUNT\n                d(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, 10 * LOOPCOUNT\n          IF (abs(d(x) - (2 * a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO       \n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_if.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc parallel if(host)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (dev_test(1) .eq. 0) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = a + b\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel if(host) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = a + b\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel if(device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = c(x) + a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)), copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (2 * (a(x) + b(x)))) .gt. 2 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        a = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 1\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - 1) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        a = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) + c(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (b(x) + c(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c, d !Data\n\t\t\t\tINTEGER,DIMENSION(10):: errors_array\n        INTEGER :: errors\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = a + b\n\t\t\t\terrors = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT), c(1:10*LOOPCOUNT), d(1:10*LOOPCOUNT)) copy(errors_array(1:10))\n          DO x = 0, 9\n            !$acc parallel loop async(x)\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            !$acc parallel loop async(x) reduction(+:errors_array(x))\n            DO y = 1, LOOPCOUNT\n              IF (c(x * LOOPCOUNT + y) - d(x * LOOPCOUNT + y) .gt.  PRECISION .OR. &\n                d(x * LOOPCOUNT + y) - c(x * LOOPCOUNT + y) .gt. PRECISION) THEN\n                errors_array(x) = errors_array(x) + 1\n              END IF\n            END DO\n          END DO\n\t\t\t\t\t!$acc wait\n        !$acc end data\n\n\t\t\t\tDO x = 1, 10\n\t\t\t\t\terrors = errors + errors_array(x)\n\t\t\t\tEND DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_auto.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,auto,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b !Data\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc parallel loop auto\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel loop auto\n          DO x = 2, LOOPCOUNT\n            a(x) = a(x - 1) + a(x)\n          END DO\n        !$acc end data\n\n        temp = 0\n        DO x = 1, LOOPCOUNT\n          temp = temp + a_copy(x)\n          IF (abs(temp - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_gang.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel loop gang\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        total = 0\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(total)\n          !$acc parallel loop reduction(+:total)\n          DO x = 1, LOOPCOUNT\n            total = total + a(x) + b(x)\n          END DO\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. LOOPCOUNT * PRECISION) THEN\n          WRITE(*, *) total\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c, d !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        avg = 0\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) create(c(1:10*LOOPCOUNT)) copyout(d(1:10*LOOPCOUNT))\n          !$acc parallel loop gang private(avg)\n          DO x = 0, 9\n            avg = 0\n            !$acc loop worker reduction(+:avg)\n            DO y = 1, LOOPCOUNT\n              avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            avg = avg / LOOPCOUNT\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              d(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y) / avg\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          avg = 0\n          DO y = 1, LOOPCOUNT\n            avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          avg = avg / LOOPCOUNT\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / avg)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0.0\n            !$acc loop vector reduction(+:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .TRUE.\n        LOGICAL :: host_results = .TRUE.\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(.and.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .and. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          host_results = host_results .and. a(x)\n        END DO\n        IF (host_results .neqv. results) THEN\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results, has_false\n        LOGICAL :: host_results = .TRUE.\n        LOGICAL :: temp = .TRUE.\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / LOOPCOUNT)\n        INTEGER :: errors = 0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, 10\n          results(x) = .TRUE.\n          has_false(x) = .FALSE.\n        END DO\n        DO x = 1, 10*LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n            a_copy(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n            a_copy(x) = .FALSE.\n            has_false(x / LOOPCOUNT) = .TRUE.\n          END IF\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc parallel loop gang\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop worker reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (temp .eqv. .TRUE.) THEN\n                IF (a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          temp = .TRUE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .AND. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .TRUE.) THEN\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10):: b\n        LOGICAL,DIMENSION(10):: has_false\n        LOGICAL :: temp\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(10*LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        DO x = 1, 10\n          has_false(x) = .FALSE.\n          b(x) = .TRUE.\n        END DO\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (randoms(x * LOOPCOUNT + y) .lt. false_margin) THEN\n              a(x * LOOPCOUNT + y) = .TRUE.\n            ELSE\n              a(x * LOOPCOUNT + y) = .FALSE.\n              has_false(x + 1) = .TRUE.\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop vector reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) .eqv. .FALSE.) THEN\n              temp = .TRUE.\n            END IF\n          END DO\n          IF (temp .neqv. has_false(x + 1)) THEN\n            errors = 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: b\n        REAL(8),DIMENSION(16 * LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 15\n            IF (randoms(y * LOOPCOUNT + x) .lt. false_margin) THEN\n              temp = 1\n              DO z = 0, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        \n        b = a(1)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(iand:b)\n          DO x = 1, LOOPCOUNT\n            b = iand(b, a(x))\n          END DO\n        !$acc end data\n \n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = iand(a(x), temp)\n        END DO\n        IF (temp .ne. b) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) b\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160*LOOPCOUNT)::randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(10000 * randoms2)\n        b_copy = b\n        false_margin = exp(log(.5)/LOOPCOUNT)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms((y - 1) * 10 * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        \n        DO x = 1, 10\n         c(x) = a((x - 1) * LOOPCOUNT + x)\n        END DO\n        \n        \n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 1, 10\n            temp = a((x - 1) * LOOPCOUNT + 1)\n            !$acc loop worker reduction(iand:temp)\n            DO y = 2, LOOPCOUNT\n              temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n            END DO\n            c(x) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b((x - 1) * LOOPCOUNT + y) = b((x - 1) * LOOPCOUNT + y) + c(x)\n            END DO\n          END DO\n        !$acc end data\n\n       DO x = 1, 10\n         temp = a((x - 1) * LOOPCOUNT + 1)\n         DO y = 2, LOOPCOUNT\n           temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n         END DO\n         IF (temp .ne. c(x)) THEN\n           errors = errors + 1\n         END IF\n         DO y = 1, LOOPCOUNT\n           IF (b((x - 1) * LOOPCOUNT + y) .ne. b_copy((x - 1) * LOOPCOUNT + y) + temp) THEN\n             errors = errors + 1\n           END IF\n         END DO\n       END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: random\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5) / n)\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (random(x * 16 * LOOPCOUNT + (y - 1) * 16 + z - 1) < false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n                \n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc parallel loop private(c)\n          DO x = 0, 9\n            c = a(x * LOOPCOUNT + 1)\n            !$acc loop vector reduction(iand:c)\n            DO y = 1, LOOPCOUNT\n              c = iand(c, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = c\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = a(x * LOOPCOUNT + 1)\n          DO y = 2, LOOPCOUNT\n            temp = iand(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (b(x + 1) .ne. temp) THEN\n            errors = errors + 1\n          END IF\n        END DO       \n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(16*LOOPCOUNT):: random\n        INTEGER :: errors = 0\n        INTEGER :: temp\n        INTEGER :: b\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 16\n            IF (random((y - 1) * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        b = a(1)\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(ior:b)\n          DO x = 2, LOOPCOUNT\n            b = ior(b, a(x))\n          END DO\n        !$acc end data\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = ior(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        false_margin = exp(log(.5)/n)\n        b = FLOOR(6*randoms2)\n        b_copy = b\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (randoms(x * 16 * LOOPCOUNT + y * 16 + z - 1) .gt. false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10 * LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10) :: b\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160 * LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / n)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms(y * 10 * LOOPCOUNT + y - 1) .gt. false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        INTEGER :: errors = 0\n        INTEGER :: b = 0\n        INTEGER :: temp = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(ieor:b)\n          DO x = 1, LOOPCOUNT\n            b = ieor(b, a(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = ieor(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms, randoms2\n        INTEGER,DIMENSION(10):: c\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(randoms2*1000000)\n        b_copy = b\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: maximum, temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        maximum = 0\n        temp = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel loop reduction(max:maximum)\n          DO x = 1, LOOPCOUNT\n            maximum = max(maximum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = max(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - maximum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: maximum\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / maximum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) - maximum(x + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            ELSE IF ((c(x * LOOPCOUNT + y) - 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: maximum\n        INTEGER :: errors = 0\n        REAL(8) :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        maximum = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(maximum(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - maximum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8):: minimum = 1000\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel loop reduction(min:minimum)\n          DO x = 1, LOOPCOUNT\n            minimum = min(minimum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = min(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - minimum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = a + 1\n        b = b + 1\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop worker reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n            !$acc loop\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / minimum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) / temp)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y!Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop vector reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: temp = 1\n        REAL(8) :: multiplied_total = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a)/1000\n        b = (999.4 + b)/1000\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(*:multiplied_total)\n          DO x = 1, LOOPCOUNT\n            multiplied_total = multiplied_total * (a(x) + b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp * (a(x) + b(x))\n        END DO\n        IF (abs(temp - multiplied_total) .gt. ((temp / 2) + (multiplied_total / 2)) * PRECISION) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) multiplied_total\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: totals\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = (999.4 + a) / 2000\n        b = (999.4 + b) / 2000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT), totals(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop worker reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            totals(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - totals(x + 1)) .gt. ((temp / 2) + (totals(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) temp\n            WRITE(*, *) totals(x + 1)\n            WRITE(*, *) \" \"\n          END IF\n          DO y = 1, LOOPCOUNT \n            IF (abs(c(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1))) .gt. c(x * LOOPCOUNT + y) * PRECISION) THEN\n              errors = errors + 1\n              WRITE(*, *) c(x * LOOPCOUNT + y)\n              WRITE(*, *) a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              WRITE(*, *) \" \"\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a) / 1000\n        b = (999.4 + b) / 1000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop vector reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. ((temp / 2) + (c(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .FALSE.\n        LOGICAL :: temp = .FALSE.\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        REAL(8),DIMENSION(LOOPCOUNT):: random\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        DO x = 1, LOOPCOUNT\n          IF (random(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(.OR.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .OR. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp .OR. a(x)\n        END DO\n        IF (temp .neqv. results) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results\n        LOGICAL :: temp = .FALSE.\n        REAL(8),DIMENSION(10 * LOOPCOUNT) :: random\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (random(x) .gt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n          a_copy(x) = a(x)\n        END DO\n\n        DO x = 1, 10\n          results(x) = .FALSE.\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop worker reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (results(x + 1) .eqv. .TRUE.) THEN\n                IF(a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .FALSE.) THEN\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10) :: b\n        LOGICAL :: temp\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / 2)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (randoms(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop vector reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc parallel loop seq\n          DO x = 2, LOOPCOUNT\n            b(x) = b(x - 1) + a(x)\n          END DO\n        !$acc end data\n        \n        DO x = 2, LOOPCOUNT\n          IF (abs(b(x) - (b(x - 1) + a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,tile,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT,SMALL_LOOPCOUNT)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copyin(a(1:SMALL_LOOPCOUNT), b(1:SMALL_LOOPCOUNT), c(1:SMALL_LOOPCOUNT)) copyout(d(1:SMALL_LOOPCOUNT,1:SMALL_LOOPCOUNT))\n          !$acc parallel loop tile(*, *) reduction(+:temp)\n          DO x = 1, SMALL_LOOPCOUNT\n            DO y = 1, SMALL_LOOPCOUNT \n              temp = 0\n              DO z = 1, SMALL_LOOPCOUNT\n                temp = temp + a(z) + b(z) + c(z)\n              END DO\n              d(x,y) = temp\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 1, SMALL_LOOPCOUNT \n          DO y = 1, SMALL_LOOPCOUNT \n            temp = 0\n            DO z = 1, SMALL_LOOPCOUNT\n              temp = temp + a(z) + b(z) + c(z) \n            END DO\n            IF (abs(d(x,y) - temp) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel loop vector\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n        \n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplyer\n        INTEGER :: errors = 0\n\n        multiplyer = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplyer\n            END DO\n            multiplyer = multiplyer + 1\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + ((a(x) + b(x)) * multiplyer)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel loop worker\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplyer\n        INTEGER :: errors = 0\n\n        multiplyer = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplyer\n            END DO\n            multiplyer = multiplyer + 1\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + (a(x) + b(x)) * multiplyer\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_private.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c\n        REAL(8),DIMENSION(10)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc enter data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT), d(1:10)) \n        !$acc parallel num_gangs(10) private(c(1:LOOPCOUNT))\n          !$acc loop gang\n          DO x = 1, 10\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(y) = a((x - 1) * LOOPCOUNT + y) + b((x - 1) * LOOPCOUNT + y)\n            END DO\n            !$acc loop seq\n            DO y = 1, LOOPCOUNT\n              d(x) = d(x) + c(y)\n            END DO\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(d(1:10)) delete(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT))\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - d(x + 1)) .gt. 2 * PRECISION * LOOPCOUNT) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_reduction.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: results = 0\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel reduction(+:results)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              results = results + a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          results = results - a(x)\n        END DO\n        IF (abs(results) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_scalar_default_firstprivate.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(1):: random\n        INTEGER :: errors = 0\n        REAL(8) :: scalar\n        REAL(8) :: scalar_copy\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        scalar = random(1)\n        scalar_copy = scalar\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x) + scalar\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - (a(x) + scalar_copy)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (abs(scalar_copy - scalar) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_switch.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a\n        REAL(8),DIMENSION(LOOPCOUNT):: b, c, randoms!Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(randoms)\n        a = floor(randoms * 3)\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            SELECT CASE (a(x))\n              CASE (0)\n                c(x) = b(x) * b(x)\n              CASE (1)\n                c(x) = b(x) / b(x)\n              CASE (2)\n                c(x) = b(x) / 2\n            END SELECT\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          SELECT CASE (a(x))\n            CASE (0)\n              IF (abs(c(x) - (b(x) * b(x))) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            CASE (1)\n              IF (abs(c(x) - (b(x) / b(x))) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            CASE (2)\n              IF (abs(c(x) - (b(x) / 2)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n          END SELECT\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        !$acc update device(a(1:LOOPCOUNT)) async(1)\n        !$acc parallel present(a(1:LOOPCOUNT)) wait(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = a(x) + 1\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (b(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_while_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10, LOOPCOUNT):: a !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n \n        !$acc data copy(a(1:10, 1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, 10\n              avg = 0.0\n              DO WHILE (avg - 1000 .lt. PRECISION * LOOPCOUNT)\n                avg = 0.0\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(x, y) = a(x, y) * 1.5\n                END DO\n                !$acc loop reduction(+:avg)\n                DO y = 1, LOOPCOUNT\n                  avg = avg + (a(x, y) / LOOPCOUNT)\n                END DO\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, 10\n          avg = 0.0\n          DO y = 1, LOOPCOUNT\n            avg = avg + (a(x, y) / LOOPCOUNT)\n          END DO\n          IF (avg < 1000 .OR. avg > 1600) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, i_a, i_b, i_c, i_d, i_e, i_f, i_g, i_h, i_i, i_j !Iterators\n  INTEGER, PARAMETER :: PRIVATE_LOOPCOUNT = 1024\n  REAL(8),DIMENSION(PRIVATE_LOOPCOUNT):: a, b, c !Data\n  INTEGER :: errors\n  errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:PRIVATE_LOOPCOUNT), b(1:PRIVATE_LOOPCOUNT)) copy(c(1:PRIVATE_LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO i_a = 0, 1\n        !$acc loop\n        DO i_b = 0, 1\n          !$acc loop\n          DO i_c = 0, 1\n            !$acc loop\n            DO i_d = 0, 1\n              !$acc loop\n              DO i_e = 0, 1\n                !$acc loop\n                DO i_f = 0, 1\n                  !$acc loop\n                  DO i_g = 0, 1\n                    !$acc loop\n                    DO i_h = 0, 1\n                      !$acc loop\n                      DO i_i = 0, 1\n                        !$acc loop\n                        DO i_j = 0, 1\n                          c(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) = &\n                          a(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) + &\n                          b(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1)\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          END DO\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, PRIVATE_LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g\n  INTEGER:: x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  CALL RANDOM_NUMBER(d)\n  CALL RANDOM_NUMBER(e)\n  f = 0\n  g = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), f(1:LOOPCOUNT), g(1:LOOPCOUNT))\n    !$acc serial async(1)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = a(x) + b(x)\n      END DO\n    !$acc end serial\n    !$acc serial async(2)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        f(x) = d(x) + e(x)\n      END DO\n    !$acc end serial\n    !$acc serial wait(1, 2) async(3)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        g(x) = c(x) + f(x)\n      END DO\n    !$acc end serial\n\n    !$acc update host(c(1:LOOPCOUNT)) async(1)\n    !$acc update host(f(1:LOOPCOUNT)) async(2)\n    !$acc update host(g(1:LOOPCOUNT)) async(3)\n\n    !$acc wait(1)\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc wait(2)\n    DO x = 1, LOOPCOUNT\n      IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc wait(3)\n    DO x = 1, LOOPCOUNT\n      IF (abs(g(x) - (a(x) + b(x) + d(x) + e(x))) .gt. 4 * PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  !$acc end data\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_host\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_host = a\n\n  !$acc serial copy(a(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, N\n      a(x) = 2 * a(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, N\n    IF (abs(a(x) - (2 * a_host(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyin.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER,DIMENSION(1):: hasDevice\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n  b = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n    hasDevice(1) = 0\n  !$acc end parallel\n\n  !$acc serial copyin(a(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = 0\n    END DO\n  !$acc end serial\n\n  DO x = 1, LOOPCOUNT\n    IF (hasDevice(1) .eq. 1) THEN\n      IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    ELSE\n      IF (abs(a(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER,DIMENSION(1):: hasDevice\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc data copy(b(1:LOOPCOUNT))\n    !$acc serial copyin(a(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial copyout(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (hasDevice(1) .eq. 1) THEN\n    !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n      !$acc serial copyout(b(1:LOOPCOUNT))\n        !$acc loop\n        DO x = 1, LOOPCOUNT\n          b(x) = b(x) - a(x)\n        END DO\n      !$acc end serial\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test3()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial copyout(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = b(x) - a(x)\n      END DO\n    !$acc end serial\n    !$acc update host(b(1:LOOPCOUNT))\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x)) .gt. 2 * PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_create.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial create(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = b(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER,DIMENSION(1):: devtest\n  INTEGER:: x\n  errors = 0\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + b(x) + a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER,DIMENSION(1):: devtest\n  INTEGER:: x\n  errors = 0\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 1\n\n    !$acc enter data copyin(c(1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      c(x) = 0\n    END DO\n\n    !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n      !$acc serial\n        !$acc loop\n        DO x = 1, LOOPCOUNT\n          c(x) = c(x) + a(x) + b(x)\n        END DO\n      !$acc end serial\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      if (abs(c(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc exit data copyout(c(1:LOOPCOUNT))\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,default,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a\n  INTEGER:: x\n  errors = 0\n\n  a = 0\n\n  !$acc enter data copyin(a(1:LOOPCOUNT))\n  !$acc serial default(present)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = 1\n    END DO\n  !$acc end serial\n  !$acc exit data copyout(a(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - 1) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "default"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_firstprivate.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,firstprivate,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, d\n  REAL(8),DIMENSION(10):: c, c_copy\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  CALL RANDOM_NUMBER(c)\n  c_copy = c\n  d = 0\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copy(d(1:10, 1:LOOPCOUNT))\n    !$acc serial firstprivate(c(1:10))\n      !$acc loop gang\n      DO y = 1, LOOPCOUNT\n        !$acc loop worker\n        DO x = 1, 10\n          d(x, y) = a(x, y) + b(x, y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      IF (abs(d(x, y) - (a(x, y) + b(x, y) + c_copy(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,firstprivate,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, d\n  REAL(8),DIMENSION(10):: c, c_copy\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  d = 0\n  c = 0\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copy(d(1:10, 1:LOOPCOUNT))\n    !$acc serial firstprivate(c(1:10))\n      !$acc loop gang independent\n      DO y = 1, LOOPCOUNT\n        !$acc loop worker independent\n        DO x = 1, 10\n          c(x) = a(x, y) - b(x, y)\n        END DO\n        !$acc loop worker independent\n        DO x = 1, 10\n          d(x, y) = a(x, y) + b(x, y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      IF (abs(d(x, y) - (2 * a(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_if.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc serial if(host)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, N\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1)) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = a + b\n\n    !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial if(host) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + a(x) + b(x)\n      END DO\n    !$acc end serial\n    !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test3()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = a + b\n  \n  !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n  !$acc serial if(device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = c(x) + a(x) + b(x)\n    END DO\n  !$acc end serial\n  !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (2 * (a(x) + b(x)))) .gt. PRECISION * 2) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copy(c(1:LOOPCOUNT))\n    !$acc serial loop\n    DO x = 1, LOOPCOUNT\n      c(x) = 1\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - 1) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = b(x)\n      END DO\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d\n  INTEGER,DIMENSION(10):: error_array\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      d(x, y) = a(x, y) + b(x, y)\n    END DO\n  END DO\n\n  error_array = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10)) copy(error_array(1:10))\n    DO y = 1, 10\n      !$acc serial loop async(y)\n      DO x = 1, LOOPCOUNT\n        c(x, y) = a(x, y) + b(x, y)\n      END DO\n      !$acc serial loop async(y)\n      DO x = 1, LOOPCOUNT\n        IF (((c(x, y) - d(x, y)) .gt. PRECISION) .OR. ((d(x, y) - c(x, y)) .gt. PRECISION)) THEN\n          error_array(y) = error_array(y) + 1\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    errors = errors + error_array(x)\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_auto.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,auto,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER:: x\n  REAL(8):: temp\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n    !$acc serial loop auto\n    DO x = 1, LOOPCOUNT\n      b(x) = a(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc serial loop auto\n    DO x = 2, LOOPCOUNT\n      a(x) = a(x - 1) + a(x)\n    END DO\n  !$acc end data\n\n  temp = 0\n  DO x = 1, LOOPCOUNT\n    temp = temp + a_copy(x)\n    IF (abs(temp - a(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_gang.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop gang\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: total\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  total = 10\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(+:total)\n    DO x = 1, LOOPCOUNT\n      total = total + a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    total = total - (a(x) + b(x))\n  END DO\n\n  IF (abs(total - 10) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d\n  REAL(8):: avg, temp\n  INTEGER:: x, y\n  avg = 0\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) create(c(1:LOOPCOUNT, 1:10)) copyout(d(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(avg)\n    DO y = 1, 10\n      avg = 0\n      !$acc loop worker reduction(+:avg)\n      DO x = 1, LOOPCOUNT\n        c(x, y) = a(x, y) + b(x, y)\n        avg = avg + c(x, y)\n      END DO\n      avg = avg / LOOPCOUNT\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        d(x, y) = c(x, y) - avg\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = 0\n    DO x = 1, LOOPCOUNT\n      temp = temp + (a(x, y) + b(x, y))\n    END DO\n    temp = temp / LOOPCOUNT\n    DO x = 1, LOOPCOUNT\n      IF (abs(d(x, y) - ((a(x, y) + b(x, y)) - temp)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: c\n  REAL(8):: temp\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10), b(1:LOOPCOUNT,1:10)) copyout(c(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(+:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp + (a(x, y) + b(x, y))\n      END DO\n      c(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      c(y) = c(y) - (a(x, y) + b(x, y))\n    END DO\n    IF (abs(c(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  INTEGER:: x\n  LOGICAL,DIMENSION(LOOPCOUNT):: a\n  LOGICAL:: result, host_result\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  REAL(8):: false_margin = EXP(LOG(.5) / LOOPCOUNT)\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    IF (randoms(x) .lt. false_margin) THEN\n      a(x) = .TRUE.\n    ELSE\n      a(x) = .FALSE.\n    END IF\n  END DO\n\n  result = .TRUE.\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(.AND.:result)\n    DO x = 1, LOOPCOUNT\n      result = result .AND. a(x)\n    END DO\n  !$acc end data\n\n  host_result = .TRUE.\n  DO x = 1, LOOPCOUNT\n    host_result = host_result .AND. a(x)\n  END DO\n\n  IF (host_result .NEQV. result) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, a_copy\n  LOGICAL,DIMENSIOn(10):: has_false\n  LOGICAL:: temp\n  INTEGER:: x, y\n  errors = 0\n  false_margin = EXP(LOG(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  has_false = .FALSE.\n  a = .TRUE.\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .FALSE.\n        has_false(y) = .TRUE.\n      END IF\n    END DO\n  END DO\n  a_copy = a\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = .TRUE.\n      !$acc loop worker reduction(.AND.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .AND. a(x, y)\n      END DO\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        IF (temp) THEN\n          IF (a(x, y) .eq. 1) THEN\n            a(x, y) = .FALSE.\n          ELSE\n            a(x, y) = .TRUE.\n          END IF\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF ((has_false(y) .eqv. .TRUE.) .AND. (a(x, y) .neqv. a_copy(x, y))) THEN\n        errors = errors + 1\n      ELSEIF ((has_false(y) .eqv. .FALSE.) .AND. (a(x, y) .eqv. a_copy(x, y))) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a\n  LOGICAL,DIMENSION(10):: b, has_false\n  LOGICAL:: temp\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  REAL(8):: false_margin\n  INTEGER:: errors, x, y\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  has_false = .FALSE.\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .lt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n        has_false(y) = .TRUE.\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = .TRUE.\n      !$acc loop vector reduction(.AND.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .AND. a(x, y)\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (has_false(x) .eqv. b(x)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(N):: a\n  INTEGER:: b, host_b\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 16):: randoms\n  INTEGER:: x, y\n  INTEGER:: errors\n\n  errors = 0\n  false_margin = exp(log(.5)/LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 16\n      IF (randoms(x, y) .lt. false_margin) THEN\n        a(x) = a(x) + 2**(y - 1)\n      END IF\n    END DO\n  END DO\n\n  b = a(1)\n  host_b = a(1)\n  DO x = 2, LOOPCOUNT\n    host_b = iand(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(iand: b)\n    DO x = 1, LOOPCOUNT\n      b = iand(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, b_copy\n  INTEGER,DIMENSION(10):: c, host_c\n  INTEGER:: errors, x, y, z, temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 17):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      b(x) = INT(10 * randoms(x, y, 17))\n      DO z = 1, 16\n        IF (randoms(x, y, z) .lt. false_margin) THEN\n          a(x) = a(x) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  b_copy = b\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 1, LOOPCOUNT\n      temp = iand(temp, a(x, y))\n    END DO\n    host_c(y) = temp\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = a(1, y)\n      !$acc loop worker reduction(iand:temp)\n      DO x = 1, LOOPCOUNT\n        temp = iand(temp, a(x, y))\n      END DO\n      c(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (host_c(y) .ne. c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (b(x, y) .ne. b_copy(x, y) + c(y)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n  LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b, b_host\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 16):: randoms\n  REAL(8):: false_margin\n  INTEGER:: x, y, temp, c, z\n  INTEGER:: errors\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      DO z = 1, 16\n        IF (randoms(x, y, z) .lt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  DO y = 1, 10\n    b_host(y) = a(1, y)\n    DO x = 1, LOOPCOUNT\n      b_host(y) = iand(b_host(y), a(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(c)\n    DO y = 1, 10\n      c = a(1, y)\n      !$acc loop vector reduction(iand:c)\n      DO x = 1, LOOPCOUNT\n        c = iand(c, a(x, y))\n      END DO\n      b(y) = c\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (b(x) .ne. b_host(x)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, temp, x, y, b, host_b\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 16):: randoms\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 16\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x) = a(x) + 2**(y - 1)\n      END IF\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    host_b = ior(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(ior:b)\n    DO x = 1, LOOPCOUNT\n      b = ior(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x, y, z, temp\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, b_copy\n  INTEGER,DIMENSION(10):: c\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 17):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      b(x, y) = INT(randoms(x, y, 17) * 1000)\n      DO z = 1, 16\n        IF (randoms(x, y, z) .gt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z-1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  b_copy = b\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(ior:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ior(temp, a(x, y))\n      END DO\n      c(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 2, LOOPCOUNT\n      temp = ior(temp, a(x, y))\n    END DO\n    IF (temp .ne. c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (b(x, y) .ne. (b_copy(x, y) + temp)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x, y, z, temp\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 16):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 16\n        IF (randoms(x, y, z) .gt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(ior:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ior(temp, a(x, y))\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 2, LOOPCOUNT\n      temp = ior(temp, a(x, y))\n    END DO\n    IF (temp .ne. b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  INTEGER:: errors, b, host_b, x\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    a(x) = INT(randoms(x) * 100000)\n  END DO\n\n  b = 0\n  host_b = 0\n\n  DO x = 1, LOOPCOUNT\n    host_b = ieor(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(ieor:b)\n    DO x = 1, LOOPCOUNT\n      b = ieor(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, host_b\n  INTEGER,DIMENSION(10):: c, host_c\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 2):: randoms\n  INTEGER:: errors, x, y, temp\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  c = 0\n  host_c = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      b(x, y) = INT(randoms(x, y, 1) * 1000)\n      a(x, y) = INT(randoms(x, y, 2) * 1000)\n    END DO\n  END DO\n  host_b = b\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_c(y) = ieor(host_c(y), a(x, y))\n    END DO\n    DO x = 1, LOOPCOUNT\n      host_b(x, y) = host_b(x, y) + host_c(y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(ieor:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ieor(temp, a(x, y))\n      END DO\n      c(y) = temp\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (c(y) .ne. host_c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (host_b(x, y) .ne. b(x, y)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b, host_b\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors, x, y, temp\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      a(x, y) = INT(randoms(x, y) * 10000)\n    END DO\n  END DO\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_b(y) = ieor(host_b(y), a(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(ieor:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ieor(temp, a(x, y))\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (b(y) .ne. host_b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: maxval, host_max\n  INTEGER:: errors, x\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  errors = 0\n\n  DO x = 1, LOOPCOUNT\n    host_max = max(host_max, a(x) * b(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(max:maxval)\n    DO x = 1, LOOPCOUNT\n      maxval = max(maxval, a(x) * b(x))\n    END DO\n  !$acc end data\n\n  IF (abs(host_max - maxval) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c\n  REAL(8),DIMENSIOn(10):: host_maximums, maximums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  maximums = 0\n  host_maximums = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_maximums(y) = max(host_maximums(y), a(x, y) * b(x, y))\n    ENDDO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(c(1:LOOPCOUNT, 1:10), maximums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(max:temp)\n      DO x = 1, LOOPCOUNT\n        temp = max(temp, a(x, y) * b(x, y))\n      END DO\n      maximums(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x, y) = (a(x, y) * b(x, y)) / maximums(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (maximums(y) .ne. host_maximums(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x, y) - ((a(x, y) * b(x, y)) / maximums(y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: maximums, host_maximums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  host_maximums = 0\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_maximums(y) = max(host_maximums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(maximums(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(max:temp)\n      DO x = 1, LOOPCOUNT\n        temp = max(temp, a(x, y) * b(x, y))\n      END DO\n      maximums(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (abs(host_maximums(x) - maximums(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: minimum, host_minimum\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  minimum = a(1) * b(1)\n  host_minimum = minimum\n\n  DO x = 2, LOOPCOUNT\n    host_minimum = min(host_minimum, a(x) * b(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(min:minimum)\n    DO x = 1, LOOPCOUNT\n      minimum = min(minimum, a(x) * b(x))\n    END DO\n  !$acc end data\n\n  IF (abs(host_minimum - minimum) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c\n  REAL(8),DIMENSION(10):: minimums, host_minimums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  minimums = 0\n  host_minimums = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_minimums(y) = min(host_minimums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(c(1:LOOPCOUNT, 1:10), minimums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 1\n      !$acc loop reduction(min: temp)\n      DO x = 1, LOOPCOUNT\n        temp = min(temp, a(x, y) * b(x, y))\n      END DO\n      minimums(y) = temp\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x, y) = (a(x, y) * b(x, y)) / minimums(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (abs(minimums(y) - host_minimums(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x, y) - ((a(x, y) * b(x, y)) / minimums(y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: minimums, host_minimums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n  minimums = 1\n  host_minimums = 1\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_minimums(y) = min(host_minimums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(minimums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 1\n      !$acc loop vector reduction(min:temp)\n      DO x = 1, LOOPCOUNT\n        temp = min(temp, a(x, y) * b(x, y))\n      END DO\n      minimums(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (abs(host_minimums(x) - minimums(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10):: a, b\n  REAL(8):: reduced, host_reduced\n  INTEGER:: errors, x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  DO y = 1, LOOPCOUNT\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    reduced = 1\n    host_reduced = 1\n\n    DO x = 1, 10\n      host_reduced = host_reduced * (a(x) + b(x))\n    END DO\n\n    !$acc data copyin(a(1:10), b(1:10))\n      !$acc serial loop reduction(*:reduced)\n      DO x = 1, 10\n        reduced = reduced * (a(x) + b(x))\n      END DO\n    !$acc end data\n\n    IF (abs(host_reduced - reduced) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, c\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, host_totals\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n\n  host_totals = 1\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      host_totals(y) = host_totals(y) * (a(x, y) + b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copyout(c(1:10, 1:LOOPCOUNT)) copy(totals(1:LOOPCOUNT))\n    !$acc serial loop gang private(temp)\n    DO y = 1, LOOPCOUNT\n      temp = 1\n      !$acc loop worker reduction(*:temp)\n      DO x = 1, 10\n        temp = temp * (a(x, y) + b(x, y))\n      END DO\n      totals(y) = temp\n      !$acc loop worker\n      DO x = 1, 10\n        c(x, y) = (a(x, y) + b(x, y)) / totals(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    IF (abs(host_totals(y) - totals(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, 10\n      IF (c(x, y) - ((a(x, y) + b(x, y)) / totals(y)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, host_totals\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  host_totals = 1\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      host_totals(y) = host_totals(y) * (a(x, y) + b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copyout(totals(1:LOOPCOUNT))\n    !$acc serial loop private(temp)\n    DO y = 1, LOOPCOUNT\n      temp = 1\n      !$acc loop vector reduction(*:temp)\n      DO x = 1, 10\n        temp = temp * (a(x, y) + b(x, y))\n      END DO\n      totals(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    IF (abs(host_totals(y) - totals(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT):: a\n  LOGICAL:: result, host_result\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  REAL(8):: false_margin\n  INTEGER:: errors, x\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    IF (randoms(x) .gt. false_margin) THEN\n      a(x) = .TRUE.\n    ELSE\n      a(x) = .FALSE.\n    END IF\n  END DO\n\n  host_result = .FALSE.\n  result = .FALSE.\n\n  DO x = 1, LOOPCOUNT\n    host_result = host_result .OR. a(x)\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(.OR.: result)\n    DO x = 1, LOOPCOUNT\n      result = result .OR. a(x)\n    END DO\n  !$acc end data\n\n  IF (host_result .neqv. result) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, a_copy\n  LOGICAL,DIMENSION(10):: results\n  LOGICAL:: temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  a_copy = a\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = .FALSE.\n      !$acc loop worker reduction(.OR.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .OR. a(x, y)\n      END DO\n      results(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        IF (results(y)) THEN\n          IF (a(x, y)) THEN\n            a(x, y) = .FALSE.\n          ELSE\n            a(x, y) = .TRUE.\n          END IF\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = .FALSE.\n    DO x = 1, LOOPCOUNT\n      temp = temp .OR. a(x, y)\n    END DO\n    IF (temp .neqv. results(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (temp) THEN\n        IF (a(x, y) .eqv. a_copy(x, y)) THEN\n          errors = errors + 1\n        END IF\n      ELSE\n        IF (a(x, y) .neqv. a_copy(x, y)) THEN\n          errors = errors + 1\n        END IF\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a\n  LOGICAL,DIMENSION(10):: b\n  LOGICAL:: temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = .FALSE.\n      !$acc loop vector reduction(.OR.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .OR. a(x, y)\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = .FALSE.\n    DO x = 1, LOOPCOUNT\n      temp = temp .OR. a(x, y)\n    END DO\n    IF (temp .neqv. b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: temp\n  INTEGER:: errors, x\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n    !$acc serial loop seq\n    DO x = 2, LOOPCOUNT\n      b(x) = b(x - 1) + a(x)\n    END DO\n  !$acc end data\n\n  temp = 0\n  DO x = 2, LOOPCOUNT\n    temp = temp + a(x)\n    IF (abs(b(x) - temp) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,tile,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(100):: a, b, c\n  REAL(8),DIMENSION(100, 100):: d2\n  REAL(8),DIMENSION(100, 100, 100):: d3\n  INTEGER:: x, y, z\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  CALL RANDOM_NUMBER(c)\n  d2 = 0\n  d3 = 0\n\n  !$acc data copyin(a(1:100), b(1:100), c(1:100)) copyout(d2(1:100, 1:100))\n    !$acc serial loop tile(*, *)\n    DO x = 1, 100\n      DO y = 1, 100\n        DO z = 1, 100\n          d2(x, y) = d2(x, y) + (a(x) * b(y) * c(z))\n        END DO\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 100\n    DO y = 1, 100\n      DO z = 1, 100\n        d2(x, y) = d2(x, y) - (a(x) * b(y) * c(z))\n      END DO\n      IF (abs(d2(x, y)) .gt. 10*PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:100), b(1:100), c(1:100)) copyout(d3(1:100, 1:100, 1:100))\n    !$acc serial loop tile(*, *, *)\n    DO x = 1, 100\n      DO y = 1, 100\n        DO z = 1, 100\n          d3(x, y, z) = a(x) * b(y) * c(z)\n        END DO\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 100\n    DO y = 1, 100\n      DO z = 1, 100\n        IF (abs(d3(x, y, z) - (a(x) * b(y) * c(z))) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n      END DO\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop vector\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: multiplier, x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop vector\n      DO x = 1, LOOPCOUNT\n        c(x) = (a(x) + b(x)) * multiplier\n      END DO\n      multiplier = multiplier + 1\n      !$acc loop vector\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - ((a(x) + b(x)) * 3)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop worker\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: multiplier\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x) = (a(x) + b(x)) * multiplier\n      END DO\n      multiplier = multiplier + 1\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n  !$acc serial present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end serial\n  !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_private.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(LOOPCOUNT):: c\n  REAL(8),DIMENSION(10):: d\n  REAL(8):: temp\n  INTEGER:: x, y\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(d(1:10))\n    !$acc serial private(c(1:LOOPCOUNT))\n      !$acc loop gang\n      DO y = 1, 10\n        !$acc loop worker\n        DO x = 1, LOOPCOUNT\n          c(x) = a(x, y) + b(x, y)\n        END DO\n        !$acc loop seq\n        DO x = 1, LOOPCOUNT\n          d(y) = d(y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, 10\n    temp = 0\n    DO x = 1, LOOPCOUNT\n      temp = temp + (a(x, y) + b(x, y))\n    END DO\n    IF (abs(d(x) - temp) .gt. (2 * PRECISION * LOOPCOUNT)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_reduction.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a\n  REAL(8):: reduction\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc serial copyin(a(1:LOOPCOUNT)) reduction(+:reduction)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      reduction = reduction + a(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, LOOPCOUNT\n    reduction = reduction - a(x)\n  END DO\n\n  IF (abs(reduction) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_scalar_default_firstprivate.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: scalar, scalar_copy\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  scalar = 5.5\n  scalar_copy = scalar\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar_copy)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  IF (abs(scalar_copy - scalar) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_switch.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8),DIMENSION(LOOPCOUNT):: a_randoms, b, b_host, c\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a_randoms)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  b_host = b\n\n  DO x = 1, LOOPCOUNT\n    a(x) = INT(a_randoms(x) * 4)\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        SELECT CASE(a(x))\n        CASE (0)\n          c(x) = b(x) * b(x)\n        CASE (1)\n          c(x) = b(x) / b(x)\n        CASE (2)\n          b(x) = b(x) / 2\n        CASE DEFAULT\n          c(x) = a(x) + b(x)\n        END SELECT\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    SELECT CASE(a(x))\n    CASE(0)\n      IF (abs(c(x) - (b_host(x) * b_host(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE(1)\n      IF (abs(c(x) - 1) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE(2)\n      IF (abs(c(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(b(x) - (b_host(x) / 2)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE DEFAULT\n      IF (abs(c(x) - (b_host(x) + a(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END SELECT\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n\n  !$acc enter data create(a(1:LOOPCOUNT))\n  !$acc update device(a(1:LOOPCOUNT)) async(1)\n  !$acc serial present(a(1:lOOPCOUNT)) wait(1)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = a(x) + 1\n    END DO\n  !$acc end serial\n  !$acc exit data copyout(a(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (a_copy(x) + 1)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_while_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:reduction,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a\n  REAL(8):: avg\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial\n      !$acc loop\n      DO y = 1, 10\n        avg = 0\n        DO WHILE (avg .lt. 1000)\n          avg = 0\n          !$acc loop reduction(+:avg)\n          DO x = 1, LOOPCOUNT\n            a(x, y) = a(x, y) * 1.5\n            avg = avg + (a(x, y) / LOOPCOUNT)\n          END DO\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, 10\n    avg = 0\n    DO x = 1, LOOPCOUNT\n      avg = avg + (a(x, y) / LOOPCOUNT)\n    END DO\n    IF ((avg .lt. 1000) .or. (avg .gt. 1500)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "reduction",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a_host = a\n        b_host = b\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc set default_async(1)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc set default_async(2)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x) * a_host(x) + b_host(x) * b_host(x))) .gt. 4 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(:, :),ALLOCATABLE :: host_copy\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        ALLOCATE(host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT))\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          !host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT)\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            CALL RANDOM_NUMBER(a)\n            host_copy(x, :) = a\n            !$acc set device_num(x)\n            !$acc enter data copyin(a(1:LOOPCOUNT))\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            !$acc set device_num(x)\n            !$acc data present(a(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(y) = a(y) + 1\n                END DO\n              !$acc end parallel\n            !$acc end data\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            !$acc set device_num(x)\n            !$acc exit data copyout(a(1:LOOPCOUNT))\n            temp = errors\n            DO y = 1, LOOPCOUNT\n              IF (abs(a(y) - (host_copy(x, y) + 1)) .gt. PRECISION) THEN\n                PRINT*, a(y)\n                PRINT*, host_copy(x, y)\n                errors = errors + 1\n              END IF\n            END DO\n            IF (temp .ne. errors) THEN\n              PRINT*, x\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_num = acc_get_device_num(acc_get_device_type())\n        !$acc shutdown device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_num.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(host) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(multicore) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(default) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_num_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(nvidia) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "template.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel\n\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            }
        }
    ]
}