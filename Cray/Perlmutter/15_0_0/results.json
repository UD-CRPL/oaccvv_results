var jsonResults = {
    "configs": [
        {
            "CC": "",
            "CCFlags": [],
            "CC_ACC_Version": null,
            "CPP": "",
            "CPPFlags": [],
            "CPP_ACC_Version": null,
            "FC": "ftn",
            "FCFlags": [
                "-h",
                "acc,noomp",
                "-h",
                "msgs"
            ],
            "FC_ACC_Version": "2.0",
            "PostCompileCommands": [],
            "PostRunCommands": [],
            "PreCompileCommands": [],
            "PreRunCommands": [],
            "build_dir": "/global/u1/v/vaidhy/OpenACCV-V/build",
            "config_id": -1,
            "config_name": "init_config.txt",
            "env": null,
            "exclude_tags": [],
            "exclude_tests": [
                "acc_testsuite.Fh",
                "acc_testsuite.h",
                "acc_testsuite_declare.h"
            ],
            "export_format": "json",
            "fast": false,
            "id": 1,
            "include_by_default": true,
            "include_tags": [],
            "include_tests": [],
            "keep_build_dir": false,
            "keep_mutated_tests": false,
            "keep_partial_results": false,
            "keep_policy": "on-error",
            "mutated_test_dir": "/global/u1/v/vaidhy/OpenACCV-V/build/mutated_tests",
            "mutators": [],
            "partial": false,
            "partial_results_dir": "/global/u1/v/vaidhy/OpenACCV-V/build/partial_results",
            "runAll": false,
            "runtime_prefix": "",
            "seed": null,
            "system_name": null,
            "tag_evaluation": null,
            "test_dir": "/global/u1/v/vaidhy/OpenACCV-V/Tests",
            "timeout": 10
        }
    ],
    "runs": {
        "acc_async_test.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 22 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 26 \n  A region starting at line 26 and ending at line 31 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 32 \n  A region starting at line 32 and ending at line 37 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 34 \n  A loop starting at line 34 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 74 \n  A loop starting at line 74 was fused with the loop starting at line 71.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 74 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 75 \n  A loop starting at line 75 was fused with the loop starting at line 71.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 75 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  A data region was created at line 77 and ending at line 93.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 93 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 93 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 93 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory for user shaped variable \"e\" on accelerator, copy back at line 93 (acc_copyout).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 93 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 78 \n  A region starting at line 78 and ending at line 83 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 80 \n  A loop starting at line 80 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 84 \n  A region starting at line 84 and ending at line 89 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 86 \n  A loop starting at line 86 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 95 \n  A loop starting at line 95 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 95 \n  A loop starting at line 95 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 181 \n  A loop starting at line 181 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 191 \n  A loop starting at line 191 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0176 seconds\nCray Fortran : 237 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6161326930159703
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:679 CRAY_ACC_ERROR - Host region (7ffe7865d200 to 7ffe7865f140) overlaps present region (7ffe7865d1c0 to 7ffe7865f100 index 0) but is not contained for 'a(:)' from ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90:77\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.46637914702296257,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test.F90/acc_async_test.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 74 \n  A loop starting at line 74 was fused with the loop starting at line 71.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 74 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 75 \n  A loop starting at line 75 was fused with the loop starting at line 71.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 75 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  A data region was created at line 77 and ending at line 93.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 93 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 93 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 93 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory for user shaped variable \"e\" on accelerator, copy back at line 93 (acc_copyout).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 77 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 93 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 78 \n  A region starting at line 78 and ending at line 83 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 80 \n  A loop starting at line 80 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 84 \n  A region starting at line 84 and ending at line 89 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 86 \n  A loop starting at line 86 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 95 \n  A loop starting at line 95 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 95 \n  A loop starting at line 95 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test.F90, Line = 191 \n  A loop starting at line 191 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 228 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5161402559897397
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.40668436299893074,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_async_test_all.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 20 \n   A loop nest at line 20 collapsed to a single loop.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 22 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 27 \n  A region starting at line 27 and ending at line 32 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 33 \n  A region starting at line 33 and ending at line 38 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 35 \n  A loop starting at line 35 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 46 \n  A loop starting at line 46 was collapsed into the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 47 \n  A loop starting at line 47 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 47 \n  A loop starting at line 47 was vectorized.\n\n\nftn-6066 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 79 \n   A loop nest at line 79 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 80 \n   A loop nest at line 80 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 81 \n   A loop nest at line 81 collapsed to a single loop.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 82 \n  A loop starting at line 82 was fused with the loop starting at line 79.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 82 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 83 \n  A loop starting at line 83 was fused with the loop starting at line 79.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 83 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  A data region was created at line 85 and ending at line 103.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 103 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 103 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 103 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory for user shaped variable \"e\" on accelerator, copy back at line 103 (acc_copyout).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 103 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 87 \n  A region starting at line 87 and ending at line 92 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 89 \n  A loop starting at line 89 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 93 \n  A region starting at line 93 and ending at line 98 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 95 \n  A loop starting at line 95 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6003 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 105 \n  A loop starting at line 105 was collapsed into the loop starting at line 106.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 106 \n  A loop starting at line 106 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 106 \n  A loop starting at line 106 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 200 \n  A loop starting at line 200 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 209 \n  A loop starting at line 209 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0103 seconds\nCray Fortran : 254 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6662254310213029
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:679 CRAY_ACC_ERROR - Host region (7ffe45e20580 to 7ffe45e33e00) overlaps present region (7ffe45e20440 to 7ffe45e33cc0 index 0) but is not contained for 'a(:,:)' from ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90:85\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3664795749937184,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_async_test_all.F90/acc_async_test_all.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 79 \n   A loop nest at line 79 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 80 \n   A loop nest at line 80 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 81 \n   A loop nest at line 81 collapsed to a single loop.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 82 \n  A loop starting at line 82 was fused with the loop starting at line 79.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 82 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 83 \n  A loop starting at line 83 was fused with the loop starting at line 79.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 83 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  A data region was created at line 85 and ending at line 103.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 103 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 103 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 103 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory for user shaped variable \"e\" on accelerator, copy back at line 103 (acc_copyout).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 85 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 103 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 87 \n  A region starting at line 87 and ending at line 92 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 89 \n  A loop starting at line 89 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 93 \n  A region starting at line 93 and ending at line 98 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 95 \n  A loop starting at line 95 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6003 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 105 \n  A loop starting at line 105 was collapsed into the loop starting at line 106.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 106 \n  A loop starting at line 106 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 106 \n  A loop starting at line 106 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_async_test_all.F90, Line = 209 \n  A loop starting at line 209 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 245 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5670621409954038
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31646405899664387,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36600695198285393
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009453809005208313,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 23 \n  A data region was created at line 23 and ending at line 30.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 406 \n  A loop starting at line 406 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46624863299075514
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3663944949803408,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F902 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 65 \n  A loop starting at line 65 was fused with the loop starting at line 64.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 65 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 70 \n  A data region was created at line 70 and ending at line 77.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 70 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 71 \n  A region starting at line 71 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 73 \n  A loop starting at line 73 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 82 \n  A loop starting at line 82 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 82 \n  A loop starting at line 82 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 415 \n  A loop starting at line 415 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0071 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46605645498493686
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662507479893975,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT2 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F903 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 181 \n  A loop starting at line 181 was fused with the loop starting at line 180.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 181 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 186 \n  A data region was created at line 186 and ending at line 193.\n\n\nftn-6420 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 186 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 193 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 187 \n  A region starting at line 187 and ending at line 192 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 187 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 192 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 189 \n  A loop starting at line 189 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 197 \n  A loop starting at line 197 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 197 \n  A loop starting at line 197 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 433 \n  A loop starting at line 433 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4657524079957511
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31594276800751686,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F904 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 229 \n  A loop starting at line 229 was fused with the loop starting at line 228.\n\n\nftn-6231 ftn: VECTOR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 229 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 234 \n  A data region was created at line 234 and ending at line 241.\n\n\nftn-6420 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 234 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 241 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 235 \n  A region starting at line 235 and ending at line 240 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 235 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 240 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 237 \n  A loop starting at line 237 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 245 \n  A loop starting at line 245 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 245 \n  A loop starting at line 245 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 442 \n  A loop starting at line 442 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 488 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4660194110183511
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31598964100703597,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin.F90/acc_copyin.F905 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 23 \n  A data region was created at line 23 and ending at line 30.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 65 \n  A loop starting at line 65 was fused with the loop starting at line 64.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 65 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 70 \n  A data region was created at line 70 and ending at line 77.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 70 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 71 \n  A region starting at line 71 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 73 \n  A loop starting at line 73 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 82 \n  A loop starting at line 82 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 82 \n  A loop starting at line 82 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 181 \n  A loop starting at line 181 was fused with the loop starting at line 180.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 181 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 186 \n  A data region was created at line 186 and ending at line 193.\n\n\nftn-6420 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 186 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 193 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 187 \n  A region starting at line 187 and ending at line 192 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 187 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 192 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 189 \n  A loop starting at line 189 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 197 \n  A loop starting at line 197 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 197 \n  A loop starting at line 197 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 229 \n  A loop starting at line 229 was fused with the loop starting at line 228.\n\n\nftn-6231 ftn: VECTOR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 229 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 234 \n  A data region was created at line 234 and ending at line 241.\n\n\nftn-6420 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 234 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 241 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 235 \n  A region starting at line 235 and ending at line 240 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 235 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 240 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 237 \n  A loop starting at line 237 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 245 \n  A loop starting at line 245 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 245 \n  A loop starting at line 245 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 406 \n  A loop starting at line 406 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 415 \n  A loop starting at line 415 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 433 \n  A loop starting at line 433 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin.F90, Line = 442 \n  A loop starting at line 442 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0144 seconds\nCray Fortran : 515 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6660531810193788
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31637489900458604,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyin_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656933729944285
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009167706011794508,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 23 \n  A data region was created at line 23 and ending at line 30.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 408 \n  A loop starting at line 408 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4658473989984486
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3157870729919523,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F902 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 67 \n  A loop starting at line 67 was fused with the loop starting at line 66.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 67 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 71 \n  A data region was created at line 71 and ending at line 78.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 78 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 72 \n  A region starting at line 72 and ending at line 77 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 74 \n  A loop starting at line 74 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 82 \n  A loop starting at line 82 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 82 \n  A loop starting at line 82 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 417 \n  A loop starting at line 417 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46582317299908027
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3159579519997351,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT2 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F903 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 183 \n  A loop starting at line 183 was fused with the loop starting at line 182.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 183 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 188 \n  A data region was created at line 188 and ending at line 195.\n\n\nftn-6420 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 188 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 195 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  A region starting at line 189 and ending at line 194 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 194 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 194 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 194 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 191 \n  A loop starting at line 191 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 199 \n  A loop starting at line 199 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 199 \n  A loop starting at line 199 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 435 \n  A loop starting at line 435 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4662647079967428
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41633071601972915,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F904 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 231 \n  A loop starting at line 231 was fused with the loop starting at line 230.\n\n\nftn-6231 ftn: VECTOR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 231 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 236 \n  A data region was created at line 236 and ending at line 243.\n\n\nftn-6420 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 236 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 243 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  A region starting at line 237 and ending at line 242 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 242 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 242 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 242 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 239 \n  A loop starting at line 239 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 247 \n  A loop starting at line 247 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 247 \n  A loop starting at line 247 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 444 \n  A loop starting at line 444 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 490 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4655440429924056
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3661554239806719,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT6 -DT7 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyin_with_len.F90/acc_copyin_with_len.F905 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 23 \n  A data region was created at line 23 and ending at line 30.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 67 \n  A loop starting at line 67 was fused with the loop starting at line 66.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 67 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 71 \n  A data region was created at line 71 and ending at line 78.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 78 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 72 \n  A region starting at line 72 and ending at line 77 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 74 \n  A loop starting at line 74 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 82 \n  A loop starting at line 82 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 82 \n  A loop starting at line 82 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 183 \n  A loop starting at line 183 was fused with the loop starting at line 182.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 183 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 188 \n  A data region was created at line 188 and ending at line 195.\n\n\nftn-6420 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 188 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 195 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  A region starting at line 189 and ending at line 194 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 194 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 194 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 189 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 194 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 191 \n  A loop starting at line 191 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 199 \n  A loop starting at line 199 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 199 \n  A loop starting at line 199 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 231 \n  A loop starting at line 231 was fused with the loop starting at line 230.\n\n\nftn-6231 ftn: VECTOR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 231 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 236 \n  A data region was created at line 236 and ending at line 243.\n\n\nftn-6420 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 236 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 243 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  A region starting at line 237 and ending at line 242 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 242 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 242 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 237 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 242 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 239 \n  A loop starting at line 239 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 247 \n  A loop starting at line 247 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 247 \n  A loop starting at line 247 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 408 \n  A loop starting at line 408 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 417 \n  A loop starting at line 417 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 435 \n  A loop starting at line 435 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyin_with_len.F90, Line = 444 \n  A loop starting at line 444 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0141 seconds\nCray Fortran : 517 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.66618959401967
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3159900719765574,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout.F90/acc_copyout.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 23 \n  A data region was created at line 23 and ending at line 30.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 65 \n  A loop starting at line 65 was fused with the loop starting at line 63.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 65 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 69 \n  A data region was created at line 69 and ending at line 76.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 70 \n  A region starting at line 70 and ending at line 75 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 75 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 75 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 75 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 72 \n  A loop starting at line 72 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 80 \n  A loop starting at line 80 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 80 \n  A loop starting at line 80 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 274 \n  A loop starting at line 274 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout.F90, Line = 283 \n  A loop starting at line 283 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0095 seconds\nCray Fortran : 347 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516098902997328
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160471180162858,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_copyout_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_copyout_with_len.F90/acc_copyout_with_len.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 23 \n  A data region was created at line 23 and ending at line 30.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 65 \n  A loop starting at line 65 was fused with the loop starting at line 63.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 65 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 69 \n  A data region was created at line 69 and ending at line 76.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 70 \n  A region starting at line 70 and ending at line 75 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 75 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 75 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 75 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 72 \n  A loop starting at line 72 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 80 \n  A loop starting at line 80 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 80 \n  A loop starting at line 80 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 111 \n  A loop starting at line 111 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_copyout_with_len.F90, Line = 120 \n  A loop starting at line 120 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0096 seconds\nCray Fortran : 157 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.566532445984194
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163679869903717,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.F90/acc_create.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3656734660034999
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009688838996225968,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.F90/acc_create.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 24 \n  A data region was created at line 24 and ending at line 31.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 25 \n  A region starting at line 25 and ending at line 30 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 210 \n  A loop starting at line 210 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 266 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4657699739909731
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162363500217907,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.F90/acc_create.F902 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 66 \n  A loop starting at line 66 was fused with the loop starting at line 65.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 66 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 70 \n  A data region was created at line 70 and ending at line 77.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 70 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 70 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 71 \n  A region starting at line 71 and ending at line 76 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 73 \n  A loop starting at line 73 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 81 \n  A loop starting at line 81 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 81 \n  A loop starting at line 81 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 219 \n  A loop starting at line 219 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 266 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4659065479936544
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36634397599846125,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.F90/acc_create.F903 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 112 \n  A loop starting at line 112 was fused with the loop starting at line 111.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 112 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 116 \n  A data region was created at line 116 and ending at line 123.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 116 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 123 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 116 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 123 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  A region starting at line 117 and ending at line 122 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 122 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 122 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 122 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 119 \n  A loop starting at line 119 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 127 \n  A loop starting at line 127 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 127 \n  A loop starting at line 127 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 228 \n  A loop starting at line 228 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 266 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46665998501703143
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3158979100116994,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.F90/acc_create.F904 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 158 \n  A loop starting at line 158 was fused with the loop starting at line 157.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 158 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 162 \n  A data region was created at line 162 and ending at line 169.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 162 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 169 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 162 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 169 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  A region starting at line 163 and ending at line 168 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 168 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 168 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 168 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 165 \n  A loop starting at line 165 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 173 \n  A loop starting at line 173 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 173 \n  A loop starting at line 173 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 237 \n  A loop starting at line 237 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 266 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4658691189833917
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163071330054663,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create.F90/acc_create.F905 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 24 \n  A data region was created at line 24 and ending at line 31.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 25 \n  A region starting at line 25 and ending at line 30 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 66 \n  A loop starting at line 66 was fused with the loop starting at line 65.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 66 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 70 \n  A data region was created at line 70 and ending at line 77.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 70 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 70 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 71 \n  A region starting at line 71 and ending at line 76 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 73 \n  A loop starting at line 73 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 81 \n  A loop starting at line 81 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 81 \n  A loop starting at line 81 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 112 \n  A loop starting at line 112 was fused with the loop starting at line 111.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 112 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 116 \n  A data region was created at line 116 and ending at line 123.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 116 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 123 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 116 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 123 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  A region starting at line 117 and ending at line 122 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 122 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 122 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 122 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 119 \n  A loop starting at line 119 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 127 \n  A loop starting at line 127 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 127 \n  A loop starting at line 127 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 158 \n  A loop starting at line 158 was fused with the loop starting at line 157.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 158 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 162 \n  A data region was created at line 162 and ending at line 169.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 162 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 169 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 162 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 169 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  A region starting at line 163 and ending at line 168 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 168 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 168 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 168 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 165 \n  A loop starting at line 165 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 173 \n  A loop starting at line 173 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 173 \n  A loop starting at line 173 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 210 \n  A loop starting at line 210 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 219 \n  A loop starting at line 219 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 228 \n  A loop starting at line 228 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create.F90, Line = 237 \n  A loop starting at line 237 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0144 seconds\nCray Fortran : 293 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6661471349943895
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162594539753627,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_create_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31612036397564225
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009736265987157822,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 14, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 15, Column = 22 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SEED\".\n\n\nftn-100 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 16, Column = 9 \n  This statement must begin with a label, a keyword, or an identifier.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 267 source lines\nCray Fortran : 3 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11568947302293964
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F902 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 66 \n  A loop starting at line 66 was fused with the loop starting at line 65.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 66 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 70 \n  A data region was created at line 70 and ending at line 77.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 70 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 70 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 71 \n  A region starting at line 71 and ending at line 76 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 73 \n  A loop starting at line 73 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 81 \n  A loop starting at line 81 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 81 \n  A loop starting at line 81 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 220 \n  A loop starting at line 220 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 267 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4163258970074821
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31632872502086684,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F903 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 112 \n  A loop starting at line 112 was fused with the loop starting at line 111.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 112 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 116 \n  A data region was created at line 116 and ending at line 123.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 116 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 123 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 116 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 123 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 117 \n  A region starting at line 117 and ending at line 122 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 122 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 122 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 122 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 119 \n  A loop starting at line 119 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 127 \n  A loop starting at line 127 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 127 \n  A loop starting at line 127 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 229 \n  A loop starting at line 229 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 267 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41642147800303064
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162836800038349,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F904 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 158 \n  A loop starting at line 158 was fused with the loop starting at line 157.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 158 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 162 \n  A data region was created at line 162 and ending at line 169.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 162 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 169 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 162 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 169 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 163 \n  A region starting at line 163 and ending at line 168 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 168 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 168 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 168 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 165 \n  A loop starting at line 165 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 173 \n  A loop starting at line 173 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 173 \n  A loop starting at line 173 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 238 \n  A loop starting at line 238 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 267 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41616754201822914
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165941589977592,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_create_with_len.F90/acc_create_with_len.F905 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 66 \n  A loop starting at line 66 was fused with the loop starting at line 65.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 66 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 70 \n  A data region was created at line 70 and ending at line 77.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 70 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 70 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 71 \n  A region starting at line 71 and ending at line 76 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 71 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 73 \n  A loop starting at line 73 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 81 \n  A loop starting at line 81 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 81 \n  A loop starting at line 81 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 112 \n  A loop starting at line 112 was fused with the loop starting at line 111.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 112 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 116 \n  A data region was created at line 116 and ending at line 123.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 116 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 123 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 116 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 123 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 117 \n  A region starting at line 117 and ending at line 122 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 122 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 122 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 117 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 122 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 119 \n  A loop starting at line 119 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 127 \n  A loop starting at line 127 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 127 \n  A loop starting at line 127 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 158 \n  A loop starting at line 158 was fused with the loop starting at line 157.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 158 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 162 \n  A data region was created at line 162 and ending at line 169.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 162 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 169 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 162 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 169 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 163 \n  A region starting at line 163 and ending at line 168 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 168 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 168 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 163 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 168 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 165 \n  A loop starting at line 165 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 173 \n  A loop starting at line 173 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 173 \n  A loop starting at line 173 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 220 \n  A loop starting at line 220 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 229 \n  A loop starting at line 229 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_create_with_len.F90, Line = 238 \n  A loop starting at line 238 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0104 seconds\nCray Fortran : 285 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5167495959904045
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31727695200243033,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete.F90/acc_delete.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 24 \n  A data region was created at line 24 and ending at line 31.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 24 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 31 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 25 \n  A region starting at line 25 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 67 \n  A loop starting at line 67 was fused with the loop starting at line 66.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 67 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 72 \n  A data region was created at line 72 and ending at line 79.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 79 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 73 \n  A region starting at line 73 and ending at line 78 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 78 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 84 \n  A loop starting at line 84 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 84 \n  A loop starting at line 84 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 115 \n  A loop starting at line 115 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete.F90, Line = 124 \n  A loop starting at line 124 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0091 seconds\nCray Fortran : 161 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46649615999194793
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167569219949655,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_delete_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_delete_with_len.F90/acc_delete_with_len.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 24 \n  A data region was created at line 24 and ending at line 31.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 24 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 31 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 25 \n  A region starting at line 25 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 68 \n  A loop starting at line 68 was fused with the loop starting at line 67.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 68 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 73 \n  A data region was created at line 73 and ending at line 80.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 73 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 80 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 74 \n  A region starting at line 74 and ending at line 79 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 74 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 79 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 76 \n  A loop starting at line 76 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 115 \n  A loop starting at line 115 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_delete_with_len.F90, Line = 124 \n  A loop starting at line 124 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0086 seconds\nCray Fortran : 161 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4665098059922457
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167065379966516,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_device_num.F90/acc_get_device_num.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_get_device_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_get_device_num.F90, Line = 42 \n  A loop starting at line 42 was unwound.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167278800101485
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11603950700373389,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_get_num_devices.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_get_num_devices.F90/acc_get_num_devices.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_get_num_devices.F90",
                    "config": 1,
                    "errors": "\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_get_num_devices.F90, Line = 38 \n  A loop starting at line 38 was unwound.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31632787198759615
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.11591396099538542,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_init.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_init.F90/acc_init.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_init.F90",
                    "config": 1,
                    "errors": "\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_init.F90, Line = 29 \n  A loop starting at line 29 was unwound.\n\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31623890800983645
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3168251129973214,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_is_present.F90/acc_is_present.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_is_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_is_present.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_is_present.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3659855390142184
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31702226799097843,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_is_present_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_is_present_with_len.F90/acc_is_present_with_len.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_is_present_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_is_present_with_len.F90, Line = 14 \n  A region starting at line 14 and ending at line 16 was placed on the accelerator.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_is_present_with_len.F90, Line = 52 \n  A loop starting at line 52 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3667579269967973
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31656461299280636,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_on_device.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_on_device.F90/acc_on_device.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_on_device.F90",
                    "config": 1,
                    "errors": "\n\nftn-1698 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_on_device.F90, Line = 13, Column = 31 \n  Type INTEGER(kind=4) is not allowed for the \"DEVICE\" argument of intrinsic ACC_ON_DEVICE.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0059 seconds\nCray Fortran : 75 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11627192999003455
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_on_device.F90/acc_on_device.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_on_device.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162714670179412
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009656228008680046,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_num.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_set_device_num.F90/acc_set_device_num.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 28 \n  A data region was created at line 28 and ending at line 35.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 29 \n  A region starting at line 29 and ending at line 34 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 41 \n  A loop starting at line 41 was unrolled 2 times.\n\n\nftn-6382 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 41 \n  A loop starting at line 41 was partially vector pipelined.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 41 \n  A loop starting at line 41 was partially vectorized.\n\n\nftn-6008 ftn: SCALAR TEST_ACC_SET_DEVICE_NUM, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.F90, Line = 71 \n  A loop starting at line 71 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0061 seconds\nCray Fortran : 98 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165244080068078
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC:            find_in_present_table failed for 'a(:)' (0x7ffd055da9c0-0x7ffd055dc900) from ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.F90:28\nACC: libcrayacc/acc_runtime.c:743 CRAY_ACC_ERROR - Variable not found in present table\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5168347859871574,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_set_device_num.F90/acc_set_device_num.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_num.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3166169920004904
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009766773000592366,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_set_device_type.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_set_device_type.F90/acc_set_device_type.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_type.F90",
                    "config": 1,
                    "errors": "\n\nftn-1307 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_type.F90, Line = 11, Column = 34 \n  The kind (4) of this actual argument does not match that of its associated dummy argument (8).\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 66 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11530517699429765
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_set_device_type.F90/acc_set_device_type.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_set_device_type.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31633233101456426
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00987257101223804,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_shutdown.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_shutdown.F90/acc_shutdown.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_shutdown.F90",
                    "config": 1,
                    "errors": "\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_shutdown.F90, Line = 29 \n  A loop starting at line 29 was unwound.\n\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160467679845169
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: Shutdown called before init!\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00974835900706239,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_shutdown.F90/acc_shutdown.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_shutdown.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162078780005686
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00913790098275058,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device.F90/acc_update_device.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 21 \n  A data region was created at line 21 and ending at line 30.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 30 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"a\" on accelerator, free at line 30 (acc_share).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 30 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 32 \n  A loop starting at line 32 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 58 \n  A region starting at line 58 and ending at line 60 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 65 \n  A loop starting at line 65 was fused with the loop starting at line 63.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 65 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 67 \n  A data region was created at line 67 and ending at line 88.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 67 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 67 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 67 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 88 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 68 \n  A region starting at line 68 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 70 \n  A loop starting at line 70 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 75 \n  A region starting at line 75 and ending at line 80 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 75 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 80 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 77 \n  A loop starting at line 77 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 82 \n  A region starting at line 82 and ending at line 87 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 82 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 82 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 82 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 87 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 84 \n  A loop starting at line 84 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 90 \n  A loop starting at line 90 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 90 \n  A loop starting at line 90 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 122 \n  A loop starting at line 122 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device.F90, Line = 131 \n  A loop starting at line 131 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0084 seconds\nCray Fortran : 168 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166316659888253
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4169385389832314,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_device_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_device_with_len.F90/acc_update_device_with_len.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 15 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 17 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 28 \n  A loop starting at line 28 was fused with the loop starting at line 26.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 28 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 30 \n  A data region was created at line 30 and ending at line 39.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 30 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 39 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 30 \n  If not already present: allocate memory for user shaped variable \"a\" on accelerator, free at line 39 (acc_share).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 30 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 39 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 33 \n  A region starting at line 33 and ending at line 38 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 33 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 33 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 33 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 35 \n  A loop starting at line 35 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 41 \n  A loop starting at line 41 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 41 \n  A loop starting at line 41 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 68 \n  A region starting at line 68 and ending at line 70 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 70 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 82 \n  A loop starting at line 82 was fused with the loop starting at line 80.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 82 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 84 \n  A data region was created at line 84 and ending at line 105.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 84 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 105 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 84 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 105 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 84 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 105 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 85 \n  A region starting at line 85 and ending at line 90 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 85 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 90 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 87 \n  A loop starting at line 87 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 92 \n  A region starting at line 92 and ending at line 97 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 92 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 97 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 94 \n  A loop starting at line 94 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 99 \n  A region starting at line 99 and ending at line 104 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 99 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 104 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 99 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 104 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 99 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 104 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 101 \n  A loop starting at line 101 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 107 \n  A loop starting at line 107 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 107 \n  A loop starting at line 107 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 136 \n  A loop starting at line 136 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_device_with_len.F90, Line = 145 \n  A loop starting at line 145 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0089 seconds\nCray Fortran : 181 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165462869917974
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3667933950200677,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self.F90/acc_update_self.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 23 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, free at line 31 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 33 \n  A loop starting at line 33 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 66 \n  A loop starting at line 66 was fused with the loop starting at line 64.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 66 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 68 \n  A data region was created at line 68 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 68 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 68 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 68 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 89 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 69 \n  A region starting at line 69 and ending at line 74 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 69 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 71 \n  A loop starting at line 71 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 76 \n  A region starting at line 76 and ending at line 81 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 81 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 78 \n  A loop starting at line 78 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 91 \n  A loop starting at line 91 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 91 \n  A loop starting at line 91 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self.F90, Line = 128 \n  A loop starting at line 128 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0086 seconds\nCray Fortran : 164 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162680089997593
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31632199097657576,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_update_self_with_len.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_update_self_with_len.F90/acc_update_self_with_len.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 23 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, free at line 31 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 24 \n  A region starting at line 24 and ending at line 29 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 33 \n  A loop starting at line 33 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 66 \n  A loop starting at line 66 was fused with the loop starting at line 64.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 66 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 68 \n  A data region was created at line 68 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 68 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 68 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 68 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 89 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 69 \n  A region starting at line 69 and ending at line 74 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 69 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 71 \n  A loop starting at line 71 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 76 \n  A region starting at line 76 and ending at line 81 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 81 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 78 \n  A loop starting at line 78 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 91 \n  A loop starting at line 91 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 91 \n  A loop starting at line 91 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_update_self_with_len.F90, Line = 128 \n  A loop starting at line 128 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0088 seconds\nCray Fortran : 164 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4667407159868162
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162349190097302,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait.F90/acc_wait.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait.F90, Line = 23 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait.F90, Line = 27 \n  A region starting at line 27 and ending at line 32 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait.F90, Line = 33 \n  A region starting at line 33 and ending at line 38 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait.F90, Line = 35 \n  A loop starting at line 35 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait.F90, Line = 43 \n  A loop starting at line 43 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait.F90, Line = 70 \n  A loop starting at line 70 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 97 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4668112169892993
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3166804199863691,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_all.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_all.F90/acc_wait_all.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 22 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 20.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 27 \n  A data region was created at line 27 and ending at line 53.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 27 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 53 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 27 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 53 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 27 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 53 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 27 \n  If not already present: allocate memory for user shaped variable \"d\" on accelerator, copy back at line 53 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 28 \n  A region starting at line 28 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 28 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 34 \n  A region starting at line 34 and ending at line 39 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 40 \n  A region starting at line 40 and ending at line 45 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 40 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 42 \n  A loop starting at line 42 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 47 \n  A region starting at line 47 and ending at line 52 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 47 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 52 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 47 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 52 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 47 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 52 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 47 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, copy back at line 52 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 49 \n  A loop starting at line 49 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 55 \n  A loop starting at line 55 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 55 \n  A loop starting at line 55 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all.F90, Line = 80 \n  A loop starting at line 80 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 107 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5168285240069963
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.366441679012496,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_all_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_all_async.F90/acc_wait_all_async.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 21.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 23 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 21.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 21.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 29 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 21.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 30 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 21.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 31 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 32 \n  A loop starting at line 32 was fused with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 33 \n  A loop starting at line 33 was fused with the loop starting at line 24.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 34 \n  A loop starting at line 34 was fused with the loop starting at line 27.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  A data region was created at line 36 and ending at line 88.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory for user shaped variable \"j\" on accelerator, free at line 88 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory for user shaped variable \"i\" on accelerator, free at line 88 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory for user shaped variable \"f\" on accelerator, free at line 88 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, free at line 88 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"h\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"g\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"e\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 36 \n  If not already present: allocate memory for user shaped variable \"k\" on accelerator, copy back at line 88 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 37 \n  A region starting at line 37 and ending at line 42 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 39 \n  A loop starting at line 39 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 43 \n  A region starting at line 43 and ending at line 48 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 43 \n  If not already present: allocate memory and copy whole array \"e\" to accelerator, free at line 48 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 43 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, free at line 48 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 43 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, copy back at line 48 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 45 \n  A loop starting at line 45 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 49 \n  A region starting at line 49 and ending at line 54 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 49 \n  If not already present: allocate memory and copy whole array \"h\" to accelerator, free at line 54 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 49 \n  If not already present: allocate memory and copy whole array \"g\" to accelerator, free at line 54 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 49 \n  If not already present: allocate memory and copy whole array \"i\" to accelerator, copy back at line 54 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 51 \n  A loop starting at line 51 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 56 \n  A region starting at line 56 and ending at line 61 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 56 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, free at line 61 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 56 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 61 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 56 \n  If not already present: allocate memory and copy whole array \"i\" to accelerator, free at line 61 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 56 \n  If not already present: allocate memory and copy whole array \"j\" to accelerator, copy back at line 61 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 58 \n  A loop starting at line 58 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 62 \n  A region starting at line 62 and ending at line 67 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 62 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 62 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 62 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 64 \n  A loop starting at line 64 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 68 \n  A region starting at line 68 and ending at line 73 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"e\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 70 \n  A loop starting at line 70 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 74 \n  A region starting at line 74 and ending at line 79 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 74 \n  If not already present: allocate memory and copy whole array \"i\" to accelerator, free at line 79 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 74 \n  If not already present: allocate memory and copy whole array \"h\" to accelerator, free at line 79 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 74 \n  If not already present: allocate memory and copy whole array \"g\" to accelerator, copy back at line 79 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 76 \n  A loop starting at line 76 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"j\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"g\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"k\" to accelerator, copy back at line 86 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 83 \n  A loop starting at line 83 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 90 \n  A loop starting at line 90 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 90 \n  A loop starting at line 90 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_all_async.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7675208669970743
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41719970799749717,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "acc_wait_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/acc_wait_async.F90/acc_wait_async.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 24 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 27 \n  A loop starting at line 27 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 27 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  A data region was created at line 29 and ending at line 57.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"h\" on accelerator, free at line 57 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"f\" on accelerator, free at line 57 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, free at line 57 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"g\" to accelerator, free at line 57 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"e\" to accelerator, free at line 57 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 57 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 57 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 57 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"i\" on accelerator, copy back at line 57 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 37 \n  A region starting at line 37 and ending at line 42 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"g\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"h\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 39 \n  A loop starting at line 39 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 43 \n  A region starting at line 43 and ending at line 48 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 43 \n  If not already present: allocate memory and copy whole array \"e\" to accelerator, free at line 48 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 43 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, free at line 48 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 43 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, copy back at line 48 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 45 \n  A loop starting at line 45 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 50 \n  A region starting at line 50 and ending at line 55 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 50 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, free at line 55 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 50 \n  If not already present: allocate memory and copy whole array \"h\" to accelerator, free at line 55 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 50 \n  If not already present: allocate memory and copy whole array \"i\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 52 \n  A loop starting at line 52 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 59 \n  A loop starting at line 59 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 59 \n  A loop starting at line 59 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/acc_wait_async.F90, Line = 84 \n  A loop starting at line 84 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 111 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5666715050174389
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36790757402195595,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_expr_and_x.F90/atomic_capture_assign_expr_and_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 17 \n  A loop starting at line 17 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 54 \n   A loop nest at line 54 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 55 \n  A loop starting at line 55 was interchanged with the loop starting at line 56.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 55 \n  A loop starting at line 55 was fused with the loop starting at line 54.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 56 \n  A loop starting at line 56 was fused with the loop starting at line 54.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 65 \n  A loop starting at line 65 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 66 \n  A loop starting at line 66 was fused with the loop starting at line 65.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 68 \n  A data region was created at line 68 and ending at line 80.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 68 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 80 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 68 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 80 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 68 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 80 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 69 \n  A region starting at line 69 and ending at line 79 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 69 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 79 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 69 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 79 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 69 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 79 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 71 \n  A loop starting at line 71 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 72 \n  A loop starting at line 72 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 82 \n  A loop starting at line 82 was interchanged with the loop starting at line 83.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 82 \n  A loop starting at line 82 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 82 \n  A loop starting at line 82 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 96 \n  Loop has been flattened.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 96 \n  A loop starting at line 96 was eliminated by optimization.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_and_x.F90, Line = 125 \n  A loop starting at line 125 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 152 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46740113699343055
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316463356022723,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_expr_divided_x.F90/atomic_capture_assign_expr_divided_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 98 \n   A loop nest at line 98 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 100 \n  A loop starting at line 100 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 102 \n  A data region was created at line 102 and ending at line 114.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 114 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 114 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 102 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 114 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 103 \n  A region starting at line 103 and ending at line 113 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 113 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 105 \n  A loop starting at line 105 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 106 \n  A loop starting at line 106 will be serially executed.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 117 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 156 \n  A loop starting at line 156 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 183 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5172373359964695
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_expr_divided_x.F90/atomic_capture_assign_expr_divided_x.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_divided_x.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4166841859987471
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.010086589987622574,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_expr_eqv_x.F90/atomic_capture_assign_expr_eqv_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 93 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 93 \n  A loop starting at line 93 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_eqv_x.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5168963200121652
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4164891930122394,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_expr_minus_x.F90/atomic_capture_assign_expr_minus_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 91 \n   A loop nest at line 91 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 93 \n  A loop starting at line 93 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 95 \n  A data region was created at line 95 and ending at line 107.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 107 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 107 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 95 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 107 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 96 \n  A region starting at line 96 and ending at line 106 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 106 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 98 \n  A loop starting at line 98 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 99 \n  A loop starting at line 99 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 110 \n  A loop starting at line 110 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 113, Column = 52 \n  Procedure \"IS_POSSIBLE\" is defined at line 37 (/global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 119 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 148 \n  A loop starting at line 148 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164897110080346
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_expr_minus_x.F90/atomic_capture_assign_expr_minus_x.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_minus_x.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 166 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165912919852417
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009625881008105353,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_expr_neqv_x.F90/atomic_capture_assign_expr_neqv_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 58 \n  A loop starting at line 58 was interchanged with the loop starting at line 59.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 58 \n  A loop starting at line 58 was fused with the loop starting at line 57.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 57.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 68 \n  A loop starting at line 68 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 69 \n  A loop starting at line 69 was fused with the loop starting at line 68.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 71 \n  A data region was created at line 71 and ending at line 83.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 71 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 83 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 72 \n  A region starting at line 72 and ending at line 82 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 74 \n  A loop starting at line 74 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 75 \n  A loop starting at line 75 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 99 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 99 \n  A loop starting at line 99 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_neqv_x.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5170151630009059
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5004842769994866,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_expr_or_x.F90/atomic_capture_assign_expr_or_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 100 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 100 \n  A loop starting at line 100 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_or_x.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5171385819849093
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3675324750074651,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_expr_plus_x.F90/atomic_capture_assign_expr_plus_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 89 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_plus_x.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5665022699977271
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.38403969499631785,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_expr_times_x.F90/atomic_capture_assign_expr_times_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 89 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_expr_times_x.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5170871570007876
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.36724755199975334,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_iand_expr_x.F90/atomic_capture_assign_iand_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 51 \n   A loop nest at line 51 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 52 \n   A loop nest at line 52 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 52 \n  A loop starting at line 52 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 53 \n  A loop starting at line 53 was interchanged with the loop starting at line 55.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 53 \n  A loop starting at line 53 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 53 \n  A loop starting at line 53 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 54 \n  A loop starting at line 54 was collapsed into the loop starting at line 53.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 62 \n  A loop starting at line 62 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 64 \n  A loop starting at line 64 was fused with the loop starting at line 62.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 65 \n  A loop starting at line 65 was vectorized as part of the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 71 \n  A data region was created at line 71 and ending at line 83.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 71 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 83 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 72 \n  A region starting at line 72 and ending at line 82 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 74 \n  A loop starting at line 74 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 75 \n  A loop starting at line 75 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 84 \n  A loop starting at line 84 was interchanged with the loop starting at line 85.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 84 \n  A loop starting at line 84 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 84 \n  A loop starting at line 84 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 97 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 97 \n  A loop starting at line 97 was unwound.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 102 \n  Loop has been flattened.\n\n\nftn-6205 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 102 \n  A loop starting at line 102 was vectorized with a single vector iteration.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_expr_x.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5168013430084102
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164064990123734,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_iand_x_expr.F90/atomic_capture_assign_iand_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 69 \n  A loop starting at line 69 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 71 \n  A loop starting at line 71 was fused with the loop starting at line 69.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 72 \n  A loop starting at line 72 was vectorized as part of the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 78 \n  A data region was created at line 78 and ending at line 90.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 90 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 90 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 78 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 90 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 79 \n  A region starting at line 79 and ending at line 89 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 81 \n  A loop starting at line 81 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 82 \n  A loop starting at line 82 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 91 \n  A loop starting at line 91 was interchanged with the loop starting at line 92.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 91 \n  A loop starting at line 91 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 91 \n  A loop starting at line 91 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 104 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 104 \n  A loop starting at line 104 was unwound.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 109 \n  Loop has been flattened.\n\n\nftn-6205 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 109 \n  A loop starting at line 109 was vectorized with a single vector iteration.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_iand_x_expr.F90, Line = 136 \n  A loop starting at line 136 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 163 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5163879019964952
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31637693400261924,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_ior_expr_x.F90/atomic_capture_assign_ior_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 98 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_expr_x.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165255579922814
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164338289934676,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_ior_x_expr.F90/atomic_capture_assign_ior_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 98 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ior_x_expr.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5161813359882217
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3170766800176352,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_ixor_expr_x.F90/atomic_capture_assign_ixor_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 98 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_expr_x.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162651219870895
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3666308110114187,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_ixor_x_expr.F90/atomic_capture_assign_ixor_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 98 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_ixor_x_expr.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5169630739837885
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31714597999234684,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_max_expr_list_x.F90/atomic_capture_assign_max_expr_list_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 61 \n  A loop starting at line 61 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 62 \n  A loop starting at line 62 was fused with the loop starting at line 61.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 64 \n  A data region was created at line 64 and ending at line 76.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 64 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 64 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 64 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 64 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 76 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 65 \n  A region starting at line 65 and ending at line 75 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 75 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 75 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 75 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 75 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 67 \n  A loop starting at line 67 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 68 \n  A loop starting at line 68 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 77 \n  A loop starting at line 77 was interchanged with the loop starting at line 78.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 77 \n  A loop starting at line 77 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 77 \n  A loop starting at line 77 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 90 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 90 \n  A loop starting at line 90 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_list_x.F90, Line = 123 \n  A loop starting at line 123 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 150 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5168591110268608
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162226249987725,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_max_expr_x.F90/atomic_capture_assign_max_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 88 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_expr_x.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4669490839878563
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31705351601704024,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_max_x_expr.F90/atomic_capture_assign_max_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 88 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4663855130202137
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3668402129842434,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_max_x_expr_list.F90/atomic_capture_assign_max_x_expr_list.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 60 \n   A loop nest at line 60 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 62 \n  A loop starting at line 62 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 65 \n  A data region was created at line 65 and ending at line 77.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 66 \n  A region starting at line 66 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 68 \n  A loop starting at line 68 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 69 \n  A loop starting at line 69 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 78 \n  A loop starting at line 78 was interchanged with the loop starting at line 79.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 78 \n  A loop starting at line 78 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 78 \n  A loop starting at line 78 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 91 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_max_x_expr_list.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5169676940131467
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3666298000025563,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_min_expr_list_x.F90/atomic_capture_assign_min_expr_list_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 60 \n   A loop nest at line 60 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 62 \n  A loop starting at line 62 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 65 \n  A data region was created at line 65 and ending at line 77.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 65 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 66 \n  A region starting at line 66 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 68 \n  A loop starting at line 68 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 69 \n  A loop starting at line 69 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 78 \n  A loop starting at line 78 was interchanged with the loop starting at line 79.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 78 \n  A loop starting at line 78 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 78 \n  A loop starting at line 78 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 91 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_list_x.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5163385900086723
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31791702698683366,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_min_expr_x.F90/atomic_capture_assign_min_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 88 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_expr_x.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4667932240117807
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31734389800112695,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_min_x_expr.F90/atomic_capture_assign_min_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 88 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4670780150045175
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31655834199045785,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_min_x_expr_list.F90/atomic_capture_assign_min_x_expr_list.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 60 \n   A loop nest at line 60 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 62 \n  A loop starting at line 62 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 65 \n  A data region was created at line 65 and ending at line 77.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 65 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 66 \n  A region starting at line 66 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 68 \n  A loop starting at line 68 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 69 \n  A loop starting at line 69 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 78 \n  A loop starting at line 78 was interchanged with the loop starting at line 79.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 78 \n  A loop starting at line 78 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 78 \n  A loop starting at line 78 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 91 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_min_x_expr_list.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516410863987403
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165116449818015,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_x_and_expr.F90/atomic_capture_assign_x_and_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 17 \n  A loop starting at line 17 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 55 \n   A loop nest at line 55 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 56 \n  A loop starting at line 56 was interchanged with the loop starting at line 57.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 56 \n  A loop starting at line 56 was fused with the loop starting at line 55.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 57 \n  A loop starting at line 57 was fused with the loop starting at line 55.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 66 \n  A loop starting at line 66 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 67 \n  A loop starting at line 67 was fused with the loop starting at line 66.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 69 \n  A data region was created at line 69 and ending at line 81.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 81 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 81 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 69 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 81 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 70 \n  A region starting at line 70 and ending at line 80 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 80 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 80 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 80 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 72 \n  A loop starting at line 72 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 73 \n  A loop starting at line 73 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 83 \n  A loop starting at line 83 was interchanged with the loop starting at line 84.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 97 \n  Loop has been flattened.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 97 \n  A loop starting at line 97 was eliminated by optimization.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_and_expr.F90, Line = 126 \n  A loop starting at line 126 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 153 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46625930699519813
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3170093040098436,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_x_divided_expr.F90/atomic_capture_assign_x_divided_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 98 \n   A loop nest at line 98 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 100 \n  A loop starting at line 100 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 102 \n  A data region was created at line 102 and ending at line 114.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 114 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 114 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 102 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 114 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 103 \n  A region starting at line 103 and ending at line 113 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 113 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 105 \n  A loop starting at line 105 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 106 \n  A loop starting at line 106 will be serially executed.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 117 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 156 \n  A loop starting at line 156 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 183 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5171461360005196
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_x_divided_expr.F90/atomic_capture_assign_x_divided_expr.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_divided_expr.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662611420149915
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00966300000436604,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_x_eqv_expr.F90/atomic_capture_assign_x_eqv_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 93 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 93 \n  A loop starting at line 93 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_eqv_expr.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4663413600064814
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4168643220036756,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_x_minus_expr.F90/atomic_capture_assign_x_minus_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 91 \n   A loop nest at line 91 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 93 \n  A loop starting at line 93 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 95 \n  A data region was created at line 95 and ending at line 107.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 107 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 107 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 95 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 107 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 96 \n  A region starting at line 96 and ending at line 106 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 106 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 98 \n  A loop starting at line 98 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 99 \n  A loop starting at line 99 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 110 \n  A loop starting at line 110 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 113, Column = 46 \n  Procedure \"IS_POSSIBLE\" is defined at line 37 (/global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 119 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 148 \n  A loop starting at line 148 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166699370020069
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_x_minus_expr.F90/atomic_capture_assign_x_minus_expr.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_minus_expr.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 166 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.366808052000124
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009575336007401347,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_x_neqv_expr.F90/atomic_capture_assign_x_neqv_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 58 \n  A loop starting at line 58 was interchanged with the loop starting at line 59.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 58 \n  A loop starting at line 58 was fused with the loop starting at line 57.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 57.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 68 \n  A loop starting at line 68 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 69 \n  A loop starting at line 69 was fused with the loop starting at line 68.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 71 \n  A data region was created at line 71 and ending at line 83.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 71 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 83 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 72 \n  A region starting at line 72 and ending at line 82 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 74 \n  A loop starting at line 74 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 75 \n  A loop starting at line 75 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 99 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 99 \n  A loop starting at line 99 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_neqv_expr.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4662111279903911
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41652860399335623,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_x_or_expr.F90/atomic_capture_assign_x_or_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 100 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 100 \n  A loop starting at line 100 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_or_expr.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46643570699961856
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3672165139869321,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_x_plus_expr.F90/atomic_capture_assign_x_plus_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 89 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_plus_expr.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4670401639887132
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3172905679966789,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_assign_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_assign_x_times_expr.F90/atomic_capture_assign_x_times_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 89 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_assign_x_times_expr.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46632965898606926
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3164908869948704,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_and_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_and_x_assign.F90/atomic_capture_expr_and_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 17 \n  A loop starting at line 17 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 54 \n  A loop starting at line 54 was interchanged with the loop starting at line 55.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 54 \n  A loop starting at line 54 was fused with the loop starting at line 53.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 55 \n  A loop starting at line 55 was fused with the loop starting at line 53.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 64 \n  A loop starting at line 64 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 65 \n  A loop starting at line 65 was fused with the loop starting at line 64.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 67 \n  A data region was created at line 67 and ending at line 79.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 67 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 79 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 67 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 79 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 67 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 79 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 68 \n  A region starting at line 68 and ending at line 78 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 78 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 78 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 68 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 78 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 70 \n  A loop starting at line 70 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 71 \n  A loop starting at line 71 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 81 \n  A loop starting at line 81 was interchanged with the loop starting at line 82.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 81 \n  A loop starting at line 81 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 81 \n  A loop starting at line 81 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_and_x_assign.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 146 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46642825298476964
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163228819903452,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_divided_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_divided_x_assign.F90/atomic_capture_expr_divided_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 98 \n   A loop nest at line 98 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 100 \n  A loop starting at line 100 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 102 \n  A data region was created at line 102 and ending at line 114.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 114 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 114 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 102 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 114 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 103 \n  A region starting at line 103 and ending at line 113 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 113 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 105 \n  A loop starting at line 105 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 106 \n  A loop starting at line 106 will be serially executed.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 117 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 156 \n  A loop starting at line 156 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 183 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5169147450069431
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_divided_x_assign.F90/atomic_capture_expr_divided_x_assign.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_divided_x_assign.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3663398389762733
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00951153802452609,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_eqv_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_eqv_x_assign.F90/atomic_capture_expr_eqv_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 93 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 93 \n  A loop starting at line 93 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_eqv_x_assign.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46716246200958267
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41682328601018526,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_minus_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_minus_x_assign.F90/atomic_capture_expr_minus_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 91 \n   A loop nest at line 91 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 93 \n  A loop starting at line 93 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 95 \n  A data region was created at line 95 and ending at line 107.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 107 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 107 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 95 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 107 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 96 \n  A region starting at line 96 and ending at line 106 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 106 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 98 \n  A loop starting at line 98 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 99 \n  A loop starting at line 99 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 110 \n  A loop starting at line 110 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 113, Column = 52 \n  Procedure \"IS_POSSIBLE\" is defined at line 37 (/global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 119 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 148 \n  A loop starting at line 148 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5174403549754061
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_minus_x_assign.F90/atomic_capture_expr_minus_x_assign.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_minus_x_assign.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 166 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3670368889870588
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009635138005251065,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_neqv_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_neqv_x_assign.F90/atomic_capture_expr_neqv_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 58 \n  A loop starting at line 58 was interchanged with the loop starting at line 59.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 58 \n  A loop starting at line 58 was fused with the loop starting at line 57.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 57.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 68 \n  A loop starting at line 68 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 69 \n  A loop starting at line 69 was fused with the loop starting at line 68.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 71 \n  A data region was created at line 71 and ending at line 83.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 71 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 83 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 72 \n  A region starting at line 72 and ending at line 82 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 74 \n  A loop starting at line 74 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 75 \n  A loop starting at line 75 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 99 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 99 \n  A loop starting at line 99 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_neqv_x_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4666493260010611
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165747509978246,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_or_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_or_x_assign.F90/atomic_capture_expr_or_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 100 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 100 \n  A loop starting at line 100 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_or_x_assign.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46670205402188003
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164596779970452,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_plus_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_plus_x_assign.F90/atomic_capture_expr_plus_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 89 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_plus_x_assign.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4667122329992708
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31719401900772937,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_expr_times_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_expr_times_x_assign.F90/atomic_capture_expr_times_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 89 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_expr_times_x_assign.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4664373400155455
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3170560910075437,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_iand_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_iand_expr_x_assign.F90/atomic_capture_iand_expr_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 69 \n  A loop starting at line 69 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 71 \n  A loop starting at line 71 was fused with the loop starting at line 69.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 72 \n  A loop starting at line 72 was vectorized as part of the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 78 \n  A data region was created at line 78 and ending at line 90.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 90 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 90 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 78 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 90 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 79 \n  A region starting at line 79 and ending at line 89 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 81 \n  A loop starting at line 81 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 82 \n  A loop starting at line 82 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 91 \n  A loop starting at line 91 was interchanged with the loop starting at line 92.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 91 \n  A loop starting at line 91 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 91 \n  A loop starting at line 91 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 104 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 104 \n  A loop starting at line 104 was unwound.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 109 \n  Loop has been flattened.\n\n\nftn-6205 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 109 \n  A loop starting at line 109 was vectorized with a single vector iteration.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_expr_x_assign.F90, Line = 136 \n  A loop starting at line 136 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 163 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5169345909962431
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31684236199362203,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_iand_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_iand_x_expr_assign.F90/atomic_capture_iand_x_expr_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 69 \n  A loop starting at line 69 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 71 \n  A loop starting at line 71 was fused with the loop starting at line 69.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 72 \n  A loop starting at line 72 was vectorized as part of the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 78 \n  A data region was created at line 78 and ending at line 90.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 90 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 90 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 78 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 90 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 79 \n  A region starting at line 79 and ending at line 89 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 81 \n  A loop starting at line 81 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 82 \n  A loop starting at line 82 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 91 \n  A loop starting at line 91 was interchanged with the loop starting at line 92.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 91 \n  A loop starting at line 91 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 91 \n  A loop starting at line 91 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 104 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 104 \n  A loop starting at line 104 was unwound.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 109 \n  Loop has been flattened.\n\n\nftn-6205 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 109 \n  A loop starting at line 109 was vectorized with a single vector iteration.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_iand_x_expr_assign.F90, Line = 136 \n  A loop starting at line 136 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0061 seconds\nCray Fortran : 163 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.516287745005684
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31723525500274263,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ior_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_ior_expr_x_assign.F90/atomic_capture_ior_expr_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 98 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_expr_x_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5167664480104577
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164457830134779,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ior_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_ior_x_expr_assign.F90/atomic_capture_ior_x_expr_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 98 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ior_x_expr_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5167732299887575
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3669380540086422,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ixor_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_ixor_expr_x_assign.F90/atomic_capture_ixor_expr_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 98 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_expr_x_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162979330052622
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31624803302111104,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_ixor_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_ixor_x_expr_assign.F90/atomic_capture_ixor_x_expr_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was interchanged with the loop starting at line 62.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 61 \n  A loop starting at line 61 was collapsed into the loop starting at line 60.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 98 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_ixor_x_expr_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.51702917800867
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31712656299350783,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_expr_list_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_max_expr_list_x_assign.F90/atomic_capture_max_expr_list_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 60 \n   A loop nest at line 60 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 62 \n  A loop starting at line 62 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 65 \n  A data region was created at line 65 and ending at line 77.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 66 \n  A region starting at line 66 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 68 \n  A loop starting at line 68 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 69 \n  A loop starting at line 69 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 78 \n  A loop starting at line 78 was interchanged with the loop starting at line 79.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 78 \n  A loop starting at line 78 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 78 \n  A loop starting at line 78 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 91 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_list_x_assign.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166162569948938
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31668907598941587,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_max_expr_x_assign.F90/atomic_capture_max_expr_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 88 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_expr_x_assign.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46619785198708996
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36716803500894457,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_max_x_expr_assign.F90/atomic_capture_max_x_expr_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 88 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_assign.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166986830008682
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31663668900728226,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_max_x_expr_list_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_max_x_expr_list_assign.F90/atomic_capture_max_x_expr_list_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 60 \n   A loop nest at line 60 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 62 \n  A loop starting at line 62 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 65 \n  A data region was created at line 65 and ending at line 77.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 66 \n  A region starting at line 66 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 68 \n  A loop starting at line 68 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 69 \n  A loop starting at line 69 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 78 \n  A loop starting at line 78 was interchanged with the loop starting at line 79.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 78 \n  A loop starting at line 78 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 78 \n  A loop starting at line 78 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 91 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_max_x_expr_list_assign.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5161914460186381
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31662254300317727,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_expr_list_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_min_expr_list_x_assign.F90/atomic_capture_min_expr_list_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 60 \n   A loop nest at line 60 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 62 \n  A loop starting at line 62 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 65 \n  A data region was created at line 65 and ending at line 77.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 65 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 66 \n  A region starting at line 66 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 68 \n  A loop starting at line 68 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 69 \n  A loop starting at line 69 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 78 \n  A loop starting at line 78 was interchanged with the loop starting at line 79.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 78 \n  A loop starting at line 78 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 78 \n  A loop starting at line 78 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 91 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_list_x_assign.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5167127890163101
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31751248298678547,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_expr_x_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_min_expr_x_assign.F90/atomic_capture_min_expr_x_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 88 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_expr_x_assign.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4664358280133456
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41649500298080966,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_x_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_min_x_expr_assign.F90/atomic_capture_min_x_expr_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 88 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 88 \n  A loop starting at line 88 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_assign.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46639349902397953
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3160084070113953,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_min_x_expr_list_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_min_x_expr_list_assign.F90/atomic_capture_min_x_expr_list_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 21 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 22 \n  A loop starting at line 22 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 26 \n  A loop starting at line 26 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 59 \n   A loop nest at line 59 collapsed to a single loop.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 60 \n   A loop nest at line 60 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 62 \n  A loop starting at line 62 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 63 \n  A loop starting at line 63 was fused with the loop starting at line 62.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 65 \n  A data region was created at line 65 and ending at line 77.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 77 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 77 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 65 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 77 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 66 \n  A region starting at line 66 and ending at line 76 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 76 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 66 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 76 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 68 \n  A loop starting at line 68 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 69 \n  A loop starting at line 69 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 78 \n  A loop starting at line 78 was interchanged with the loop starting at line 79.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 78 \n  A loop starting at line 78 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 78 \n  A loop starting at line 78 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 91 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_min_x_expr_list_assign.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 148 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164646150078624
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164118690183386,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_and_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_x_and_expr_assign.F90/atomic_capture_x_and_expr_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 17 \n  A loop starting at line 17 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 55 \n   A loop nest at line 55 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 56 \n  A loop starting at line 56 was interchanged with the loop starting at line 57.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 56 \n  A loop starting at line 56 was fused with the loop starting at line 55.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 57 \n  A loop starting at line 57 was fused with the loop starting at line 55.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 66 \n  A loop starting at line 66 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 67 \n  A loop starting at line 67 was fused with the loop starting at line 66.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 69 \n  A data region was created at line 69 and ending at line 81.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 81 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 69 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 81 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 69 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 81 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 70 \n  A region starting at line 70 and ending at line 80 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 80 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 80 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 70 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 80 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 72 \n  A loop starting at line 72 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 73 \n  A loop starting at line 73 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 83 \n  A loop starting at line 83 was interchanged with the loop starting at line 84.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 97 \n  Loop has been flattened.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 97 \n  A loop starting at line 97 was eliminated by optimization.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_and_expr_assign.F90, Line = 126 \n  A loop starting at line 126 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 153 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46621429501101375
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31692539699724875,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_divided_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_x_divided_expr_assign.F90/atomic_capture_x_divided_expr_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 98 \n   A loop nest at line 98 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 100 \n  A loop starting at line 100 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 102 \n  A data region was created at line 102 and ending at line 114.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 114 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 102 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 114 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 102 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 114 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 103 \n  A region starting at line 103 and ending at line 113 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 113 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 103 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 113 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 105 \n  A loop starting at line 105 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 106 \n  A loop starting at line 106 will be serially executed.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 117 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 117 \n  A loop starting at line 117 was unwound.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 156 \n  A loop starting at line 156 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 183 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5163825729978271
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_x_divided_expr_assign.F90/atomic_capture_x_divided_expr_assign.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 22 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 23 \n  A loop starting at line 23 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 27 \n  A loop starting at line 27 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 52 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 61 \n  A loop starting at line 61 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_divided_expr_assign.F90, Line = 64 \n  A loop starting at line 64 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 174 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36681592802051455
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009896516014123335,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_eqv_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_x_eqv_expr_assign.F90/atomic_capture_x_eqv_expr_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 93 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 93 \n  A loop starting at line 93 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_eqv_expr_assign.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.466450765990885
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41704949899576604,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_minus_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_x_minus_expr_assign.F90/atomic_capture_x_minus_expr_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 91 \n   A loop nest at line 91 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 93 \n  A loop starting at line 93 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 95 \n  A data region was created at line 95 and ending at line 107.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 107 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 95 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 107 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 95 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 107 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 96 \n  A region starting at line 96 and ending at line 106 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 106 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 96 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 106 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 98 \n  A loop starting at line 98 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 99 \n  A loop starting at line 99 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 110 \n  A loop starting at line 110 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 113, Column = 46 \n  Procedure \"IS_POSSIBLE\" is defined at line 37 (/global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 119 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 148 \n  A loop starting at line 148 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0062 seconds\nCray Fortran : 175 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5163189839804545
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_x_minus_expr_assign.F90/atomic_capture_x_minus_expr_assign.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE_2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 48 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 57 \n  A loop starting at line 57 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_minus_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 166 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4167309830081649
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.010189442982664332,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_neqv_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_x_neqv_expr_assign.F90/atomic_capture_x_neqv_expr_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 58 \n  A loop starting at line 58 was interchanged with the loop starting at line 59.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 58 \n  A loop starting at line 58 was fused with the loop starting at line 57.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 57.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 68 \n  A loop starting at line 68 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 69 \n  A loop starting at line 69 was fused with the loop starting at line 68.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 71 \n  A data region was created at line 71 and ending at line 83.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 71 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 71 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 83 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 72 \n  A region starting at line 72 and ending at line 82 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 74 \n  A loop starting at line 74 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 75 \n  A loop starting at line 75 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was interchanged with the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 99 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 99 \n  A loop starting at line 99 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_neqv_expr_assign.F90, Line = 127 \n  A loop starting at line 127 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 154 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4665548490011133
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41686879098415375,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_or_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_x_or_expr_assign.F90/atomic_capture_x_or_expr_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 58 \n   A loop nest at line 58 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was interchanged with the loop starting at line 60.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was fused with the loop starting at line 58.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 58.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 69 \n  A loop starting at line 69 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 70 \n  A loop starting at line 70 was fused with the loop starting at line 69.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 72 \n  A data region was created at line 72 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 72 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 72 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 84 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 73 \n  A region starting at line 73 and ending at line 83 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 73 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 83 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 76 \n  A loop starting at line 76 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 86 \n  A loop starting at line 86 was interchanged with the loop starting at line 87.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 100 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 100 \n  A loop starting at line 100 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_or_expr_assign.F90, Line = 129 \n  A loop starting at line 129 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5176936390053015
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3666318329924252,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_plus_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_x_plus_expr_assign.F90/atomic_capture_x_plus_expr_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 89 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_plus_expr_assign.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5163688570028171
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316826463007601,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_capture_x_times_expr_assign.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_capture_x_times_expr_assign.F90/atomic_capture_x_times_expr_assign.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 19 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6230 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 24 \n  A loop starting at line 24 was replaced with multiple library calls.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 57 \n   A loop nest at line 57 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 59 \n  A loop starting at line 59 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 60 \n  A loop starting at line 60 was fused with the loop starting at line 59.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 62 \n  A data region was created at line 62 and ending at line 74.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 74 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 62 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 74 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 62 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 74 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 63 \n  A region starting at line 63 and ending at line 73 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 73 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 63 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 73 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 66 \n  A loop starting at line 66 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was interchanged with the loop starting at line 76.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 75 \n  A loop starting at line 75 was vectorized.\n\n\nftn-3182 ftn: IPA TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 89 \n  Loop has been flattened.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 89 \n  A loop starting at line 89 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_capture_x_times_expr_assign.F90, Line = 118 \n  A loop starting at line 118 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 145 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164314540161286
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3164172190008685,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_and_x.F90/atomic_expr_and_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4159473410109058
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3664146189985331,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_and_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_and_x_end.F90/atomic_expr_and_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_and_x_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4161133520246949
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165441059973091,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_divided_x.F90/atomic_expr_divided_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 57 \n  A data region was created at line 57 and ending at line 67.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 58 \n  A region starting at line 58 and ending at line 66 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 66 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 66 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 71 \n  A loop starting at line 71 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 74, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41636697499779984
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_divided_x.F90/atomic_expr_divided_x.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Thu Apr 13, 2023  13:16:01\nCray Fortran : Compile time:  0.0468 seconds\nCray Fortran : 116 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.317181835998781
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009682475996669382,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_divided_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_divided_x_end.F90/atomic_expr_divided_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 57 \n  A data region was created at line 57 and ending at line 68.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 68 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 68 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 58 \n  A region starting at line 58 and ending at line 67 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 72 \n  A loop starting at line 72 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 75, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 99 \n  A loop starting at line 99 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 126 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5663436549948528
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_divided_x_end.F90/atomic_expr_divided_x_end.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_divided_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Thu Apr 13, 2023  13:16:12\nCray Fortran : Compile time:  0.0533 seconds\nCray Fortran : 117 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36635776300681755
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009988425998017192,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_eqv_x.F90/atomic_expr_eqv_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4160428100149147
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4175491909845732,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_eqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_eqv_x_end.F90/atomic_expr_eqv_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_eqv_x_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4164751170028467
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3669348910043482,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_minus_x.F90/atomic_expr_minus_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 57 \n  A data region was created at line 57 and ending at line 67.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 58 \n  A region starting at line 58 and ending at line 66 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 66 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 66 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 70 \n  A loop starting at line 70 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 73, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 97 \n  A loop starting at line 97 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 124 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46637198797543533
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_minus_x.F90/atomic_expr_minus_x.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Thu Apr 13, 2023  13:16:25\nCray Fortran : Compile time:  0.0533 seconds\nCray Fortran : 115 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36669185702339746
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.010384346009232104,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_minus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_minus_x_end.F90/atomic_expr_minus_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 57 \n  A data region was created at line 57 and ending at line 68.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 68 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 68 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 58 \n  A region starting at line 58 and ending at line 67 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 71 \n  A loop starting at line 71 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 74, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4668536170211155
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_minus_x_end.F90/atomic_expr_minus_x_end.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_minus_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Thu Apr 13, 2023  13:16:35\nCray Fortran : Compile time:  0.0526 seconds\nCray Fortran : 116 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.366495058988221
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.010094605997437611,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_neqv_x.F90/atomic_expr_neqv_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-303 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_neqv_x.F90, Line = 52, Column = 36 \n  Data type LOGICAL is not allowed with LOGICAL for the operation \"ne\".\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 104 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11586902898852713
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_neqv_x.F90/atomic_expr_neqv_x.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3156609580037184
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009553746989695355,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_neqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_neqv_x_end.F90/atomic_expr_neqv_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-303 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90, Line = 53, Column = 36 \n  Data type LOGICAL is not allowed with LOGICAL for the operation \"ne\".\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 105 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11629945097956806
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_neqv_x_end.F90/atomic_expr_neqv_x_end.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3157766349904705
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.00978020002366975,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_or_x.F90/atomic_expr_or_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4163083949824795
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41684042901033536,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_or_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_or_x_end.F90/atomic_expr_or_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_or_x_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0037 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4161420649907086
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36690783902304247,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_plus_x.F90/atomic_expr_plus_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4166903780132998
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3171058540174272,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_plus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_plus_x_end.F90/atomic_expr_plus_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_plus_x_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4167801559960935
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167358440114185,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_times_x.F90/atomic_expr_times_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165706640051212
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31623595202108845,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_expr_times_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_expr_times_x_end.F90/atomic_expr_times_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_expr_times_x_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4665319269988686
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162308309983928,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_iand_expr_x.F90/atomic_iand_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 37 \n  A data region was created at line 37 and ending at line 45.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 38 \n  A region starting at line 38 and ending at line 44 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 46 \n  A loop starting at line 46 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x.F90, Line = 75 \n  A loop starting at line 75 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4667766639904585
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31683180399704725,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_iand_expr_x_end.F90/atomic_iand_expr_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 37 \n  A data region was created at line 37 and ending at line 46.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 46 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 46 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 38 \n  A region starting at line 38 and ending at line 45 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 47 \n  A loop starting at line 47 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_expr_x_end.F90, Line = 76 \n  A loop starting at line 76 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4667632579803467
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31666763601242565,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_iand_x_expr.F90/atomic_iand_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 37 \n  A data region was created at line 37 and ending at line 45.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 38 \n  A region starting at line 38 and ending at line 44 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 46 \n  A loop starting at line 46 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr.F90, Line = 75 \n  A loop starting at line 75 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4668171179946512
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31657885102322325,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_iand_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_iand_x_expr_end.F90/atomic_iand_x_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 37 \n  A data region was created at line 37 and ending at line 46.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 46 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 46 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 38 \n  A region starting at line 38 and ending at line 45 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 47 \n  A loop starting at line 47 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_iand_x_expr_end.F90, Line = 76 \n  A loop starting at line 76 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0050 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4667606740258634
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167879010143224,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_ior_expr_x.F90/atomic_ior_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4667286149924621
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31663732999004424,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_ior_expr_x_end.F90/atomic_ior_expr_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_expr_x_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46650029701413587
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3685084760072641,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_ior_x_expr.F90/atomic_ior_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4662074109946843
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167521439900156,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ior_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_ior_x_expr_end.F90/atomic_ior_x_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ior_x_expr_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46644889199524187
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31630867600324564,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_ixor_expr_x.F90/atomic_ixor_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4665370660077315
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31621060401084833,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_ixor_expr_x_end.F90/atomic_ixor_expr_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_expr_x_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4666079290036578
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162130690179765,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_ixor_x_expr.F90/atomic_ixor_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4665027419978287
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163439529889729,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_ixor_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_ixor_x_expr_end.F90/atomic_ixor_x_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_ixor_x_expr_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4665455720096361
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316236442013178,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_max_expr_list_x.F90/atomic_max_expr_list_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 32 \n  A loop starting at line 32 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4664168420131318
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31627855001715943,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_max_expr_list_x_end.F90/atomic_max_expr_list_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_list_x_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41633520598406903
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3180277250066865,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_max_expr_x.F90/atomic_max_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41653699200833216
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31665636599063873,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_max_expr_x_end.F90/atomic_max_expr_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_expr_x_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4168413989827968
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3669319440086838,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_max_x_expr.F90/atomic_max_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41677104900009
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31640799198066816,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_max_x_expr_end.F90/atomic_max_x_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165260309819132
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31613807901158,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_max_x_expr_list.F90/atomic_max_x_expr_list.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 25 \n  A region starting at line 25 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41636607199325226
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167852059996221,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_max_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_max_x_expr_list_end.F90/atomic_max_x_expr_list_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_max_x_expr_list_end.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41593207299592905
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31678347298293374,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_min_expr_list_x.F90/atomic_min_expr_list_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 25 \n  A region starting at line 25 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41659635299583897
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31638747299439274,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_min_expr_list_x_end.F90/atomic_min_expr_list_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_list_x_end.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4161480669863522
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31693625799380243,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_min_expr_x.F90/atomic_min_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41629887800081633
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316597995988559,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_min_expr_x_end.F90/atomic_min_expr_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_expr_x_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41669677902245894
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31666743601090275,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_min_x_expr.F90/atomic_min_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41669523701420985
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3166941360104829,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_min_x_expr_end.F90/atomic_min_x_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4163921920116991
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36654363898560405,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_min_x_expr_list.F90/atomic_min_x_expr_list.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 25 \n  A region starting at line 25 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162184880115092
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3166275219991803,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_min_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_min_x_expr_list_end.F90/atomic_min_x_expr_list_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_min_x_expr_list_end.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4168899600044824
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36671212399960496,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_and_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_and_x.F90/atomic_update_expr_and_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162148399918806
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165803239971865,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_and_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_and_x_end.F90/atomic_update_expr_and_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_and_x_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4161933210270945
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165133089933079,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_divided_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_divided_x.F90/atomic_update_expr_divided_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 57 \n  A data region was created at line 57 and ending at line 67.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 58 \n  A region starting at line 58 and ending at line 66 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 66 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 66 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 71 \n  A loop starting at line 71 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 74, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46670231499592774
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_divided_x.F90/atomic_update_expr_divided_x.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Thu Apr 13, 2023  13:17:15\nCray Fortran : Compile time:  0.0537 seconds\nCray Fortran : 116 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.366688409994822
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009912056004395708,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_divided_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_divided_x_end.F90/atomic_update_expr_divided_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 57 \n  A data region was created at line 57 and ending at line 68.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 68 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 68 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 58 \n  A region starting at line 58 and ending at line 67 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 72 \n  A loop starting at line 72 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 75, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 99 \n  A loop starting at line 99 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 126 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4663297299994156
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_divided_x_end.F90/atomic_update_expr_divided_x_end.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_divided_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Thu Apr 13, 2023  13:17:26\nCray Fortran : Compile time:  0.0503 seconds\nCray Fortran : 117 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3669588499760721
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009997524990467355,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_eqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_eqv_x.F90/atomic_update_expr_eqv_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4160009000042919
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4169699370104354,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_eqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_eqv_x_end.F90/atomic_update_expr_eqv_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_eqv_x_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41680421799537726
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3168021419842262,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_minus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_minus_x.F90/atomic_update_expr_minus_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 57 \n  A data region was created at line 57 and ending at line 67.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 58 \n  A region starting at line 58 and ending at line 66 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 66 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 66 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 70 \n  A loop starting at line 70 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 73, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 97 \n  A loop starting at line 97 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 124 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46623569398070686
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_minus_x.F90/atomic_update_expr_minus_x.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Thu Apr 13, 2023  13:17:39\nCray Fortran : Compile time:  0.0521 seconds\nCray Fortran : 115 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3663236450229306
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009922865981934592,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_minus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_minus_x_end.F90/atomic_update_expr_minus_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 53 \n   A loop nest at line 53 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 55 \n  A loop starting at line 55 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 57 \n  A data region was created at line 57 and ending at line 68.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 68 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 57 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 68 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 58 \n  A region starting at line 58 and ending at line 67 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 67 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 58 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 67 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 60 \n  A loop starting at line 60 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 61 \n  A loop starting at line 61 will be serially executed.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 71 \n  A loop starting at line 71 was unwound.\n\n\nftn-1279 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 74, Column = 50 \n  Procedure \"IS_POSSIBLE\" is defined at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90).  The type of this argument does not agree with dummy argument \"INIT\".\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4161986479884945
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "Failed to complete within timeout",
                    "export": false,
                    "output": "",
                    "result": -1,
                    "runtime": -1,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_minus_x_end.F90/atomic_update_expr_minus_x_end.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-7212 ftn: WARNING IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 12 \n  Variable \"precision\" is used before it is defined.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR IS_POSSIBLE, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_minus_x_end.F90, Line = 24 \n  A loop starting at line 24 was replaced by a library call.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Thu Apr 13, 2023  13:17:49\nCray Fortran : Compile time:  0.0539 seconds\nCray Fortran : 116 source lines\nCray Fortran : 0 errors, 1 warnings, 2 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36728537001181394
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.010108912014402449,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_neqv_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_neqv_x.F90/atomic_update_expr_neqv_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165245769836474
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.416895668982761,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_neqv_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_neqv_x_end.F90/atomic_update_expr_neqv_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_neqv_x_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4167506879894063
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3668692240025848,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_or_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_or_x.F90/atomic_update_expr_or_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162290960084647
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164994360122364,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_or_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_or_x_end.F90/atomic_update_expr_or_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_or_x_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4164753139775712
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31669295800384134,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_plus_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_plus_x.F90/atomic_update_expr_plus_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41666001998237334
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165235210035462,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_plus_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_plus_x_end.F90/atomic_update_expr_plus_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_plus_x_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41607515900977887
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164721649955027,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_times_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_times_x.F90/atomic_update_expr_times_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41644701099721715
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3666830660076812,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_expr_times_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_expr_times_x_end.F90/atomic_update_expr_times_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_expr_times_x_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41618834002292715
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165140230266843,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_iand_expr_x.F90/atomic_update_iand_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 37 \n  A data region was created at line 37 and ending at line 45.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 38 \n  A region starting at line 38 and ending at line 44 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 46 \n  A loop starting at line 46 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x.F90, Line = 75 \n  A loop starting at line 75 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46710668900050223
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31666594799025916,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_iand_expr_x_end.F90/atomic_update_iand_expr_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 37 \n  A data region was created at line 37 and ending at line 46.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 46 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 46 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 38 \n  A region starting at line 38 and ending at line 45 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 47 \n  A loop starting at line 47 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_expr_x_end.F90, Line = 76 \n  A loop starting at line 76 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41616673799580894
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31698683599825017,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_iand_x_expr.F90/atomic_update_iand_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 37 \n  A data region was created at line 37 and ending at line 45.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 38 \n  A region starting at line 38 and ending at line 44 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 46 \n  A loop starting at line 46 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr.F90, Line = 75 \n  A loop starting at line 75 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46613022801466286
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3166863250080496,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_iand_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_iand_x_expr_end.F90/atomic_update_iand_x_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 31 \n  A loop starting at line 31 was vectorized as part of the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 37 \n  A data region was created at line 37 and ending at line 46.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 46 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 46 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 38 \n  A region starting at line 38 and ending at line 45 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 47 \n  A loop starting at line 47 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_iand_x_expr_end.F90, Line = 76 \n  A loop starting at line 76 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41624030499951914
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3674156430060975,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_ior_expr_x.F90/atomic_update_ior_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165297969884705
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3665581320237834,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_ior_expr_x_end.F90/atomic_update_ior_expr_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_expr_x_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46626341599039733
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3171729530149605,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_ior_x_expr.F90/atomic_update_ior_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4164081500202883
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31697619598708116,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ior_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_ior_x_expr_end.F90/atomic_update_ior_x_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ior_x_expr_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162865650199819
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31684059399412945,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_ixor_expr_x.F90/atomic_update_ixor_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41658872601692565
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31672724199597724,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_ixor_expr_x_end.F90/atomic_update_ixor_expr_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_expr_x_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46625316701829433
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3168582759972196,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_ixor_x_expr.F90/atomic_update_ixor_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 35 \n  A data region was created at line 35 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 36 \n  A region starting at line 36 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 44 \n  A loop starting at line 44 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.466952330985805
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31673435599077493,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_ixor_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_ixor_x_expr_end.F90/atomic_update_ixor_x_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced by a library call.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was interchanged with the loop starting at line 22.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 29 \n  A loop starting at line 29 was fused with the loop starting at line 28.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 28.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 35 \n  A data region was created at line 35 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 36 \n  A region starting at line 36 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_ixor_x_expr_end.F90, Line = 74 \n  A loop starting at line 74 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 101 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.617292926996015
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316511538985651,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_max_expr_list_x.F90/atomic_update_max_expr_list_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 25 \n  A region starting at line 25 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41626747700502165
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3172221659915522,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_max_expr_list_x_end.F90/atomic_update_max_expr_list_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_list_x_end.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4158685920119751
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31657099901349284,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_max_expr_x.F90/atomic_update_max_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4174874029995408
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165876209968701,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_max_expr_x_end.F90/atomic_update_max_expr_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_expr_x_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41664028199738823
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31660165698849596,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_max_x_expr.F90/atomic_update_max_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.416136062995065
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164132150122896,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_max_x_expr_end.F90/atomic_update_max_x_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41621555102756247
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3171364349836949,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_max_x_expr_list.F90/atomic_update_max_x_expr_list.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 25 \n  A region starting at line 25 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0037 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165912010066677
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31632163500762545,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_max_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_max_x_expr_list_end.F90/atomic_update_max_x_expr_list_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_max_x_expr_list_end.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41638216201681644
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31694846399477683,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_list_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_min_expr_list_x.F90/atomic_update_min_expr_list_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 25 \n  A region starting at line 25 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162091580219567
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36631166300503537,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_list_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_min_expr_list_x_end.F90/atomic_update_min_expr_list_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_list_x_end.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162406260147691
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164842980040703,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_x.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_min_expr_x.F90/atomic_update_min_expr_x.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4164549370179884
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164701409987174,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_expr_x_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_min_expr_x_end.F90/atomic_update_min_expr_x_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_expr_x_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162339739850722
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31650289401295595,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_min_x_expr.F90/atomic_update_min_x_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 30 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 30 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 32 \n  A loop starting at line 32 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4167687729932368
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3184865929943044,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_min_x_expr_end.F90/atomic_update_min_x_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 33 \n  A loop starting at line 33 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_end.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46679229199071415
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31673881399910897,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr_list.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_min_x_expr_list.F90/atomic_update_min_x_expr_list.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 25 \n  A region starting at line 25 and ending at line 31 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41660671998397447
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3177868789935019,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_min_x_expr_list_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_min_x_expr_list_end.F90/atomic_update_min_x_expr_list_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 21 \n  A loop starting at line 21 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 24 \n  A data region was created at line 24 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 25 \n  A region starting at line 25 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_min_x_expr_list_end.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41634726600022987
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3166436149913352,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_and_expr.F90/atomic_update_x_and_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165703820181079
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31660602500778623,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_and_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_and_expr_end.F90/atomic_update_x_and_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_and_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41697559898602776
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36671600700356066,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_divided_expr.F90/atomic_update_x_divided_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.416441440989729
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": " 2617.9938116663398\n 165337.17277252747\n 1335.0505698692396\n 890.12989781510657\n 1567.342985267414\n 1277.2002194076661\n 1729355.5166650824\n 8569.7158605928962\n 3602.4675633515426\n 30351137.567601915\n 6741.397180879525\n 95.981147053473833\n 660.42721143889423\n 294.33053213757887\n 32514.143932746134\n 99202.202491071061\n 62538859.333144389\n 105233.27329136351\n 142840.80571744553\n 3541.5473582779987\n 36707.163691406473\n 310.78047111155951\n 735.1806109477717\n 2448.5832724247607\n 2257.1117029340926\n 733.05221316678717\n 9550085.4631721321\n 79434.701153774833\n 1310.632211786047\n 440.92144655727907\n 5705.0168247456013\n 65992.512040740272\n 566048.52192825498\n 3565.0843481839925\n 3103.0792342526397\n 2783.6219854300803\n 78475335.797015592\n 74348.036201656461\n 1645076.8322576934\n 47279.542538734924\n 76995.085625878637\n 42634.469247693967\n 1049.0206072525095\n 10038.644397839447\n 5530385.6334116152\n 314608.1833106706\n 118392901.58818762\n 1638.3494361318583\n 8302.8285057219982\n 10192.423321138267\n 7569.1249953736524\n 3353327.5430429494\n 4155523.1188418497\n 785.46865834377377\n 30695.548822393561\n 594199.3942493737\n 1923.0285789669401\n 932.51676184586165\n 46175.108754303394\n 123584.79752866182\n 971.18602853881089\n 4144.785139345774\n 2805.366788085953\n 602.52245925392981\n 1826211.3972661407\n 14235.384565530099\n 15314.268081428387\n 233.9370055278622\n 47060.718212157975\n 582.93166897887329\n 32266.235808237889\n 18942.595278805496\n 2462.1310588906267\n 900705.19885265664\n 308741.1448523869\n 20364645.867401719\n 94025.909091344176\n 31350.255465035072\n 30086.186199335698\n 2094.1039299346153\n 6536.5080817610124\n 500734.83039016364\n 20063.598185221312\n 64713.534425082515\n 36704.757343840167\n 12171.830788763797\n 741184.6793477796\n 3218596.2481702268\n 142981.50523075042\n 9273.5499534228784\n 709590.96785270097\n 5938.0561228560537\n 60683.449595518694\n 25531.258929641383\n 2543.9533706725606\n 157.40180867679669\n 8372.9868561354779\n 49.652639318711273\n 433456.06624914787\n 546341.32814763044\n 1603.2547967046005\n 6104.4891593607717\n 2930.4862627190546\n 11664.766725373202\n 4148.6077645110818\n 2458.2708274428278\n 120580.18055619429\n 17824.270494852859\n 213.14644349787858\n 468.42801938824402\n 21575.079885371735\n 4708.4053696645151\n 810.86676875743524\n 83.244372398558156\n 6126.760496296446\n 71648.42478799494\n 689.23523965953382\n 1706.0828555504872\n 5103.5377170738884\n 41771.582882321949\n 15094.537732303175\n 19295.120432639484\n 108233.62425018483\n 53663.323051562424\n 198841.73110275972\n 3399.0470811787136\n 47581.379791794112\n 10159866.07971888\n 8996269.5409535635\n 279.05479779989287\n 73579.13327867302\n 642.07958732429131\n 11100.406459700351\n 12979.707199142847\n 566.55377551812467\n 35580.568786650401\n 5209.2521121466007\n 47889.624790165341\n 73179.656312581719\n 149934.44819732194\n 3992.5522911150665\n 418.0391516176955\n 1977.3633996688011\n 2493.7541196100419\n 741.97437319516655\n 79919.641275321905\n 126.23353761494113\n 26117.094412415456\n 2470.0857601691596\n 2387713835.0010114\n 2765.5840477285474\n 10589.234371181774\n 116086.26344662266\n 8539.9871466722198\n 34378.326766706436\n 29723.044882957547\n 1825.9765594887419\n 36687.492631491841\n 9967.945891880252\n 5532.9725031777389\n 16046.06194967997\n 62097.278336548108\n 171205.71041517635\n 31786.41302865525\n 4884.9843342815193\n 903.25410351273149\n 2509.90693909838\n 86.456194049018961\n 13005.273589432703\n 51490.72194591006\n 101976.68305773915\n 887.15100330824237\n 13420.085814122092\n 997.76874522850892\n 178503.7724859663\n 293223.28708105133\n 5374.9584700094756\n 1149.120204479\n 5395.409945163653\n 58200.122324386459\n 576505.35348011123\n 464.41962795109919\n 1650.9239687563111\n 124669113.39070979\n 1478837.8010065979\n 42025.031289062259\n 22590.130277242439\n 84.739118442199157\n 1563.3533793211984\n 42088.67011537886\n 3735.5644371151598\n 367.07629493983853\n 675895.10280589107\n 2702773.9749647612\n 173.69140883228798\n 352051.65228951426\n 9297.7220280222227\n 109022.01181986398\n 7700.0105472695841\n 619.67765417357691\n 461348.03470604122\n 274.44915928128722\n 3521.2874093548098\n 123901.43952208993\n 2190.4821046466004\n 1408627.6360970838\n 9593.2090210165152\n 747.99407593049511\n 2871.4277697031662\n 21908438.8102086\n 619.13812795334331\n 19317282.991028458\n 12329.090308101922\n 23973.520527966251\n 1783.3044785444827\n 1920173.251802393\n 242.81220317522565\n 9334.6580808036942\n 8335.8930225971781\n 192.26705963195224\n 155518.50090364076\n 3946.2737841984199\n 52231.472946070586\n 100738.07052699626\n 15.597794276730101\n 1838.5479602088901\n 2182633.1089006644\n 1500.8868091137115\n 6512.5706322524165\n 17263.362775468442\n 18823.752791045332\n 2489.8901912712181\n 1470.8435197041958\n 204.51271616760451\n 40057.442630028476\n 297003.45576044515\n 243.88637647482838\n 50589.777871786922\n 879.36531601780678\n 105.3064795023292\n 23744359.486094762\n 2921715.0259286924\n 10049.921452727409\n 12334.059211140811\n 1680.5814667009654\n 12462.168848388394\n 1940.702862389744\n 2687574.0634519039\n 283.02253359956035\n 171838.97786651866\n 3393.2740835730096\n 22169.805101431346\n 14561.783475550164\n 192095.62041044666\n 1236.6135984273521\n 460.6789822122239\n 11272.741972203416\n 247.08194488010977\n 1255359.492975323\n 98285.577449023884\n 207785.6778349753\n 596.42568081501588\n 1155.8361615080798\n 124.63135828260711\n 9534.7781178494824\n 759.87276576929901\n 2456.048487998944\n 7536.852241392603\n 6799821.7733616587\n 218926.58925003817\n 1100.0393501756273\n 10750.161232251819\n 5016.5811358117026\n 173984.55801815997\n 11004.414782115757\n 2732.6769311123753\n 369710.48546426796\n 432067.69766768703\n 149234.85391042451\n 217967.35242436774\n 27905.098918942993\n 35006.877924818386\n 12827.928351620612\n 369878275.82953751\n 4022.4008258826962\n 2957.2350226217536\n 13811.397934843246\n 5970.7371938683273\n 43495.662293594767\n 28704.825744908932\n 2825.5413159664245\n 1545.302983058376\n 1614590.3842796735\n 315.11472665925487\n 54333.138423170742\n 670.63632034701936\n 360896.2584730488\n 2382.3505382857452\n 24041.120581776871\n 46.007532483242379\n 44892.465142789508\n 396869.68883502827\n 978293.48492491269\n 289566.44004520972\n 39098.72469011823\n 64698.279397467006\n 220364.23174929642\n 174632.57674483582\n 128280.06832772505\n 8002.3249687348807\n 6863.1927265289605\n 5634.8326384041511\n 7465.5382409855811\n 2384.2150151261685\n 33660.786630457944\n 26152.288685424352\n 1970.2112884024045\n 1434923.69687386\n 1306027.7110657408\n 9183.0451297872805\n 6313601.6800858742\n 267792.34856180305\n 4941.9842303462619\n 2896.2219380965557\n 203773.78299709919\n 5672.7203212173445\n 77939.647537037134\n 3406.3730649264271\n 12064.71082898044\n 640910.53966564988\n 485.7287986442102\n 1992849.90894137\n 114856.77559501334\n 236413.7924875193\n 206706.63832452963\n 920.24321065910237\n 46542.998107712352\n 392.6219466692221\n 12993.433173880429\n 13592.604018900938\n 13568.707744194908\n 49857.128089271057\n 34625.998491398663\n 3387.9847156667815\n 164072.93954103073\n 881.4611337748529\n 1711707.6393791356\n 587.67270204777992\n 1093138.2086699393\n 30500.852896574885\n 750.19083849330798\n 1074615.6140973081\n 148541.92859101327\n 32561.199043240395\n 3310.4590744650018\n 1961.6587107388439\n 137037.8356431484\n 8304.3687624396862\n 7502.491365761457\n 116866.20504420012\n 56862.978803702019\n 4478732.9353104355\n 34934.170662190132\n 216800.88230193412\n 58589.078390552044\n 362.43108288142344\n 3190.7449077173014\n 4880.3993747892227\n 176826.51493147828\n 2796.1526630734324\n 58950.754735813818\n 6697.4669329889248\n 12647.918398094862\n 17467.977974971029\n 1324.3687683241401\n 9626.5082442921266\n 6575.2991040642682\n 3839.6692128467257\n 65113.832688096591\n 574.43765238101287\n 665.27982527512791\n 368.5565140612751\n 1098.131625451276\n 9011.7002846738815\n 676028.60251701379\n 36953.147560447644\n 158287.04613293815\n 1188.2964627293527\n 250.84018931166125\n 129.31798582961397\n 22232.096490799137\n 779.61238540276588\n 3000103.2340147318\n 18903.239424795571\n 291553.53285523364\n 807.85381764876968\n 266.41839200160081\n 477.91124194633159\n 10714.427893634575\n 13079.054069713437\n 1846.6530157934026\n 2240796.1046524546\n 50.886321091429693\n 1342902.5860679117\n 65145.395571507761\n 108293.60562649825\n 747701.03545123769\n 6490.1744969410438\n 9341.3221495751914\n 60879.880537493431\n 1925.7571206826024\n 2495.6170715534076\n 1793.8339954286855\n 103803.70717519862\n 1190.1800525702636\n 585.33244907891788\n 57.029689457236223\n 45775.472870489066\n 5765161208.502471\n 40454.075713988961\n 155937.90557012981\n 107142.4794655569\n 397.27362539617428\n 1035.759907868925\n 21163.006218497198\n 3261.2878135208011\n 137135.32392798481\n 85.687976822122252\n 20491.055805684955\n 36722.506825930206\n 5235.1457073593783\n 2246.184031364679\n 1760319.7099616099\n 24121.546411397903\n 50421.353944825496\n 78654425.10641636\n 12374099.672625678\n 553.45808919809679\n 3337.8276395388712\n 211.35507889578903\n 6094.0481631260627\n 79.854510590280867\n 169651.00555776377\n 84768.58391366541\n 466788.39838329027\n 3492.0175456713328\n 342.86361412501088\n 94.120261753220547\n 312347.05297906819\n 234873.72925477143\n 632.03874824628303\n 12586807.777816441\n 1260.1869655026624\n 71430.748416697272\n 7790.8195617912043\n 1511.2179735041493\n 3068.5407533071707\n 41004.391564362522\n 3921.9616786722986\n 2807.2041324406\n 8453.2321042383555\n 255.80421812345966\n 11103.579476621726\n 7974.8283928473911\n 767.48102756170226\n 762.17445355583368\n 2683307.512603045\n 44.815266436484585\n 22654.528867702043\n 313307.73932023434\n 1288413.62899386\n 1814761.5886156221\n 149508.60716791937\n 13170.136848783561\n 3947209.6652993727\n 1872756.5771623398\n 123450028.23919988\n 167.78256746268471\n 6790.5254394595595\n 26319.347184329417\n 203.35626237343251\n 1070675.1676999847\n 26842.508092215994\n 487.88397974094642\n 427253.25886820635\n 15164.716756686859\n 34665.623593513716\n 19779.943045549855\n 439585.49029183516\n 357.38856141380995\n 509.48093388653808\n 214066.83872274976\n 182560.30146726704\n 3623.4849181600844\n 4418.0391344535919\n 8287.2559794504468\n 7670.7525276391507\n 171639.87006178047\n 3129.5821085550551\n 26774.314378564352\n 3410.1918638289258\n 5850.3847741031987\n 15024.866076493225\n 5513.5432552482971\n 7806.9070329777833\n 9704.5582514419621\n 1506.7809630546035\n 1747.3529457958018\n 3092.1389359872978\n 55384.222625231188\n 1557.3450118231351\n 11954.774968184045\n 1784.184411875794\n 119.16340803193557\n 370293.38166716998\n 286.25727922916548\n 84591.608286291405\n 1834.5984202797324\n 453076061.26598001\n 1103986.0831513791\n 23460.62957974197\n 58945.317575184527\n 155850.74169454814\n 4777.8322227528815\n 12484.276596035828\n 417.41035088591792\n 251755.0096007908\n 4336.5096382506918\n 21639.727855111578\n 5105.6117219251028\n 969834.89971521916\n 22286.373201078542\n 7875.8436097031408\n 23485.873266727474\n 5085.5664910787746\n 110112357.93094794\n 51662.993474174706\n 42671.081209928248\n 599066.05947672273\n 56422.914177022903\n 22242.716212404044\n 302377.19744697656\n 745.86039112784738\n 2885.2938938726197\n 6524.7753953384263\n 31708.976874788255\n 70974349.875422463\n 286429.71953564521\n 85084733.11315681\n 1630.2583556518689\n 16114.318303737267\n 9085.7448193886885\n 70039.167840955779\n 3606.0597570314876\n 54836.050306638994\n 10925.105191136734\n 252725.88919920978\n 2287.2552172903652\n 3741.3763801015361\n 700.28933893938256\n 248663.56579375482\n 6343.5027457132819\n 66716.924056977179\n 10205.562863296704\n 94921.96048882803\n 127146.07013012083\n 159052.20439351778\n 97978.298984692548\n 51385.182562962895\n 5236.1311336870376\n 13274.069066648373\n 312.73780476032442\n 1000.6744268561233\n 5765.1689113188031\n 202.69636396050197\n 3522.6908454590293\n 79825.239427592634\n 10954.106605213181\n 291.06329694588885\n 11263.696449293995\n 1602.4315861728564\n 158480.14049797232\n 1160.8937071381988\n 991.81731832691662\n 13783.678329864362\n 1578.8188797821254\n 246.1425853147675\n 78.289560881915094\n 669.10246956213155\n 79843970.741642877\n 138920.46091062552\n 1085256.6410571339\n 170467.09657745709\n 570.16538199873196\n 7710.5403816563958\n 8208.8043562872226\n 2699.4176656308914\n 2359.6579185256287\n 6324070.2516253665\n 771134.14125015284\n 37168.083265180561\n 13264.261443279847\n 1404.9461433971717\n 92.466834676622184\n 22642.399931277399\n 1236.451256800219\n 21090.185861895297\n 3193.8230205504588\n 409574.19670964876\n 231016.99831991483\n 515.42032565966599\n 99206.314127201098\n 105864.97335609228\n 1048.699901622216\n 6770.1259196410383\n 948250.23021649302\n 622.80528431215714\n 28748.395324992969\n 434073.6320069019\n 42391.68452098775\n 43244.27449747327\n 550.53878525709354\n 5721.0889910175083\n 2428.4123827708463\n 20842.562791162909\n 32386.542266603148\n 579798.11858847237\n 12295.363845220909\n 226399.4415989012\n 102283.71288813124\n 5644079.3152342206\n 1954.9878864747668\n 557.72565993006526\n 10275327.338085553\n 15848.309928275259\n 356523.1173939447\n 14654400.836177392\n 9965.9361140435522\n 818.049817468524\n 26391.262266672478\n 4830.458816019679\n 143033.9286787748\n 734305.01302424213\n 49762.27990279541\n 1872.8801862712151\n 11320.101954156547\n 61543.604662712605\n 7888.9799393871999\n 31307.587862807031\n 5992.4634944685995\n 93169254.677896708\n 52431.984537791024\n 252.14400417126163\n 77260.861242823637\n 29696.462314976259\n 323472.8015406949\n 8186.8379194266836\n 446488.76630350208\n 487.49425040903168\n 5538.6224795864691\n 5101.8622798399274\n 974.29889110402962\n 22235.827908746069\n 7131538.2232945114\n 22695.349108346629\n 16218.121826421442\n 17590.345528325768\n 1898206.3764970256\n 787.43306632695919\n 3721.1476022533939\n 33221.318354775765\n 751673.60926442116\n 6677.2979974155478\n 6427497.8651486943\n 12704.051143060407\n 5162.9657251440576\n 4632.980568454137\n 156.16559824455118\n 516495.78813510441\n 42009.694248222368\n 860.98424030134686\n 3392.934155917711\n 5182.3349506403993\n 170623.51780092262\n 306.77369084392899\n 1925.4034083657727\n 629.09808333522733\n 4459.3316205750434\n 399361.08432221593\n 703.51942960379392\n 3837.9406048547789\n 3257.3109590145145\n 5648003.1979847923\n 504850.68703429459\n 1974839.5896050439\n 25.21577867385804\n 103703.61659392566\n 1530260.6098018712\n 10627.182333970713\n 175.55388528074548\n 1699.8461718135597\n 28283.764566428956\n 2767.1584482227654\n 6837.6331346659827\n 2389367.9569912655\n 18285.381739215863\n 693807.22355208197\n 179704470.92841581\n 12776.739314634311\n 34250.372604286953\n 3247.6511214978686\n 2220.8110370049694\n 1812979.7005435152\n 197.72589568643983\n 20593.8285129367\n 66286996.819601372\n 21891464.544918563\n 979.04705728942702\n 1214.296103904295\n 5096373.9527144749\n 160.72984688017428\n 108634.39352144071\n 1679.0309731007378\n",
                    "result": 1,
                    "runtime": 0.3663152600056492,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_divided_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_divided_expr_end.F90/atomic_update_x_divided_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_divided_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41589346900582314
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": " 2617.9938116663398\n 165337.17277252747\n 1335.0505698692396\n 890.12989781510657\n 1567.342985267414\n 1277.2002194076661\n 1729355.5166650824\n 8569.7158605928962\n 3602.4675633515426\n 30351137.567601915\n 6741.397180879525\n 95.981147053473833\n 660.42721143889423\n 294.33053213757887\n 32514.143932746134\n 99202.202491071061\n 62538859.333144389\n 105233.27329136351\n 142840.80571744553\n 3541.5473582779987\n 36707.163691406473\n 310.78047111155951\n 735.1806109477717\n 2448.5832724247607\n 2257.1117029340926\n 733.05221316678717\n 9550085.4631721321\n 79434.701153774833\n 1310.632211786047\n 440.92144655727907\n 5705.0168247456013\n 65992.512040740272\n 566048.52192825498\n 3565.0843481839925\n 3103.0792342526397\n 2783.6219854300803\n 78475335.797015592\n 74348.036201656461\n 1645076.8322576934\n 47279.542538734924\n 76995.085625878637\n 42634.469247693967\n 1049.0206072525095\n 10038.644397839447\n 5530385.6334116152\n 314608.1833106706\n 118392901.58818762\n 1638.3494361318583\n 8302.8285057219982\n 10192.423321138267\n 7569.1249953736524\n 3353327.5430429494\n 4155523.1188418497\n 785.46865834377377\n 30695.548822393561\n 594199.3942493737\n 1923.0285789669401\n 932.51676184586165\n 46175.108754303394\n 123584.79752866182\n 971.18602853881089\n 4144.785139345774\n 2805.366788085953\n 602.52245925392981\n 1826211.3972661407\n 14235.384565530099\n 15314.268081428387\n 233.9370055278622\n 47060.718212157975\n 582.93166897887329\n 32266.235808237889\n 18942.595278805496\n 2462.1310588906267\n 900705.19885265664\n 308741.1448523869\n 20364645.867401719\n 94025.909091344176\n 31350.255465035072\n 30086.186199335698\n 2094.1039299346153\n 6536.5080817610124\n 500734.83039016364\n 20063.598185221312\n 64713.534425082515\n 36704.757343840167\n 12171.830788763797\n 741184.6793477796\n 3218596.2481702268\n 142981.50523075042\n 9273.5499534228784\n 709590.96785270097\n 5938.0561228560537\n 60683.449595518694\n 25531.258929641383\n 2543.9533706725606\n 157.40180867679669\n 8372.9868561354779\n 49.652639318711273\n 433456.06624914787\n 546341.32814763044\n 1603.2547967046005\n 6104.4891593607717\n 2930.4862627190546\n 11664.766725373202\n 4148.6077645110818\n 2458.2708274428278\n 120580.18055619429\n 17824.270494852859\n 213.14644349787858\n 468.42801938824402\n 21575.079885371735\n 4708.4053696645151\n 810.86676875743524\n 83.244372398558156\n 6126.760496296446\n 71648.42478799494\n 689.23523965953382\n 1706.0828555504872\n 5103.5377170738884\n 41771.582882321949\n 15094.537732303175\n 19295.120432639484\n 108233.62425018483\n 53663.323051562424\n 198841.73110275972\n 3399.0470811787136\n 47581.379791794112\n 10159866.07971888\n 8996269.5409535635\n 279.05479779989287\n 73579.13327867302\n 642.07958732429131\n 11100.406459700351\n 12979.707199142847\n 566.55377551812467\n 35580.568786650401\n 5209.2521121466007\n 47889.624790165341\n 73179.656312581719\n 149934.44819732194\n 3992.5522911150665\n 418.0391516176955\n 1977.3633996688011\n 2493.7541196100419\n 741.97437319516655\n 79919.641275321905\n 126.23353761494113\n 26117.094412415456\n 2470.0857601691596\n 2387713835.0010114\n 2765.5840477285474\n 10589.234371181774\n 116086.26344662266\n 8539.9871466722198\n 34378.326766706436\n 29723.044882957547\n 1825.9765594887419\n 36687.492631491841\n 9967.945891880252\n 5532.9725031777389\n 16046.06194967997\n 62097.278336548108\n 171205.71041517635\n 31786.41302865525\n 4884.9843342815193\n 903.25410351273149\n 2509.90693909838\n 86.456194049018961\n 13005.273589432703\n 51490.72194591006\n 101976.68305773915\n 887.15100330824237\n 13420.085814122092\n 997.76874522850892\n 178503.7724859663\n 293223.28708105133\n 5374.9584700094756\n 1149.120204479\n 5395.409945163653\n 58200.122324386459\n 576505.35348011123\n 464.41962795109919\n 1650.9239687563111\n 124669113.39070979\n 1478837.8010065979\n 42025.031289062259\n 22590.130277242439\n 84.739118442199157\n 1563.3533793211984\n 42088.67011537886\n 3735.5644371151598\n 367.07629493983853\n 675895.10280589107\n 2702773.9749647612\n 173.69140883228798\n 352051.65228951426\n 9297.7220280222227\n 109022.01181986398\n 7700.0105472695841\n 619.67765417357691\n 461348.03470604122\n 274.44915928128722\n 3521.2874093548098\n 123901.43952208993\n 2190.4821046466004\n 1408627.6360970838\n 9593.2090210165152\n 747.99407593049511\n 2871.4277697031662\n 21908438.8102086\n 619.13812795334331\n 19317282.991028458\n 12329.090308101922\n 23973.520527966251\n 1783.3044785444827\n 1920173.251802393\n 242.81220317522565\n 9334.6580808036942\n 8335.8930225971781\n 192.26705963195224\n 155518.50090364076\n 3946.2737841984199\n 52231.472946070586\n 100738.07052699626\n 15.597794276730101\n 1838.5479602088901\n 2182633.1089006644\n 1500.8868091137115\n 6512.5706322524165\n 17263.362775468442\n 18823.752791045332\n 2489.8901912712181\n 1470.8435197041958\n 204.51271616760451\n 40057.442630028476\n 297003.45576044515\n 243.88637647482838\n 50589.777871786922\n 879.36531601780678\n 105.3064795023292\n 23744359.486094762\n 2921715.0259286924\n 10049.921452727409\n 12334.059211140811\n 1680.5814667009654\n 12462.168848388394\n 1940.702862389744\n 2687574.0634519039\n 283.02253359956035\n 171838.97786651866\n 3393.2740835730096\n 22169.805101431346\n 14561.783475550164\n 192095.62041044666\n 1236.6135984273521\n 460.6789822122239\n 11272.741972203416\n 247.08194488010977\n 1255359.492975323\n 98285.577449023884\n 207785.6778349753\n 596.42568081501588\n 1155.8361615080798\n 124.63135828260711\n 9534.7781178494824\n 759.87276576929901\n 2456.048487998944\n 7536.852241392603\n 6799821.7733616587\n 218926.58925003817\n 1100.0393501756273\n 10750.161232251819\n 5016.5811358117026\n 173984.55801815997\n 11004.414782115757\n 2732.6769311123753\n 369710.48546426796\n 432067.69766768703\n 149234.85391042451\n 217967.35242436774\n 27905.098918942993\n 35006.877924818386\n 12827.928351620612\n 369878275.82953751\n 4022.4008258826962\n 2957.2350226217536\n 13811.397934843246\n 5970.7371938683273\n 43495.662293594767\n 28704.825744908932\n 2825.5413159664245\n 1545.302983058376\n 1614590.3842796735\n 315.11472665925487\n 54333.138423170742\n 670.63632034701936\n 360896.2584730488\n 2382.3505382857452\n 24041.120581776871\n 46.007532483242379\n 44892.465142789508\n 396869.68883502827\n 978293.48492491269\n 289566.44004520972\n 39098.72469011823\n 64698.279397467006\n 220364.23174929642\n 174632.57674483582\n 128280.06832772505\n 8002.3249687348807\n 6863.1927265289605\n 5634.8326384041511\n 7465.5382409855811\n 2384.2150151261685\n 33660.786630457944\n 26152.288685424352\n 1970.2112884024045\n 1434923.69687386\n 1306027.7110657408\n 9183.0451297872805\n 6313601.6800858742\n 267792.34856180305\n 4941.9842303462619\n 2896.2219380965557\n 203773.78299709919\n 5672.7203212173445\n 77939.647537037134\n 3406.3730649264271\n 12064.71082898044\n 640910.53966564988\n 485.7287986442102\n 1992849.90894137\n 114856.77559501334\n 236413.7924875193\n 206706.63832452963\n 920.24321065910237\n 46542.998107712352\n 392.6219466692221\n 12993.433173880429\n 13592.604018900938\n 13568.707744194908\n 49857.128089271057\n 34625.998491398663\n 3387.9847156667815\n 164072.93954103073\n 881.4611337748529\n 1711707.6393791356\n 587.67270204777992\n 1093138.2086699393\n 30500.852896574885\n 750.19083849330798\n 1074615.6140973081\n 148541.92859101327\n 32561.199043240395\n 3310.4590744650018\n 1961.6587107388439\n 137037.8356431484\n 8304.3687624396862\n 7502.491365761457\n 116866.20504420012\n 56862.978803702019\n 4478732.9353104355\n 34934.170662190132\n 216800.88230193412\n 58589.078390552044\n 362.43108288142344\n 3190.7449077173014\n 4880.3993747892227\n 176826.51493147828\n 2796.1526630734324\n 58950.754735813818\n 6697.4669329889248\n 12647.918398094862\n 17467.977974971029\n 1324.3687683241401\n 9626.5082442921266\n 6575.2991040642682\n 3839.6692128467257\n 65113.832688096591\n 574.43765238101287\n 665.27982527512791\n 368.5565140612751\n 1098.131625451276\n 9011.7002846738815\n 676028.60251701379\n 36953.147560447644\n 158287.04613293815\n 1188.2964627293527\n 250.84018931166125\n 129.31798582961397\n 22232.096490799137\n 779.61238540276588\n 3000103.2340147318\n 18903.239424795571\n 291553.53285523364\n 807.85381764876968\n 266.41839200160081\n 477.91124194633159\n 10714.427893634575\n 13079.054069713437\n 1846.6530157934026\n 2240796.1046524546\n 50.886321091429693\n 1342902.5860679117\n 65145.395571507761\n 108293.60562649825\n 747701.03545123769\n 6490.1744969410438\n 9341.3221495751914\n 60879.880537493431\n 1925.7571206826024\n 2495.6170715534076\n 1793.8339954286855\n 103803.70717519862\n 1190.1800525702636\n 585.33244907891788\n 57.029689457236223\n 45775.472870489066\n 5765161208.502471\n 40454.075713988961\n 155937.90557012981\n 107142.4794655569\n 397.27362539617428\n 1035.759907868925\n 21163.006218497198\n 3261.2878135208011\n 137135.32392798481\n 85.687976822122252\n 20491.055805684955\n 36722.506825930206\n 5235.1457073593783\n 2246.184031364679\n 1760319.7099616099\n 24121.546411397903\n 50421.353944825496\n 78654425.10641636\n 12374099.672625678\n 553.45808919809679\n 3337.8276395388712\n 211.35507889578903\n 6094.0481631260627\n 79.854510590280867\n 169651.00555776377\n 84768.58391366541\n 466788.39838329027\n 3492.0175456713328\n 342.86361412501088\n 94.120261753220547\n 312347.05297906819\n 234873.72925477143\n 632.03874824628303\n 12586807.777816441\n 1260.1869655026624\n 71430.748416697272\n 7790.8195617912043\n 1511.2179735041493\n 3068.5407533071707\n 41004.391564362522\n 3921.9616786722986\n 2807.2041324406\n 8453.2321042383555\n 255.80421812345966\n 11103.579476621726\n 7974.8283928473911\n 767.48102756170226\n 762.17445355583368\n 2683307.512603045\n 44.815266436484585\n 22654.528867702043\n 313307.73932023434\n 1288413.62899386\n 1814761.5886156221\n 149508.60716791937\n 13170.136848783561\n 3947209.6652993727\n 1872756.5771623398\n 123450028.23919988\n 167.78256746268471\n 6790.5254394595595\n 26319.347184329417\n 203.35626237343251\n 1070675.1676999847\n 26842.508092215994\n 487.88397974094642\n 427253.25886820635\n 15164.716756686859\n 34665.623593513716\n 19779.943045549855\n 439585.49029183516\n 357.38856141380995\n 509.48093388653808\n 214066.83872274976\n 182560.30146726704\n 3623.4849181600844\n 4418.0391344535919\n 8287.2559794504468\n 7670.7525276391507\n 171639.87006178047\n 3129.5821085550551\n 26774.314378564352\n 3410.1918638289258\n 5850.3847741031987\n 15024.866076493225\n 5513.5432552482971\n 7806.9070329777833\n 9704.5582514419621\n 1506.7809630546035\n 1747.3529457958018\n 3092.1389359872978\n 55384.222625231188\n 1557.3450118231351\n 11954.774968184045\n 1784.184411875794\n 119.16340803193557\n 370293.38166716998\n 286.25727922916548\n 84591.608286291405\n 1834.5984202797324\n 453076061.26598001\n 1103986.0831513791\n 23460.62957974197\n 58945.317575184527\n 155850.74169454814\n 4777.8322227528815\n 12484.276596035828\n 417.41035088591792\n 251755.0096007908\n 4336.5096382506918\n 21639.727855111578\n 5105.6117219251028\n 969834.89971521916\n 22286.373201078542\n 7875.8436097031408\n 23485.873266727474\n 5085.5664910787746\n 110112357.93094794\n 51662.993474174706\n 42671.081209928248\n 599066.05947672273\n 56422.914177022903\n 22242.716212404044\n 302377.19744697656\n 745.86039112784738\n 2885.2938938726197\n 6524.7753953384263\n 31708.976874788255\n 70974349.875422463\n 286429.71953564521\n 85084733.11315681\n 1630.2583556518689\n 16114.318303737267\n 9085.7448193886885\n 70039.167840955779\n 3606.0597570314876\n 54836.050306638994\n 10925.105191136734\n 252725.88919920978\n 2287.2552172903652\n 3741.3763801015361\n 700.28933893938256\n 248663.56579375482\n 6343.5027457132819\n 66716.924056977179\n 10205.562863296704\n 94921.96048882803\n 127146.07013012083\n 159052.20439351778\n 97978.298984692548\n 51385.182562962895\n 5236.1311336870376\n 13274.069066648373\n 312.73780476032442\n 1000.6744268561233\n 5765.1689113188031\n 202.69636396050197\n 3522.6908454590293\n 79825.239427592634\n 10954.106605213181\n 291.06329694588885\n 11263.696449293995\n 1602.4315861728564\n 158480.14049797232\n 1160.8937071381988\n 991.81731832691662\n 13783.678329864362\n 1578.8188797821254\n 246.1425853147675\n 78.289560881915094\n 669.10246956213155\n 79843970.741642877\n 138920.46091062552\n 1085256.6410571339\n 170467.09657745709\n 570.16538199873196\n 7710.5403816563958\n 8208.8043562872226\n 2699.4176656308914\n 2359.6579185256287\n 6324070.2516253665\n 771134.14125015284\n 37168.083265180561\n 13264.261443279847\n 1404.9461433971717\n 92.466834676622184\n 22642.399931277399\n 1236.451256800219\n 21090.185861895297\n 3193.8230205504588\n 409574.19670964876\n 231016.99831991483\n 515.42032565966599\n 99206.314127201098\n 105864.97335609228\n 1048.699901622216\n 6770.1259196410383\n 948250.23021649302\n 622.80528431215714\n 28748.395324992969\n 434073.6320069019\n 42391.68452098775\n 43244.27449747327\n 550.53878525709354\n 5721.0889910175083\n 2428.4123827708463\n 20842.562791162909\n 32386.542266603148\n 579798.11858847237\n 12295.363845220909\n 226399.4415989012\n 102283.71288813124\n 5644079.3152342206\n 1954.9878864747668\n 557.72565993006526\n 10275327.338085553\n 15848.309928275259\n 356523.1173939447\n 14654400.836177392\n 9965.9361140435522\n 818.049817468524\n 26391.262266672478\n 4830.458816019679\n 143033.9286787748\n 734305.01302424213\n 49762.27990279541\n 1872.8801862712151\n 11320.101954156547\n 61543.604662712605\n 7888.9799393871999\n 31307.587862807031\n 5992.4634944685995\n 93169254.677896708\n 52431.984537791024\n 252.14400417126163\n 77260.861242823637\n 29696.462314976259\n 323472.8015406949\n 8186.8379194266836\n 446488.76630350208\n 487.49425040903168\n 5538.6224795864691\n 5101.8622798399274\n 974.29889110402962\n 22235.827908746069\n 7131538.2232945114\n 22695.349108346629\n 16218.121826421442\n 17590.345528325768\n 1898206.3764970256\n 787.43306632695919\n 3721.1476022533939\n 33221.318354775765\n 751673.60926442116\n 6677.2979974155478\n 6427497.8651486943\n 12704.051143060407\n 5162.9657251440576\n 4632.980568454137\n 156.16559824455118\n 516495.78813510441\n 42009.694248222368\n 860.98424030134686\n 3392.934155917711\n 5182.3349506403993\n 170623.51780092262\n 306.77369084392899\n 1925.4034083657727\n 629.09808333522733\n 4459.3316205750434\n 399361.08432221593\n 703.51942960379392\n 3837.9406048547789\n 3257.3109590145145\n 5648003.1979847923\n 504850.68703429459\n 1974839.5896050439\n 25.21577867385804\n 103703.61659392566\n 1530260.6098018712\n 10627.182333970713\n 175.55388528074548\n 1699.8461718135597\n 28283.764566428956\n 2767.1584482227654\n 6837.6331346659827\n 2389367.9569912655\n 18285.381739215863\n 693807.22355208197\n 179704470.92841581\n 12776.739314634311\n 34250.372604286953\n 3247.6511214978686\n 2220.8110370049694\n 1812979.7005435152\n 197.72589568643983\n 20593.8285129367\n 66286996.819601372\n 21891464.544918563\n 979.04705728942702\n 1214.296103904295\n 5096373.9527144749\n 160.72984688017428\n 108634.39352144071\n 1679.0309731007378\n",
                    "result": 1,
                    "runtime": 0.3167148889915552,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_eqv_expr.F90/atomic_update_x_eqv_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41660680097993463
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167112509836443,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_eqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_eqv_expr_end.F90/atomic_update_x_eqv_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_eqv_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41655850000097416
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164498039986938,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_minus_expr.F90/atomic_update_x_minus_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4164715679944493
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3668060839991085,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_minus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_minus_expr_end.F90/atomic_update_x_minus_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_minus_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41624810101347975
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31728585498058237,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_neqv_expr.F90/atomic_update_x_neqv_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.416171527991537
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162986419920344,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_neqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_neqv_expr_end.F90/atomic_update_x_neqv_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_neqv_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41609703900758177
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31717480599763803,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_or_expr.F90/atomic_update_x_or_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4163614620047156
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164982339949347,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_or_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_or_expr_end.F90/atomic_update_x_or_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_or_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4168265309999697
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31663956798729487,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_plus_expr.F90/atomic_update_x_plus_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41622025799006224
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31673806300386786,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_plus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_plus_expr_end.F90/atomic_update_x_plus_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_plus_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41606193300685845
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164222229970619,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_times_expr.F90/atomic_update_x_times_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162316309812013
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163609970069956,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_update_x_times_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_update_x_times_expr_end.F90/atomic_update_x_times_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_update_x_times_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4161943499930203
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31634700202266686,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_and_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_and_expr.F90/atomic_x_and_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4167593939928338
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161667899985332,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_and_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_and_expr_end.F90/atomic_x_and_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_and_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4163808620069176
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31643503002123907,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_divided_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_divided_expr.F90/atomic_x_divided_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162829109991435
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": " 2617.9938116663398\n 165337.17277252747\n 1335.0505698692396\n 890.12989781510657\n 1567.342985267414\n 1277.2002194076661\n 1729355.5166650824\n 8569.7158605928962\n 3602.4675633515426\n 30351137.567601915\n 6741.397180879525\n 95.981147053473833\n 660.42721143889423\n 294.33053213757887\n 32514.143932746134\n 99202.202491071061\n 62538859.333144389\n 105233.27329136351\n 142840.80571744553\n 3541.5473582779987\n 36707.163691406473\n 310.78047111155951\n 735.1806109477717\n 2448.5832724247607\n 2257.1117029340926\n 733.05221316678717\n 9550085.4631721321\n 79434.701153774833\n 1310.632211786047\n 440.92144655727907\n 5705.0168247456013\n 65992.512040740272\n 566048.52192825498\n 3565.0843481839925\n 3103.0792342526397\n 2783.6219854300803\n 78475335.797015592\n 74348.036201656461\n 1645076.8322576934\n 47279.542538734924\n 76995.085625878637\n 42634.469247693967\n 1049.0206072525095\n 10038.644397839447\n 5530385.6334116152\n 314608.1833106706\n 118392901.58818762\n 1638.3494361318583\n 8302.8285057219982\n 10192.423321138267\n 7569.1249953736524\n 3353327.5430429494\n 4155523.1188418497\n 785.46865834377377\n 30695.548822393561\n 594199.3942493737\n 1923.0285789669401\n 932.51676184586165\n 46175.108754303394\n 123584.79752866182\n 971.18602853881089\n 4144.785139345774\n 2805.366788085953\n 602.52245925392981\n 1826211.3972661407\n 14235.384565530099\n 15314.268081428387\n 233.9370055278622\n 47060.718212157975\n 582.93166897887329\n 32266.235808237889\n 18942.595278805496\n 2462.1310588906267\n 900705.19885265664\n 308741.1448523869\n 20364645.867401719\n 94025.909091344176\n 31350.255465035072\n 30086.186199335698\n 2094.1039299346153\n 6536.5080817610124\n 500734.83039016364\n 20063.598185221312\n 64713.534425082515\n 36704.757343840167\n 12171.830788763797\n 741184.6793477796\n 3218596.2481702268\n 142981.50523075042\n 9273.5499534228784\n 709590.96785270097\n 5938.0561228560537\n 60683.449595518694\n 25531.258929641383\n 2543.9533706725606\n 157.40180867679669\n 8372.9868561354779\n 49.652639318711273\n 433456.06624914787\n 546341.32814763044\n 1603.2547967046005\n 6104.4891593607717\n 2930.4862627190546\n 11664.766725373202\n 4148.6077645110818\n 2458.2708274428278\n 120580.18055619429\n 17824.270494852859\n 213.14644349787858\n 468.42801938824402\n 21575.079885371735\n 4708.4053696645151\n 810.86676875743524\n 83.244372398558156\n 6126.760496296446\n 71648.42478799494\n 689.23523965953382\n 1706.0828555504872\n 5103.5377170738884\n 41771.582882321949\n 15094.537732303175\n 19295.120432639484\n 108233.62425018483\n 53663.323051562424\n 198841.73110275972\n 3399.0470811787136\n 47581.379791794112\n 10159866.07971888\n 8996269.5409535635\n 279.05479779989287\n 73579.13327867302\n 642.07958732429131\n 11100.406459700351\n 12979.707199142847\n 566.55377551812467\n 35580.568786650401\n 5209.2521121466007\n 47889.624790165341\n 73179.656312581719\n 149934.44819732194\n 3992.5522911150665\n 418.0391516176955\n 1977.3633996688011\n 2493.7541196100419\n 741.97437319516655\n 79919.641275321905\n 126.23353761494113\n 26117.094412415456\n 2470.0857601691596\n 2387713835.0010114\n 2765.5840477285474\n 10589.234371181774\n 116086.26344662266\n 8539.9871466722198\n 34378.326766706436\n 29723.044882957547\n 1825.9765594887419\n 36687.492631491841\n 9967.945891880252\n 5532.9725031777389\n 16046.06194967997\n 62097.278336548108\n 171205.71041517635\n 31786.41302865525\n 4884.9843342815193\n 903.25410351273149\n 2509.90693909838\n 86.456194049018961\n 13005.273589432703\n 51490.72194591006\n 101976.68305773915\n 887.15100330824237\n 13420.085814122092\n 997.76874522850892\n 178503.7724859663\n 293223.28708105133\n 5374.9584700094756\n 1149.120204479\n 5395.409945163653\n 58200.122324386459\n 576505.35348011123\n 464.41962795109919\n 1650.9239687563111\n 124669113.39070979\n 1478837.8010065979\n 42025.031289062259\n 22590.130277242439\n 84.739118442199157\n 1563.3533793211984\n 42088.67011537886\n 3735.5644371151598\n 367.07629493983853\n 675895.10280589107\n 2702773.9749647612\n 173.69140883228798\n 352051.65228951426\n 9297.7220280222227\n 109022.01181986398\n 7700.0105472695841\n 619.67765417357691\n 461348.03470604122\n 274.44915928128722\n 3521.2874093548098\n 123901.43952208993\n 2190.4821046466004\n 1408627.6360970838\n 9593.2090210165152\n 747.99407593049511\n 2871.4277697031662\n 21908438.8102086\n 619.13812795334331\n 19317282.991028458\n 12329.090308101922\n 23973.520527966251\n 1783.3044785444827\n 1920173.251802393\n 242.81220317522565\n 9334.6580808036942\n 8335.8930225971781\n 192.26705963195224\n 155518.50090364076\n 3946.2737841984199\n 52231.472946070586\n 100738.07052699626\n 15.597794276730101\n 1838.5479602088901\n 2182633.1089006644\n 1500.8868091137115\n 6512.5706322524165\n 17263.362775468442\n 18823.752791045332\n 2489.8901912712181\n 1470.8435197041958\n 204.51271616760451\n 40057.442630028476\n 297003.45576044515\n 243.88637647482838\n 50589.777871786922\n 879.36531601780678\n 105.3064795023292\n 23744359.486094762\n 2921715.0259286924\n 10049.921452727409\n 12334.059211140811\n 1680.5814667009654\n 12462.168848388394\n 1940.702862389744\n 2687574.0634519039\n 283.02253359956035\n 171838.97786651866\n 3393.2740835730096\n 22169.805101431346\n 14561.783475550164\n 192095.62041044666\n 1236.6135984273521\n 460.6789822122239\n 11272.741972203416\n 247.08194488010977\n 1255359.492975323\n 98285.577449023884\n 207785.6778349753\n 596.42568081501588\n 1155.8361615080798\n 124.63135828260711\n 9534.7781178494824\n 759.87276576929901\n 2456.048487998944\n 7536.852241392603\n 6799821.7733616587\n 218926.58925003817\n 1100.0393501756273\n 10750.161232251819\n 5016.5811358117026\n 173984.55801815997\n 11004.414782115757\n 2732.6769311123753\n 369710.48546426796\n 432067.69766768703\n 149234.85391042451\n 217967.35242436774\n 27905.098918942993\n 35006.877924818386\n 12827.928351620612\n 369878275.82953751\n 4022.4008258826962\n 2957.2350226217536\n 13811.397934843246\n 5970.7371938683273\n 43495.662293594767\n 28704.825744908932\n 2825.5413159664245\n 1545.302983058376\n 1614590.3842796735\n 315.11472665925487\n 54333.138423170742\n 670.63632034701936\n 360896.2584730488\n 2382.3505382857452\n 24041.120581776871\n 46.007532483242379\n 44892.465142789508\n 396869.68883502827\n 978293.48492491269\n 289566.44004520972\n 39098.72469011823\n 64698.279397467006\n 220364.23174929642\n 174632.57674483582\n 128280.06832772505\n 8002.3249687348807\n 6863.1927265289605\n 5634.8326384041511\n 7465.5382409855811\n 2384.2150151261685\n 33660.786630457944\n 26152.288685424352\n 1970.2112884024045\n 1434923.69687386\n 1306027.7110657408\n 9183.0451297872805\n 6313601.6800858742\n 267792.34856180305\n 4941.9842303462619\n 2896.2219380965557\n 203773.78299709919\n 5672.7203212173445\n 77939.647537037134\n 3406.3730649264271\n 12064.71082898044\n 640910.53966564988\n 485.7287986442102\n 1992849.90894137\n 114856.77559501334\n 236413.7924875193\n 206706.63832452963\n 920.24321065910237\n 46542.998107712352\n 392.6219466692221\n 12993.433173880429\n 13592.604018900938\n 13568.707744194908\n 49857.128089271057\n 34625.998491398663\n 3387.9847156667815\n 164072.93954103073\n 881.4611337748529\n 1711707.6393791356\n 587.67270204777992\n 1093138.2086699393\n 30500.852896574885\n 750.19083849330798\n 1074615.6140973081\n 148541.92859101327\n 32561.199043240395\n 3310.4590744650018\n 1961.6587107388439\n 137037.8356431484\n 8304.3687624396862\n 7502.491365761457\n 116866.20504420012\n 56862.978803702019\n 4478732.9353104355\n 34934.170662190132\n 216800.88230193412\n 58589.078390552044\n 362.43108288142344\n 3190.7449077173014\n 4880.3993747892227\n 176826.51493147828\n 2796.1526630734324\n 58950.754735813818\n 6697.4669329889248\n 12647.918398094862\n 17467.977974971029\n 1324.3687683241401\n 9626.5082442921266\n 6575.2991040642682\n 3839.6692128467257\n 65113.832688096591\n 574.43765238101287\n 665.27982527512791\n 368.5565140612751\n 1098.131625451276\n 9011.7002846738815\n 676028.60251701379\n 36953.147560447644\n 158287.04613293815\n 1188.2964627293527\n 250.84018931166125\n 129.31798582961397\n 22232.096490799137\n 779.61238540276588\n 3000103.2340147318\n 18903.239424795571\n 291553.53285523364\n 807.85381764876968\n 266.41839200160081\n 477.91124194633159\n 10714.427893634575\n 13079.054069713437\n 1846.6530157934026\n 2240796.1046524546\n 50.886321091429693\n 1342902.5860679117\n 65145.395571507761\n 108293.60562649825\n 747701.03545123769\n 6490.1744969410438\n 9341.3221495751914\n 60879.880537493431\n 1925.7571206826024\n 2495.6170715534076\n 1793.8339954286855\n 103803.70717519862\n 1190.1800525702636\n 585.33244907891788\n 57.029689457236223\n 45775.472870489066\n 5765161208.502471\n 40454.075713988961\n 155937.90557012981\n 107142.4794655569\n 397.27362539617428\n 1035.759907868925\n 21163.006218497198\n 3261.2878135208011\n 137135.32392798481\n 85.687976822122252\n 20491.055805684955\n 36722.506825930206\n 5235.1457073593783\n 2246.184031364679\n 1760319.7099616099\n 24121.546411397903\n 50421.353944825496\n 78654425.10641636\n 12374099.672625678\n 553.45808919809679\n 3337.8276395388712\n 211.35507889578903\n 6094.0481631260627\n 79.854510590280867\n 169651.00555776377\n 84768.58391366541\n 466788.39838329027\n 3492.0175456713328\n 342.86361412501088\n 94.120261753220547\n 312347.05297906819\n 234873.72925477143\n 632.03874824628303\n 12586807.777816441\n 1260.1869655026624\n 71430.748416697272\n 7790.8195617912043\n 1511.2179735041493\n 3068.5407533071707\n 41004.391564362522\n 3921.9616786722986\n 2807.2041324406\n 8453.2321042383555\n 255.80421812345966\n 11103.579476621726\n 7974.8283928473911\n 767.48102756170226\n 762.17445355583368\n 2683307.512603045\n 44.815266436484585\n 22654.528867702043\n 313307.73932023434\n 1288413.62899386\n 1814761.5886156221\n 149508.60716791937\n 13170.136848783561\n 3947209.6652993727\n 1872756.5771623398\n 123450028.23919988\n 167.78256746268471\n 6790.5254394595595\n 26319.347184329417\n 203.35626237343251\n 1070675.1676999847\n 26842.508092215994\n 487.88397974094642\n 427253.25886820635\n 15164.716756686859\n 34665.623593513716\n 19779.943045549855\n 439585.49029183516\n 357.38856141380995\n 509.48093388653808\n 214066.83872274976\n 182560.30146726704\n 3623.4849181600844\n 4418.0391344535919\n 8287.2559794504468\n 7670.7525276391507\n 171639.87006178047\n 3129.5821085550551\n 26774.314378564352\n 3410.1918638289258\n 5850.3847741031987\n 15024.866076493225\n 5513.5432552482971\n 7806.9070329777833\n 9704.5582514419621\n 1506.7809630546035\n 1747.3529457958018\n 3092.1389359872978\n 55384.222625231188\n 1557.3450118231351\n 11954.774968184045\n 1784.184411875794\n 119.16340803193557\n 370293.38166716998\n 286.25727922916548\n 84591.608286291405\n 1834.5984202797324\n 453076061.26598001\n 1103986.0831513791\n 23460.62957974197\n 58945.317575184527\n 155850.74169454814\n 4777.8322227528815\n 12484.276596035828\n 417.41035088591792\n 251755.0096007908\n 4336.5096382506918\n 21639.727855111578\n 5105.6117219251028\n 969834.89971521916\n 22286.373201078542\n 7875.8436097031408\n 23485.873266727474\n 5085.5664910787746\n 110112357.93094794\n 51662.993474174706\n 42671.081209928248\n 599066.05947672273\n 56422.914177022903\n 22242.716212404044\n 302377.19744697656\n 745.86039112784738\n 2885.2938938726197\n 6524.7753953384263\n 31708.976874788255\n 70974349.875422463\n 286429.71953564521\n 85084733.11315681\n 1630.2583556518689\n 16114.318303737267\n 9085.7448193886885\n 70039.167840955779\n 3606.0597570314876\n 54836.050306638994\n 10925.105191136734\n 252725.88919920978\n 2287.2552172903652\n 3741.3763801015361\n 700.28933893938256\n 248663.56579375482\n 6343.5027457132819\n 66716.924056977179\n 10205.562863296704\n 94921.96048882803\n 127146.07013012083\n 159052.20439351778\n 97978.298984692548\n 51385.182562962895\n 5236.1311336870376\n 13274.069066648373\n 312.73780476032442\n 1000.6744268561233\n 5765.1689113188031\n 202.69636396050197\n 3522.6908454590293\n 79825.239427592634\n 10954.106605213181\n 291.06329694588885\n 11263.696449293995\n 1602.4315861728564\n 158480.14049797232\n 1160.8937071381988\n 991.81731832691662\n 13783.678329864362\n 1578.8188797821254\n 246.1425853147675\n 78.289560881915094\n 669.10246956213155\n 79843970.741642877\n 138920.46091062552\n 1085256.6410571339\n 170467.09657745709\n 570.16538199873196\n 7710.5403816563958\n 8208.8043562872226\n 2699.4176656308914\n 2359.6579185256287\n 6324070.2516253665\n 771134.14125015284\n 37168.083265180561\n 13264.261443279847\n 1404.9461433971717\n 92.466834676622184\n 22642.399931277399\n 1236.451256800219\n 21090.185861895297\n 3193.8230205504588\n 409574.19670964876\n 231016.99831991483\n 515.42032565966599\n 99206.314127201098\n 105864.97335609228\n 1048.699901622216\n 6770.1259196410383\n 948250.23021649302\n 622.80528431215714\n 28748.395324992969\n 434073.6320069019\n 42391.68452098775\n 43244.27449747327\n 550.53878525709354\n 5721.0889910175083\n 2428.4123827708463\n 20842.562791162909\n 32386.542266603148\n 579798.11858847237\n 12295.363845220909\n 226399.4415989012\n 102283.71288813124\n 5644079.3152342206\n 1954.9878864747668\n 557.72565993006526\n 10275327.338085553\n 15848.309928275259\n 356523.1173939447\n 14654400.836177392\n 9965.9361140435522\n 818.049817468524\n 26391.262266672478\n 4830.458816019679\n 143033.9286787748\n 734305.01302424213\n 49762.27990279541\n 1872.8801862712151\n 11320.101954156547\n 61543.604662712605\n 7888.9799393871999\n 31307.587862807031\n 5992.4634944685995\n 93169254.677896708\n 52431.984537791024\n 252.14400417126163\n 77260.861242823637\n 29696.462314976259\n 323472.8015406949\n 8186.8379194266836\n 446488.76630350208\n 487.49425040903168\n 5538.6224795864691\n 5101.8622798399274\n 974.29889110402962\n 22235.827908746069\n 7131538.2232945114\n 22695.349108346629\n 16218.121826421442\n 17590.345528325768\n 1898206.3764970256\n 787.43306632695919\n 3721.1476022533939\n 33221.318354775765\n 751673.60926442116\n 6677.2979974155478\n 6427497.8651486943\n 12704.051143060407\n 5162.9657251440576\n 4632.980568454137\n 156.16559824455118\n 516495.78813510441\n 42009.694248222368\n 860.98424030134686\n 3392.934155917711\n 5182.3349506403993\n 170623.51780092262\n 306.77369084392899\n 1925.4034083657727\n 629.09808333522733\n 4459.3316205750434\n 399361.08432221593\n 703.51942960379392\n 3837.9406048547789\n 3257.3109590145145\n 5648003.1979847923\n 504850.68703429459\n 1974839.5896050439\n 25.21577867385804\n 103703.61659392566\n 1530260.6098018712\n 10627.182333970713\n 175.55388528074548\n 1699.8461718135597\n 28283.764566428956\n 2767.1584482227654\n 6837.6331346659827\n 2389367.9569912655\n 18285.381739215863\n 693807.22355208197\n 179704470.92841581\n 12776.739314634311\n 34250.372604286953\n 3247.6511214978686\n 2220.8110370049694\n 1812979.7005435152\n 197.72589568643983\n 20593.8285129367\n 66286996.819601372\n 21891464.544918563\n 979.04705728942702\n 1214.296103904295\n 5096373.9527144749\n 160.72984688017428\n 108634.39352144071\n 1679.0309731007378\n",
                    "result": 1,
                    "runtime": 0.3162610449944623,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_divided_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_divided_expr_end.F90/atomic_x_divided_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_divided_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166455490107182
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": " 2617.9938116663398\n 165337.17277252747\n 1335.0505698692396\n 890.12989781510657\n 1567.342985267414\n 1277.2002194076661\n 1729355.5166650824\n 8569.7158605928962\n 3602.4675633515426\n 30351137.567601915\n 6741.397180879525\n 95.981147053473833\n 660.42721143889423\n 294.33053213757887\n 32514.143932746134\n 99202.202491071061\n 62538859.333144389\n 105233.27329136351\n 142840.80571744553\n 3541.5473582779987\n 36707.163691406473\n 310.78047111155951\n 735.1806109477717\n 2448.5832724247607\n 2257.1117029340926\n 733.05221316678717\n 9550085.4631721321\n 79434.701153774833\n 1310.632211786047\n 440.92144655727907\n 5705.0168247456013\n 65992.512040740272\n 566048.52192825498\n 3565.0843481839925\n 3103.0792342526397\n 2783.6219854300803\n 78475335.797015592\n 74348.036201656461\n 1645076.8322576934\n 47279.542538734924\n 76995.085625878637\n 42634.469247693967\n 1049.0206072525095\n 10038.644397839447\n 5530385.6334116152\n 314608.1833106706\n 118392901.58818762\n 1638.3494361318583\n 8302.8285057219982\n 10192.423321138267\n 7569.1249953736524\n 3353327.5430429494\n 4155523.1188418497\n 785.46865834377377\n 30695.548822393561\n 594199.3942493737\n 1923.0285789669401\n 932.51676184586165\n 46175.108754303394\n 123584.79752866182\n 971.18602853881089\n 4144.785139345774\n 2805.366788085953\n 602.52245925392981\n 1826211.3972661407\n 14235.384565530099\n 15314.268081428387\n 233.9370055278622\n 47060.718212157975\n 582.93166897887329\n 32266.235808237889\n 18942.595278805496\n 2462.1310588906267\n 900705.19885265664\n 308741.1448523869\n 20364645.867401719\n 94025.909091344176\n 31350.255465035072\n 30086.186199335698\n 2094.1039299346153\n 6536.5080817610124\n 500734.83039016364\n 20063.598185221312\n 64713.534425082515\n 36704.757343840167\n 12171.830788763797\n 741184.6793477796\n 3218596.2481702268\n 142981.50523075042\n 9273.5499534228784\n 709590.96785270097\n 5938.0561228560537\n 60683.449595518694\n 25531.258929641383\n 2543.9533706725606\n 157.40180867679669\n 8372.9868561354779\n 49.652639318711273\n 433456.06624914787\n 546341.32814763044\n 1603.2547967046005\n 6104.4891593607717\n 2930.4862627190546\n 11664.766725373202\n 4148.6077645110818\n 2458.2708274428278\n 120580.18055619429\n 17824.270494852859\n 213.14644349787858\n 468.42801938824402\n 21575.079885371735\n 4708.4053696645151\n 810.86676875743524\n 83.244372398558156\n 6126.760496296446\n 71648.42478799494\n 689.23523965953382\n 1706.0828555504872\n 5103.5377170738884\n 41771.582882321949\n 15094.537732303175\n 19295.120432639484\n 108233.62425018483\n 53663.323051562424\n 198841.73110275972\n 3399.0470811787136\n 47581.379791794112\n 10159866.07971888\n 8996269.5409535635\n 279.05479779989287\n 73579.13327867302\n 642.07958732429131\n 11100.406459700351\n 12979.707199142847\n 566.55377551812467\n 35580.568786650401\n 5209.2521121466007\n 47889.624790165341\n 73179.656312581719\n 149934.44819732194\n 3992.5522911150665\n 418.0391516176955\n 1977.3633996688011\n 2493.7541196100419\n 741.97437319516655\n 79919.641275321905\n 126.23353761494113\n 26117.094412415456\n 2470.0857601691596\n 2387713835.0010114\n 2765.5840477285474\n 10589.234371181774\n 116086.26344662266\n 8539.9871466722198\n 34378.326766706436\n 29723.044882957547\n 1825.9765594887419\n 36687.492631491841\n 9967.945891880252\n 5532.9725031777389\n 16046.06194967997\n 62097.278336548108\n 171205.71041517635\n 31786.41302865525\n 4884.9843342815193\n 903.25410351273149\n 2509.90693909838\n 86.456194049018961\n 13005.273589432703\n 51490.72194591006\n 101976.68305773915\n 887.15100330824237\n 13420.085814122092\n 997.76874522850892\n 178503.7724859663\n 293223.28708105133\n 5374.9584700094756\n 1149.120204479\n 5395.409945163653\n 58200.122324386459\n 576505.35348011123\n 464.41962795109919\n 1650.9239687563111\n 124669113.39070979\n 1478837.8010065979\n 42025.031289062259\n 22590.130277242439\n 84.739118442199157\n 1563.3533793211984\n 42088.67011537886\n 3735.5644371151598\n 367.07629493983853\n 675895.10280589107\n 2702773.9749647612\n 173.69140883228798\n 352051.65228951426\n 9297.7220280222227\n 109022.01181986398\n 7700.0105472695841\n 619.67765417357691\n 461348.03470604122\n 274.44915928128722\n 3521.2874093548098\n 123901.43952208993\n 2190.4821046466004\n 1408627.6360970838\n 9593.2090210165152\n 747.99407593049511\n 2871.4277697031662\n 21908438.8102086\n 619.13812795334331\n 19317282.991028458\n 12329.090308101922\n 23973.520527966251\n 1783.3044785444827\n 1920173.251802393\n 242.81220317522565\n 9334.6580808036942\n 8335.8930225971781\n 192.26705963195224\n 155518.50090364076\n 3946.2737841984199\n 52231.472946070586\n 100738.07052699626\n 15.597794276730101\n 1838.5479602088901\n 2182633.1089006644\n 1500.8868091137115\n 6512.5706322524165\n 17263.362775468442\n 18823.752791045332\n 2489.8901912712181\n 1470.8435197041958\n 204.51271616760451\n 40057.442630028476\n 297003.45576044515\n 243.88637647482838\n 50589.777871786922\n 879.36531601780678\n 105.3064795023292\n 23744359.486094762\n 2921715.0259286924\n 10049.921452727409\n 12334.059211140811\n 1680.5814667009654\n 12462.168848388394\n 1940.702862389744\n 2687574.0634519039\n 283.02253359956035\n 171838.97786651866\n 3393.2740835730096\n 22169.805101431346\n 14561.783475550164\n 192095.62041044666\n 1236.6135984273521\n 460.6789822122239\n 11272.741972203416\n 247.08194488010977\n 1255359.492975323\n 98285.577449023884\n 207785.6778349753\n 596.42568081501588\n 1155.8361615080798\n 124.63135828260711\n 9534.7781178494824\n 759.87276576929901\n 2456.048487998944\n 7536.852241392603\n 6799821.7733616587\n 218926.58925003817\n 1100.0393501756273\n 10750.161232251819\n 5016.5811358117026\n 173984.55801815997\n 11004.414782115757\n 2732.6769311123753\n 369710.48546426796\n 432067.69766768703\n 149234.85391042451\n 217967.35242436774\n 27905.098918942993\n 35006.877924818386\n 12827.928351620612\n 369878275.82953751\n 4022.4008258826962\n 2957.2350226217536\n 13811.397934843246\n 5970.7371938683273\n 43495.662293594767\n 28704.825744908932\n 2825.5413159664245\n 1545.302983058376\n 1614590.3842796735\n 315.11472665925487\n 54333.138423170742\n 670.63632034701936\n 360896.2584730488\n 2382.3505382857452\n 24041.120581776871\n 46.007532483242379\n 44892.465142789508\n 396869.68883502827\n 978293.48492491269\n 289566.44004520972\n 39098.72469011823\n 64698.279397467006\n 220364.23174929642\n 174632.57674483582\n 128280.06832772505\n 8002.3249687348807\n 6863.1927265289605\n 5634.8326384041511\n 7465.5382409855811\n 2384.2150151261685\n 33660.786630457944\n 26152.288685424352\n 1970.2112884024045\n 1434923.69687386\n 1306027.7110657408\n 9183.0451297872805\n 6313601.6800858742\n 267792.34856180305\n 4941.9842303462619\n 2896.2219380965557\n 203773.78299709919\n 5672.7203212173445\n 77939.647537037134\n 3406.3730649264271\n 12064.71082898044\n 640910.53966564988\n 485.7287986442102\n 1992849.90894137\n 114856.77559501334\n 236413.7924875193\n 206706.63832452963\n 920.24321065910237\n 46542.998107712352\n 392.6219466692221\n 12993.433173880429\n 13592.604018900938\n 13568.707744194908\n 49857.128089271057\n 34625.998491398663\n 3387.9847156667815\n 164072.93954103073\n 881.4611337748529\n 1711707.6393791356\n 587.67270204777992\n 1093138.2086699393\n 30500.852896574885\n 750.19083849330798\n 1074615.6140973081\n 148541.92859101327\n 32561.199043240395\n 3310.4590744650018\n 1961.6587107388439\n 137037.8356431484\n 8304.3687624396862\n 7502.491365761457\n 116866.20504420012\n 56862.978803702019\n 4478732.9353104355\n 34934.170662190132\n 216800.88230193412\n 58589.078390552044\n 362.43108288142344\n 3190.7449077173014\n 4880.3993747892227\n 176826.51493147828\n 2796.1526630734324\n 58950.754735813818\n 6697.4669329889248\n 12647.918398094862\n 17467.977974971029\n 1324.3687683241401\n 9626.5082442921266\n 6575.2991040642682\n 3839.6692128467257\n 65113.832688096591\n 574.43765238101287\n 665.27982527512791\n 368.5565140612751\n 1098.131625451276\n 9011.7002846738815\n 676028.60251701379\n 36953.147560447644\n 158287.04613293815\n 1188.2964627293527\n 250.84018931166125\n 129.31798582961397\n 22232.096490799137\n 779.61238540276588\n 3000103.2340147318\n 18903.239424795571\n 291553.53285523364\n 807.85381764876968\n 266.41839200160081\n 477.91124194633159\n 10714.427893634575\n 13079.054069713437\n 1846.6530157934026\n 2240796.1046524546\n 50.886321091429693\n 1342902.5860679117\n 65145.395571507761\n 108293.60562649825\n 747701.03545123769\n 6490.1744969410438\n 9341.3221495751914\n 60879.880537493431\n 1925.7571206826024\n 2495.6170715534076\n 1793.8339954286855\n 103803.70717519862\n 1190.1800525702636\n 585.33244907891788\n 57.029689457236223\n 45775.472870489066\n 5765161208.502471\n 40454.075713988961\n 155937.90557012981\n 107142.4794655569\n 397.27362539617428\n 1035.759907868925\n 21163.006218497198\n 3261.2878135208011\n 137135.32392798481\n 85.687976822122252\n 20491.055805684955\n 36722.506825930206\n 5235.1457073593783\n 2246.184031364679\n 1760319.7099616099\n 24121.546411397903\n 50421.353944825496\n 78654425.10641636\n 12374099.672625678\n 553.45808919809679\n 3337.8276395388712\n 211.35507889578903\n 6094.0481631260627\n 79.854510590280867\n 169651.00555776377\n 84768.58391366541\n 466788.39838329027\n 3492.0175456713328\n 342.86361412501088\n 94.120261753220547\n 312347.05297906819\n 234873.72925477143\n 632.03874824628303\n 12586807.777816441\n 1260.1869655026624\n 71430.748416697272\n 7790.8195617912043\n 1511.2179735041493\n 3068.5407533071707\n 41004.391564362522\n 3921.9616786722986\n 2807.2041324406\n 8453.2321042383555\n 255.80421812345966\n 11103.579476621726\n 7974.8283928473911\n 767.48102756170226\n 762.17445355583368\n 2683307.512603045\n 44.815266436484585\n 22654.528867702043\n 313307.73932023434\n 1288413.62899386\n 1814761.5886156221\n 149508.60716791937\n 13170.136848783561\n 3947209.6652993727\n 1872756.5771623398\n 123450028.23919988\n 167.78256746268471\n 6790.5254394595595\n 26319.347184329417\n 203.35626237343251\n 1070675.1676999847\n 26842.508092215994\n 487.88397974094642\n 427253.25886820635\n 15164.716756686859\n 34665.623593513716\n 19779.943045549855\n 439585.49029183516\n 357.38856141380995\n 509.48093388653808\n 214066.83872274976\n 182560.30146726704\n 3623.4849181600844\n 4418.0391344535919\n 8287.2559794504468\n 7670.7525276391507\n 171639.87006178047\n 3129.5821085550551\n 26774.314378564352\n 3410.1918638289258\n 5850.3847741031987\n 15024.866076493225\n 5513.5432552482971\n 7806.9070329777833\n 9704.5582514419621\n 1506.7809630546035\n 1747.3529457958018\n 3092.1389359872978\n 55384.222625231188\n 1557.3450118231351\n 11954.774968184045\n 1784.184411875794\n 119.16340803193557\n 370293.38166716998\n 286.25727922916548\n 84591.608286291405\n 1834.5984202797324\n 453076061.26598001\n 1103986.0831513791\n 23460.62957974197\n 58945.317575184527\n 155850.74169454814\n 4777.8322227528815\n 12484.276596035828\n 417.41035088591792\n 251755.0096007908\n 4336.5096382506918\n 21639.727855111578\n 5105.6117219251028\n 969834.89971521916\n 22286.373201078542\n 7875.8436097031408\n 23485.873266727474\n 5085.5664910787746\n 110112357.93094794\n 51662.993474174706\n 42671.081209928248\n 599066.05947672273\n 56422.914177022903\n 22242.716212404044\n 302377.19744697656\n 745.86039112784738\n 2885.2938938726197\n 6524.7753953384263\n 31708.976874788255\n 70974349.875422463\n 286429.71953564521\n 85084733.11315681\n 1630.2583556518689\n 16114.318303737267\n 9085.7448193886885\n 70039.167840955779\n 3606.0597570314876\n 54836.050306638994\n 10925.105191136734\n 252725.88919920978\n 2287.2552172903652\n 3741.3763801015361\n 700.28933893938256\n 248663.56579375482\n 6343.5027457132819\n 66716.924056977179\n 10205.562863296704\n 94921.96048882803\n 127146.07013012083\n 159052.20439351778\n 97978.298984692548\n 51385.182562962895\n 5236.1311336870376\n 13274.069066648373\n 312.73780476032442\n 1000.6744268561233\n 5765.1689113188031\n 202.69636396050197\n 3522.6908454590293\n 79825.239427592634\n 10954.106605213181\n 291.06329694588885\n 11263.696449293995\n 1602.4315861728564\n 158480.14049797232\n 1160.8937071381988\n 991.81731832691662\n 13783.678329864362\n 1578.8188797821254\n 246.1425853147675\n 78.289560881915094\n 669.10246956213155\n 79843970.741642877\n 138920.46091062552\n 1085256.6410571339\n 170467.09657745709\n 570.16538199873196\n 7710.5403816563958\n 8208.8043562872226\n 2699.4176656308914\n 2359.6579185256287\n 6324070.2516253665\n 771134.14125015284\n 37168.083265180561\n 13264.261443279847\n 1404.9461433971717\n 92.466834676622184\n 22642.399931277399\n 1236.451256800219\n 21090.185861895297\n 3193.8230205504588\n 409574.19670964876\n 231016.99831991483\n 515.42032565966599\n 99206.314127201098\n 105864.97335609228\n 1048.699901622216\n 6770.1259196410383\n 948250.23021649302\n 622.80528431215714\n 28748.395324992969\n 434073.6320069019\n 42391.68452098775\n 43244.27449747327\n 550.53878525709354\n 5721.0889910175083\n 2428.4123827708463\n 20842.562791162909\n 32386.542266603148\n 579798.11858847237\n 12295.363845220909\n 226399.4415989012\n 102283.71288813124\n 5644079.3152342206\n 1954.9878864747668\n 557.72565993006526\n 10275327.338085553\n 15848.309928275259\n 356523.1173939447\n 14654400.836177392\n 9965.9361140435522\n 818.049817468524\n 26391.262266672478\n 4830.458816019679\n 143033.9286787748\n 734305.01302424213\n 49762.27990279541\n 1872.8801862712151\n 11320.101954156547\n 61543.604662712605\n 7888.9799393871999\n 31307.587862807031\n 5992.4634944685995\n 93169254.677896708\n 52431.984537791024\n 252.14400417126163\n 77260.861242823637\n 29696.462314976259\n 323472.8015406949\n 8186.8379194266836\n 446488.76630350208\n 487.49425040903168\n 5538.6224795864691\n 5101.8622798399274\n 974.29889110402962\n 22235.827908746069\n 7131538.2232945114\n 22695.349108346629\n 16218.121826421442\n 17590.345528325768\n 1898206.3764970256\n 787.43306632695919\n 3721.1476022533939\n 33221.318354775765\n 751673.60926442116\n 6677.2979974155478\n 6427497.8651486943\n 12704.051143060407\n 5162.9657251440576\n 4632.980568454137\n 156.16559824455118\n 516495.78813510441\n 42009.694248222368\n 860.98424030134686\n 3392.934155917711\n 5182.3349506403993\n 170623.51780092262\n 306.77369084392899\n 1925.4034083657727\n 629.09808333522733\n 4459.3316205750434\n 399361.08432221593\n 703.51942960379392\n 3837.9406048547789\n 3257.3109590145145\n 5648003.1979847923\n 504850.68703429459\n 1974839.5896050439\n 25.21577867385804\n 103703.61659392566\n 1530260.6098018712\n 10627.182333970713\n 175.55388528074548\n 1699.8461718135597\n 28283.764566428956\n 2767.1584482227654\n 6837.6331346659827\n 2389367.9569912655\n 18285.381739215863\n 693807.22355208197\n 179704470.92841581\n 12776.739314634311\n 34250.372604286953\n 3247.6511214978686\n 2220.8110370049694\n 1812979.7005435152\n 197.72589568643983\n 20593.8285129367\n 66286996.819601372\n 21891464.544918563\n 979.04705728942702\n 1214.296103904295\n 5096373.9527144749\n 160.72984688017428\n 108634.39352144071\n 1679.0309731007378\n",
                    "result": 1,
                    "runtime": 0.3165780779963825,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_eqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_eqv_expr.F90/atomic_x_eqv_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41674357998999767
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3173668990202714,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_eqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_eqv_expr_end.F90/atomic_x_eqv_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_eqv_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41682751599000767
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31633962198975496,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_minus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_minus_expr.F90/atomic_x_minus_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4166000519762747
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316604716994334,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_minus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_minus_expr_end.F90/atomic_x_minus_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_minus_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4166420499968808
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3173075589875225,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_neqv_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_neqv_expr.F90/atomic_x_neqv_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41589861299144104
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31664427000214346,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_neqv_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_neqv_expr_end.F90/atomic_x_neqv_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_neqv_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41643211798509583
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31691179002518766,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_or_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_or_expr.F90/atomic_x_or_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 33 \n  A data region was created at line 33 and ending at line 43.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 34 \n  A region starting at line 34 and ending at line 42 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 45 \n  A loop starting at line 45 was interchanged with the loop starting at line 46.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr.F90, Line = 77 \n  A loop starting at line 77 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 104 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41613887099083513
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36660156401921995,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_or_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_or_expr_end.F90/atomic_x_or_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 19 \n   A loop nest at line 19 collapsed to a single loop.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 20 \n  A loop starting at line 20 was interchanged with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 30 \n  A loop starting at line 30 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 31 \n  A loop starting at line 31 was fused with the loop starting at line 30.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 33 \n  A data region was created at line 33 and ending at line 44.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 33 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 34 \n  A region starting at line 34 and ending at line 43 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 34 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 37 \n  A loop starting at line 37 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 46 \n  A loop starting at line 46 was interchanged with the loop starting at line 47.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 46 \n  A loop starting at line 46 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_or_expr_end.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41623350797453895
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31658076198073104,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_plus_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_plus_expr.F90/atomic_x_plus_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41707681099069305
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31677904198295437,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_plus_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_plus_expr_end.F90/atomic_x_plus_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_plus_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162066070130095
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31734378600958735,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_times_expr.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_times_expr.F90/atomic_x_times_expr.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 34 \n  A loop starting at line 34 was interchanged with the loop starting at line 35.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr.F90, Line = 66 \n  A loop starting at line 66 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0035 seconds\nCray Fortran : 93 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165920060186181
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31629525902098976,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "atomic_x_times_expr_end.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/atomic_x_times_expr_end.F90/atomic_x_times_expr_end.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90",
                    "config": 1,
                    "errors": "\n\nftn-6066 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 18 \n   A loop nest at line 18 collapsed to a single loop.\n\n\nftn-6230 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 20 \n  A loop starting at line 20 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 27 \n  A loop starting at line 27 will be serially executed.\n\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 35 \n  A loop starting at line 35 was interchanged with the loop starting at line 36.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/atomic_x_times_expr_end.F90, Line = 67 \n  A loop starting at line 67 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 94 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4166351270105224
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164153929974418,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copy_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copy_no_lower_bound.F90/data_copy_no_lower_bound.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 21 \n  A data region was created at line 21 and ending at line 28.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 28 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 22 \n  A region starting at line 22 and ending at line 27 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 29 \n  A loop starting at line 29 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 29 \n  A loop starting at line 29 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copy_no_lower_bound.F90, Line = 54 \n  A loop starting at line 54 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5168303339742124
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31688399898121133,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyin_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyin_no_lower_bound.F90/data_copyin_no_lower_bound.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 21 \n  A data region was created at line 21 and ending at line 28.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 28 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 22 \n  A region starting at line 22 and ending at line 27 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 30 \n  A loop starting at line 30 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyin_no_lower_bound.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41624754399526864
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3175606409786269,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyout_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyout_no_lower_bound.F90/data_copyout_no_lower_bound.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 21 \n  A data region was created at line 21 and ending at line 28.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 28 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 22 \n  A region starting at line 22 and ending at line 27 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 29 \n  A loop starting at line 29 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 29 \n  A loop starting at line 29 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_no_lower_bound.F90, Line = 54 \n  A loop starting at line 54 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4167030730168335
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3166307359933853,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_copyout_reference_counts.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/data_copyout_reference_counts.F90/data_copyout_reference_counts.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 27 \n  A loop starting at line 27 was fused with the loop starting at line 25.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 27 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 28 \n  A data region was created at line 28 and ending at line 37.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  A data region was created at line 29 and ending at line 36.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 36 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 66 \n  A region starting at line 66 and ending at line 68 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 79 \n  A loop starting at line 79 was fused with the loop starting at line 77.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 79 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  A data region was created at line 82 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 89 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 125 \n  A region starting at line 125 and ending at line 127 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 138 \n  A loop starting at line 138 was fused with the loop starting at line 136.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 138 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  A data region was created at line 141 and ending at line 149.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 141 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 149 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  A region starting at line 142 and ending at line 147 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 147 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 147 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 142 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 147 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 144 \n  A loop starting at line 144 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 183 \n  A loop starting at line 183 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 192 \n  A loop starting at line 192 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_copyout_reference_counts.F90, Line = 201 \n  A loop starting at line 201 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0069 seconds\nCray Fortran : 246 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.6169571939972229
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31677525502163917,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create.F90/data_create.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 21 \n  A data region was created at line 21 and ending at line 38.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 38 (acc_share).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 22 \n  A data region was created at line 22 and ending at line 29.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 23 \n  A region starting at line 23 and ending at line 28 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 28 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 30 \n  A data region was created at line 30 and ending at line 37.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 30 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 37 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 31 \n  A region starting at line 31 and ending at line 36 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 71 \n  A loop starting at line 71 was fused with the loop starting at line 70.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 71 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 72 \n  A loop starting at line 72 was fused with the loop starting at line 70.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 72 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 74 \n  A data region was created at line 74 and ending at line 91.\n\n\nftn-6422 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 74 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 91 (acc_share).\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 75 \n  A data region was created at line 75 and ending at line 82.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 76 \n  A region starting at line 76 and ending at line 81 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 81 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 81 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 78 \n  A loop starting at line 78 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 83 \n  A data region was created at line 83 and ending at line 90.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 83 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 90 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 84 \n  A region starting at line 84 and ending at line 89 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 86 \n  A loop starting at line 86 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 124 \n  A loop starting at line 124 was fused with the loop starting at line 123.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 124 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 125 \n  A loop starting at line 125 was fused with the loop starting at line 123.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 125 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 127 \n  A data region was created at line 127 and ending at line 144.\n\n\nftn-6422 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 127 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 144 (acc_share).\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 128 \n  A data region was created at line 128 and ending at line 135.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 128 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 135 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 129 \n  A region starting at line 129 and ending at line 134 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 129 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 134 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 129 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 134 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 131 \n  A loop starting at line 131 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 136 \n  A data region was created at line 136 and ending at line 143.\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 136 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 143 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 137 \n  A region starting at line 137 and ending at line 142 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 137 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 142 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 137 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 142 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 139 \n  A loop starting at line 139 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 178 \n  A loop starting at line 178 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 187 \n  A loop starting at line 187 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create.F90, Line = 196 \n  A loop starting at line 196 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 241 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5666542570106685
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3168765350128524,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_create_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/data_create_no_lower_bound.F90/data_create_no_lower_bound.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 23 \n  A data region was created at line 23 and ending at line 34.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, free at line 34 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory for user shaped variable \"e\" on accelerator, copy back at line 34 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 24 \n  A region starting at line 24 and ending at line 33 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"e\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_create_no_lower_bound.F90, Line = 60 \n  A loop starting at line 60 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 87 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4171522420074325
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3171103509957902,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_present_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/data_present_no_lower_bound.F90/data_present_no_lower_bound.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 22 \n  A data region was created at line 22 and ending at line 29.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 23 \n  A region starting at line 23 and ending at line 28 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 28 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 31 \n  A loop starting at line 31 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 31 \n  A loop starting at line 31 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_present_no_lower_bound.F90, Line = 56 \n  A loop starting at line 56 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41624944799696095
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3668613479821943,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_with_changing_subscript.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/data_with_changing_subscript.F90/data_with_changing_subscript.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 22 \n  A data region was created at line 22 and ending at line 30.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 30 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 30 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 23 \n  A region starting at line 23 and ending at line 29 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 31 \n  A loop starting at line 31 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 31 \n  A loop starting at line 31 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_changing_subscript.F90, Line = 56 \n  A loop starting at line 56 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4172136370034423
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31662610700004734,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "data_with_derived_type.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/data_with_derived_type.F90/data_with_derived_type.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_derived_type.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 28 \n  A data region was created at line 28 and ending at line 35.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 29 \n  A region starting at line 29 and ending at line 34 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 36 \n  A loop starting at line 36 was partially vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/data_with_derived_type.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41653059198870324
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3168271020113025,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0032 seconds\nCray Fortran : 246 source lines\nCray Fortran : 1 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11540965098538436
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 15, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 32, Column = 69 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"FIXED_SIZE_ARRAY\".\n\n\nftn-511 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 36, Column = 23 \n  \"FIXED_SIZE_ARRAY\" is scalar, but it is being used as an array or function reference.\n\n\nftn-511 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 42, Column = 28 \n  \"FIXED_SIZE_ARRAY\" is scalar, but it is being used as an array or function reference.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0280 seconds\nCray Fortran : 255 source lines\nCray Fortran : 5 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11543241399340332
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F902 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 58, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 74, Column = 69 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SCALAR\".\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 77, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 78, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 78, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 84, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 84, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0074 seconds\nCray Fortran : 255 source lines\nCray Fortran : 8 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11575956500018947
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F903 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 100, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 119, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 126, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 126, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0074 seconds\nCray Fortran : 255 source lines\nCray Fortran : 5 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11579181501292624
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F904 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-292 ftn: ERROR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 142, Column = 7 \n  \"DECLARE_COPYIN_MOD\" is specified as the module name on a USE statement, but the compiler cannot find it.\n\n\nftn-113 ftn: ERROR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 161, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 162, Column = 9 \n  Program unit \"MULTIPLYDATA\" is defined as a FUNCTION at line 2 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 168, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 168, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0073 seconds\nCray Fortran : 255 source lines\nCray Fortran : 6 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11602030097856186
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin.F90/declare_copyin.F905 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 1, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 2, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin.F90, Line = 3, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0029 seconds\nCray Fortran : 246 source lines\nCray Fortran : 1 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11576598597457632
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_copyin_mod.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_copyin_mod.F90/declare_copyin_mod.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_copyin_mod.F90",
                    "config": 1,
                    "errors": "/opt/cray/pe/cce/15.0.1/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /usr/lib64//crt1.o: in function `_start':\n/home/abuild/rpmbuild/BUILD/glibc-2.31/csu/../sysdeps/x86_64/start.S:104: undefined reference to `main'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 1.2678687360021286
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.F90/declare_create.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0033 seconds\nCray Fortran : 251 source lines\nCray Fortran : 4 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1154577910201624
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.F90/declare_create.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 33, Column = 69 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"FIXED_SIZE_ARRAY\".\n\n\nftn-113 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 36, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-724 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 37, Column = 25 \n  Unknown statement.  Expected assignment statement but found \"(\" instead of \"=\" or \"=>\".\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 43, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 43, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-557 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 43, Column = 23 \n  \"FIXED_SIZE_ARRAY\" has been used as a variable, therefore it must not be declared or used as a procedure.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 49, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 49, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 260 source lines\nCray Fortran : 12 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11592423100955784
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.F90/declare_create.F902 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 79, Column = 3 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"SCALAR\".\n\n\nftn-113 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 84, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 85, Column = 11 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 85, Column = 18 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 91, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 91, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 260 source lines\nCray Fortran : 10 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1156543779943604
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.F90/declare_create.F903 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-1725 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 121, Column = 15 \n  Unexpected syntax while parsing the DIRECTIVE statement : \"HOST, DEVICE, IF and/or ASYNC\" was expected but found \"EOS\".\n\n\nftn-113 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 125, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 132, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 132, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0066 seconds\nCray Fortran : 260 source lines\nCray Fortran : 8 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11606316000688821
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.F90/declare_create.F904 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\n\nftn-113 ftn: ERROR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 166, Column = 10 \n  IMPLICIT NONE is specified in the local scope, therefore an explicit type must be specified for data object \"X\".\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 167, Column = 9 \n  Program unit \"MULTIPLYDATA\" is defined as a FUNCTION at line 6 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 173, Column = 15 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 173, Column = 23 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 260 source lines\nCray Fortran : 8 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11593661399092525
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_create.F90/declare_create.F905 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 1, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 2, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 3, Column = 7 \n  Compiler directive ACC DECLARE is only allowed within a program unit.\n\n\nftn-795 ftn: WARNING $MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 5, Column = 7 \n  Compiler directive ACC ROUTINE is only allowed within a program unit.\n\n\nftn-287 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 6, Column = 10 \n  The result of function name \"MULTIPLYDATA\" in the function subprogram is not defined.\n\n\nftn-521 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 7, Column = 21 \n  Object \"LOOPCOUNT\", used in a bounds expression must be a constant, a dummy argument, a common block member or use or host associated.\n\n\nftn-1514 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  When the DO loop is in an OpenMP work-sharing construct, the iteration variable must be integer.\n\n\nftn-1569 ftn: WARNING MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 9, Column = 6 \n  A DO loop variable or expression of type default real or double precision real is a deleted feature of the Fortran standard.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 7 \n  A subscript must be a scalar integer expression.\n\n\nftn-319 ftn: ERROR MULTIPLYDATA, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_create.F90, Line = 10, Column = 14 \n  A subscript must be a scalar integer expression.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0024 seconds\nCray Fortran : 251 source lines\nCray Fortran : 4 errors, 6 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11598738000611775
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0029 seconds\nCray Fortran : 289 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11573988798772916
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 44, Column = 7 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0061 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11613263099570759
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F902 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 93, Column = 9 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11571632299455814
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F903 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 145, Column = 11 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11601298698224127
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F904 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 200, Column = 11 \n  Program unit \"COPYIN_COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0064 seconds\nCray Fortran : 298 source lines\nCray Fortran : 2 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11583213999983855
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT4 -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copy.F90/declare_function_scope_copy.F905 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYIN_COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 1, Column = 10 \n  The result of function name \"COPYIN_COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYIN_COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copy.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0026 seconds\nCray Fortran : 289 source lines\nCray Fortran : 1 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11598428399884142
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0103 seconds\nCray Fortran : 288 source lines\nCray Fortran : 5 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11595790399587713
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0088 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11569573500310071
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F902 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0093 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11561909099691547
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F903 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0098 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11555406000115909
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F904 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0089 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1157332650036551
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F905 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0084 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.115582845028257
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F906 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 63, Column = 7 \n  Program unit \"FUNCTION_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0084 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11567241000011563
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyin.F90/declare_function_scope_copyin.F907 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 1, Column = 10 \n  The result of function name \"FUNCTION_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-287 ftn: WARNING FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 16, Column = 10 \n  The result of function name \"FUNCTION_TEST_DEV_ONLY\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR FUNCTION_TEST_DEV_ONLY, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 22, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 116, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90, Line = 178, Column = 9 \n  Program unit \"FUNCTION_TEST_DEV_ONLY\" is defined as a FUNCTION at line 16 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyin.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0084 seconds\nCray Fortran : 279 source lines\nCray Fortran : 4 errors, 2 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11601259600138292
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0100 seconds\nCray Fortran : 247 source lines\nCray Fortran : 4 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11622073399485089
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0081 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11555133500951342
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F902 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0077 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11628273100359365
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F903 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0089 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11599496399867348
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F904 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0085 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11583729900303297
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F905 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0086 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11585250700591132
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F906 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 46, Column = 7 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0086 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11571256601018831
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_copyout.F90/declare_function_scope_copyout.F907 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-287 ftn: WARNING COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 1, Column = 10 \n  The result of function name \"COPYOUT_TEST\" in the function subprogram is not defined.\n\n\nftn-1725 ftn: ERROR COPYOUT_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-1293 ftn: ERROR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 96, Column = 9 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\n\nftn-1293 ftn: ERROR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90, Line = 148, Column = 11 \n  Program unit \"COPYOUT_TEST\" is defined as a FUNCTION at line 1 (/global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_copyout.F90), but is defined or referenced as a SUBROUTINE here.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0083 seconds\nCray Fortran : 238 source lines\nCray Fortran : 3 errors, 1 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11582002599607222
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0117 seconds\nCray Fortran : 276 source lines\nCray Fortran : 4 errors, 12 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11557065098895691
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0095 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11562320898519829
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F902 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0093 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11555971100460738
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F903 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0100 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11561259001609869
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F904 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0095 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11569728801259771
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F905 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0107 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1156151549948845
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F906 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 70, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0090 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11577201698673889
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_create.F90/declare_function_scope_create.F907 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 7, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_TEST, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_TEST\".\n\n\nftn-1725 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 26, Column = 25 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR CREATE_AS_PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 37, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"CREATE_AS_PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 120, Column = 48 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 46 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_create.F90, Line = 174, Column = 52 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0107 seconds\nCray Fortran : 267 source lines\nCray Fortran : 4 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.116349796007853
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "declare_function_scope_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 22 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 28 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0090 seconds\nCray Fortran : 188 source lines\nCray Fortran : 2 errors, 8 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.1159183899872005
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0076 seconds\nCray Fortran : 179 source lines\nCray Fortran : 2 errors, 4 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.16586579399881884
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F902 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 22 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 28 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 34 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 52, Column = 40 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0069 seconds\nCray Fortran : 179 source lines\nCray Fortran : 2 errors, 4 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11608706502011046
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/declare_function_scope_present.F90/declare_function_scope_present.F903 /global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 7, Column = 26 \n  Unexpected syntax while parsing the DIRECTIVE statement : \")\" was expected but found \"(\".\n\n\nftn-283 ftn: ERROR PRESENT, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 18, Column = 14 \n  The name specified on the END FUNCTION statement must match the FUNCTION name \"PRESENT\".\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 24 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 30 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 36 \n  The number of subscripts is smaller than the number of declared dimensions.\n\n\nftn-375 ftn: WARNING TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/declare_function_scope_present.F90, Line = 107, Column = 42 \n  The number of subscripts is smaller than the number of declared dimensions.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0063 seconds\nCray Fortran : 179 source lines\nCray Fortran : 2 errors, 4 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.14146011701086536
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_copyin_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_copyin_no_lower_bound.F90/enter_data_copyin_no_lower_bound.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 22 \n  A data region was created at line 22 and ending at line 29.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 29 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 23 \n  A region starting at line 23 and ending at line 28 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 28 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 32 \n  A loop starting at line 32 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_copyin_no_lower_bound.F90, Line = 57 \n  A loop starting at line 57 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 84 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4167464350175578
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4169756530027371,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_create.F90/enter_data_create.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 22 \n  A data region was created at line 22 and ending at line 29.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 23 \n  A region starting at line 23 and ending at line 28 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 30 \n  A data region was created at line 30 and ending at line 37.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 30 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 37 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 31 \n  A region starting at line 31 and ending at line 36 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 71 \n  A loop starting at line 71 was fused with the loop starting at line 70.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 71 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 72 \n  A loop starting at line 72 was fused with the loop starting at line 70.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 72 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 74 \n  A data region was created at line 74 and ending at line 81.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 74 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 81 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 75 \n  A region starting at line 75 and ending at line 80 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 75 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 80 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 77 \n  A loop starting at line 77 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 82 \n  A data region was created at line 82 and ending at line 89.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 82 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 89 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 123 \n  A loop starting at line 123 was fused with the loop starting at line 122.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 123 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 124 \n  A loop starting at line 124 was fused with the loop starting at line 122.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 124 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 127 \n  A data region was created at line 127 and ending at line 134.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 127 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 134 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 128 \n  A region starting at line 128 and ending at line 133 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 128 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 133 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 130 \n  A loop starting at line 130 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 135 \n  A data region was created at line 135 and ending at line 142.\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 135 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 142 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 136 \n  A region starting at line 136 and ending at line 141 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 136 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 141 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 138 \n  A loop starting at line 138 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 177 \n  A loop starting at line 177 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 186 \n  A loop starting at line 186 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create.F90, Line = 195 \n  A loop starting at line 195 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 240 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5667175149719696
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3671434650023002,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_create_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_create_no_lower_bound.F90/enter_data_create_no_lower_bound.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 24 \n  A data region was created at line 24 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 24 \n  If not already present: allocate memory for user shaped variable \"e\" on accelerator, copy back at line 35 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 25 \n  A region starting at line 25 and ending at line 34 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"e\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_create_no_lower_bound.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41627913297270425
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165137480245903,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "enter_data_if.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31668619901756756
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009283184015657753,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 15 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 17 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 28 \n  A loop starting at line 28 was fused with the loop starting at line 26.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 28 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  A data region was created at line 31 and ending at line 38.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 38 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  If not already present: allocate memory for user shaped variable \"a\" on accelerator, free at line 38 (acc_share).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 38 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  A region starting at line 32 and ending at line 37 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 37 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 34 \n  A loop starting at line 34 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 40 \n  A loop starting at line 40 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 40 \n  A loop starting at line 40 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 305 \n  A loop starting at line 305 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41664536600001156
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3166710909863468,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT3 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F902 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 67 \n  A region starting at line 67 and ending at line 69 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 67 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 69 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 80 \n  A loop starting at line 80 was fused with the loop starting at line 78.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 80 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  A data region was created at line 83 and ending at line 90.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 90 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 90 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 90 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  A region starting at line 84 and ending at line 89 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 86 \n  A loop starting at line 86 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 93 \n  A loop starting at line 93 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 93 \n  A loop starting at line 93 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 314 \n  A loop starting at line 314 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41651207697577775
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165631890005898,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT4 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F903 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 120 \n  A region starting at line 120 and ending at line 122 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 120 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 122 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 133 \n  A loop starting at line 133 was fused with the loop starting at line 132.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 135 \n  A loop starting at line 135 was fused with the loop starting at line 134.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 136 \n  A loop starting at line 136 was fused with the loop starting at line 132.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 136 \n  A statement was replaced by a library call.\n\n\nftn-6230 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 140 \n  A loop starting at line 140 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 141 \n  A loop starting at line 141 was fused with the loop starting at line 140.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  A data region was created at line 143 and ending at line 150.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 150 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 150 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 150 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  A region starting at line 144 and ending at line 149 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 149 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 146 \n  A loop starting at line 146 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 153 \n  A loop starting at line 153 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 153 \n  A loop starting at line 153 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 323 \n  A loop starting at line 323 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46645889899809845
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3170854240015615,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT5 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F904 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 181 \n  A region starting at line 181 and ending at line 183 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 181 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 183 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 195 \n  A loop starting at line 195 was fused with the loop starting at line 193.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 195 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 199 \n  A loop starting at line 199 was fused with the loop starting at line 198.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 201 \n  A loop starting at line 201 was fused with the loop starting at line 200.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  A data region was created at line 203 and ending at line 210.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 210 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 210 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 210 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  A region starting at line 204 and ending at line 209 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 209 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 209 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 209 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 206 \n  A loop starting at line 206 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 213 \n  A loop starting at line 213 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 213 \n  A loop starting at line 213 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 332 \n  A loop starting at line 332 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41733796801418066
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165489830134902,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F905 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 241 \n  A region starting at line 241 and ending at line 243 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 241 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 243 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 255 \n  A loop starting at line 255 was fused with the loop starting at line 253.\n\n\nftn-6231 ftn: VECTOR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 255 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  A data region was created at line 258 and ending at line 265.\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 265 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 265 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 265 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  A region starting at line 259 and ending at line 264 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 264 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 264 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 264 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 261 \n  A loop starting at line 261 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 267 \n  A loop starting at line 267 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 267 \n  A loop starting at line 267 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 341 \n  A loop starting at line 341 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 368 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4169381919782609
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31703802599804476,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/enter_data_if.F90/enter_data_if.F906 /global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 15 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 17 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 28 \n  A loop starting at line 28 was fused with the loop starting at line 26.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 28 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  A data region was created at line 31 and ending at line 38.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 38 (acc_share).\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  If not already present: allocate memory for user shaped variable \"a\" on accelerator, free at line 38 (acc_share).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 31 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 38 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  A region starting at line 32 and ending at line 37 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 37 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 34 \n  A loop starting at line 34 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 40 \n  A loop starting at line 40 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 40 \n  A loop starting at line 40 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 67 \n  A region starting at line 67 and ending at line 69 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 67 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 69 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 80 \n  A loop starting at line 80 was fused with the loop starting at line 78.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 80 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  A data region was created at line 83 and ending at line 90.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 90 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 90 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 83 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 90 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  A region starting at line 84 and ending at line 89 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 84 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 86 \n  A loop starting at line 86 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 93 \n  A loop starting at line 93 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 93 \n  A loop starting at line 93 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 120 \n  A region starting at line 120 and ending at line 122 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 120 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 122 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 133 \n  A loop starting at line 133 was fused with the loop starting at line 132.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 135 \n  A loop starting at line 135 was fused with the loop starting at line 134.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 136 \n  A loop starting at line 136 was fused with the loop starting at line 132.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 136 \n  A statement was replaced by a library call.\n\n\nftn-6230 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 140 \n  A loop starting at line 140 was replaced with multiple library calls.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 141 \n  A loop starting at line 141 was fused with the loop starting at line 140.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  A data region was created at line 143 and ending at line 150.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 150 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 150 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 143 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 150 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  A region starting at line 144 and ending at line 149 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 149 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 144 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 149 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 146 \n  A loop starting at line 146 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 153 \n  A loop starting at line 153 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 153 \n  A loop starting at line 153 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 181 \n  A region starting at line 181 and ending at line 183 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 181 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 183 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 195 \n  A loop starting at line 195 was fused with the loop starting at line 193.\n\n\nftn-6231 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 195 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 199 \n  A loop starting at line 199 was fused with the loop starting at line 198.\n\n\nftn-6004 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 201 \n  A loop starting at line 201 was fused with the loop starting at line 200.\n\n\nftn-6413 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  A data region was created at line 203 and ending at line 210.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 210 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 210 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 203 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 210 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  A region starting at line 204 and ending at line 209 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 209 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 209 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 204 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 209 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 206 \n  A loop starting at line 206 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 213 \n  A loop starting at line 213 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 213 \n  A loop starting at line 213 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 241 \n  A region starting at line 241 and ending at line 243 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 241 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 243 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 255 \n  A loop starting at line 255 was fused with the loop starting at line 253.\n\n\nftn-6231 ftn: VECTOR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 255 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  A data region was created at line 258 and ending at line 265.\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 265 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 265 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 258 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 265 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  A region starting at line 259 and ending at line 264 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 264 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 264 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 259 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 264 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 261 \n  A loop starting at line 261 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 267 \n  A loop starting at line 267 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST5, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 267 \n  A loop starting at line 267 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 305 \n  A loop starting at line 305 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 314 \n  A loop starting at line 314 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 323 \n  A loop starting at line 323 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 332 \n  A loop starting at line 332 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90, Line = 341 \n  A loop starting at line 341 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0103 seconds\nCray Fortran : 404 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.7174036809883546
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:679 CRAY_ACC_ERROR - Host region (7ffdfd28c240 to 7ffdfd28e180) overlaps present region (7ffdfd28df5c to 7ffdfd28df60 index 0) but is not contained for 'c(:)' from ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/enter_data_if.F90:83\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3164536650001537,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data.F90/exit_data.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 12 \n  A region starting at line 12 and ending at line 14 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 12 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 14 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 23.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 28 \n  A region starting at line 28 and ending at line 33 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 61 \n  A region starting at line 61 and ending at line 63 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 61 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 63 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 73 \n  A loop starting at line 73 was fused with the loop starting at line 72.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 75 \n  A region starting at line 75 and ending at line 80 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 77 \n  A loop starting at line 77 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 111 \n  A loop starting at line 111 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data.F90, Line = 120 \n  A loop starting at line 120 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0056 seconds\nCray Fortran : 156 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166554269962944
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5170851699949708,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_copyout_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_copyout_no_lower_bound.F90/exit_data_copyout_no_lower_bound.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 21 \n  A data region was created at line 21 and ending at line 28.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 22 \n  A region starting at line 22 and ending at line 27 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 30 \n  A loop starting at line 30 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_no_lower_bound.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165918549988419
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31667418699362315,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_copyout_reference_counts.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_copyout_reference_counts.F90/exit_data_copyout_reference_counts.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 30 \n  A data region was created at line 30 and ending at line 38.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 30 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  A region starting at line 31 and ending at line 36 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 67 \n  A region starting at line 67 and ending at line 69 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 80 \n  A loop starting at line 80 was fused with the loop starting at line 78.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 80 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 82 \n  A data region was created at line 82 and ending at line 89.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 82 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  A region starting at line 83 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 83 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 85 \n  A loop starting at line 85 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 118 \n  A region starting at line 118 and ending at line 120 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A loop starting at line 131 was fused with the loop starting at line 129.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 131 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  A region starting at line 135 and ending at line 140 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 140 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 137 \n  A loop starting at line 137 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 176 \n  A loop starting at line 176 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 185 \n  A loop starting at line 185 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_copyout_reference_counts.F90, Line = 194 \n  A loop starting at line 194 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 239 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5666247520130128
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31660621002083644,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_delete_no_lower_bound.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_delete_no_lower_bound.F90/exit_data_delete_no_lower_bound.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 29 \n  A data region was created at line 29 and ending at line 36.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 36 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 38 \n  A loop starting at line 38 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 38 \n  A loop starting at line 38 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 63 \n  A region starting at line 63 and ending at line 65 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 77 \n  A loop starting at line 77 was fused with the loop starting at line 75.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 77 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 80 \n  A data region was created at line 80 and ending at line 87.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 80 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 80 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 86 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 83 \n  A loop starting at line 83 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 90 \n  A loop starting at line 90 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 90 \n  A loop starting at line 90 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 128 \n  A loop starting at line 128 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 164 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5164028159924783
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "ACC: libcrayacc/acc_present.c:679 CRAY_ACC_ERROR - Host region (7ffd7ea01d00 to 7ffd7ea03c40) overlaps present region (7ffd7ea03b9c to 7ffd7ea03ba0 index 0) but is not contained for 'c(:)' from ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90:79\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.31692702902364545,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_delete_no_lower_bound.F90/exit_data_delete_no_lower_bound.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 63 \n  A region starting at line 63 and ending at line 65 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 77 \n  A loop starting at line 77 was fused with the loop starting at line 75.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 77 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 80 \n  A data region was created at line 80 and ending at line 87.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 80 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 80 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 81 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 86 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 83 \n  A loop starting at line 83 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 90 \n  A loop starting at line 90 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 90 \n  A loop starting at line 90 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_delete_no_lower_bound.F90, Line = 128 \n  A loop starting at line 128 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 155 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4164655409986153
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31695145400590263,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "exit_data_finalize.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/exit_data_finalize.F90/exit_data_finalize.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 38 \n  A loop starting at line 38 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 38 \n  A loop starting at line 38 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/exit_data_finalize.F90, Line = 121 \n  A loop starting at line 121 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 157 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4673743979947176
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165999990014825,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_async.F90/kernels_async.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 22 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 23 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 25 \n  A data region was created at line 25 and ending at line 44.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"e\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 26 \n  A data region was created at line 26 and ending at line 31.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 28 \n  A loop starting at line 28 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 32 \n  A data region was created at line 32 and ending at line 37.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"e\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, copy back at line 37 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 34 \n  A loop starting at line 34 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 34 \n  A loop starting at line 34 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 38 \n  A data region was created at line 38 and ending at line 43.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 43 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"g\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 40 \n  A loop starting at line 40 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_async.F90, Line = 86 \n  A loop starting at line 86 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 113 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4663634719909169
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3168093099957332,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copy.F90/kernels_copy.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 13 \n  A data region was created at line 13 and ending at line 15.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 14 \n  A region starting at line 14 and ending at line 14 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 28 \n  A data region was created at line 28 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 29 \n  A data region was created at line 29 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 31 \n  A loop starting at line 31 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 62 \n  A data region was created at line 62 and ending at line 64.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 63 \n  A region starting at line 63 and ending at line 63 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 76 \n  A loop starting at line 76 was fused with the loop starting at line 74.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 76 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 78 \n  A data region was created at line 78 and ending at line 85.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 85 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 85 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 78 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 85 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 79 \n  A data region was created at line 79 and ending at line 84.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 84 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 79 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 81 \n  A loop starting at line 81 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 81 \n  A loop starting at line 81 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 87 \n  A loop starting at line 87 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 87 \n  A loop starting at line 87 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 115 \n  A data region was created at line 115 and ending at line 117.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 116 \n  A region starting at line 116 and ending at line 116 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 129 \n  A loop starting at line 129 was fused with the loop starting at line 127.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 129 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 131 \n  A data region was created at line 131 and ending at line 146.\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 131 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 146 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 131 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 146 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 131 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 146 (acc_copyin).\n\n\nftn-6202 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 132 \n  A loop starting at line 132 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 135 \n  A data region was created at line 135 and ending at line 140.\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 135 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 140 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 135 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 140 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 137 \n  A loop starting at line 137 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 137 \n  A loop starting at line 137 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 141 \n  A loop starting at line 141 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 141 \n  A loop starting at line 141 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 148 \n  A loop starting at line 148 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 148 \n  A loop starting at line 148 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copy.F90, Line = 198 \n  A loop starting at line 198 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0068 seconds\nCray Fortran : 243 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5667248889803886
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3672302060003858,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyin.F90/kernels_copyin.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 25 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 27 \n  A data region was created at line 27 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 27 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 28 \n  A data region was created at line 28 and ending at line 33.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 28 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 30 \n  A loop starting at line 30 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 90 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 90 (acc_copy).\n\n\nftn-6002 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 76 \n  A loop starting at line 76 was eliminated by optimization.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 84 (acc_copyin).\n\n\nftn-6002 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 81 \n  A loop starting at line 81 was eliminated by optimization.\n\n\nftn-6002 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 85 \n  A loop starting at line 85 was eliminated by optimization.\n\n\nftn-6002 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 91 \n  A loop starting at line 91 was eliminated by optimization.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 132 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 137 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 132 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 137 (acc_copyin).\n\n\nftn-6002 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 134 \n  A loop starting at line 134 was eliminated by optimization.\n\n\nftn-6002 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 139 \n  A loop starting at line 139 was eliminated by optimization.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 171 \n  A loop starting at line 171 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyin.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0067 seconds\nCray Fortran : 234 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41690106299938634
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3174260089872405,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_copyout.F90/kernels_copyout.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 13 \n  A data region was created at line 13 and ending at line 15.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 14 \n  A region starting at line 14 and ending at line 14 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 25 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 27 \n  A data region was created at line 27 and ending at line 34.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 27 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 28 \n  A data region was created at line 28 and ending at line 33.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 28 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 33 (acc_copyout).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 28 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 30 \n  A loop starting at line 30 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 61 \n  A data region was created at line 61 and ending at line 63.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 62 \n  A region starting at line 62 and ending at line 62 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 74 \n  A loop starting at line 74 was fused with the loop starting at line 73.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 74 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 76 \n  A data region was created at line 76 and ending at line 83.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 76 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 76 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 77 \n  A data region was created at line 77 and ending at line 82.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 77 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 82 (acc_copyout).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 77 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 79 \n  A loop starting at line 79 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 79 \n  A loop starting at line 79 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 114 \n  A loop starting at line 114 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_copyout.F90, Line = 123 \n  A loop starting at line 123 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 159 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46621720801340416
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3170698340109084,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_create.F90/kernels_create.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 13 \n  A data region was created at line 13 and ending at line 15.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 14 \n  A region starting at line 14 and ending at line 14 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 25.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 28 \n  A data region was created at line 28 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 29 \n  A data region was created at line 29 and ending at line 34.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 29 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 34 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 31 \n  A loop starting at line 31 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 62 \n  A data region was created at line 62 and ending at line 64.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 63 \n  A region starting at line 63 and ending at line 63 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 74 \n  A loop starting at line 74 was fused with the loop starting at line 73.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 74 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 75 \n  A data region was created at line 75 and ending at line 82.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 75 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 82 (acc_copyout).\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 76 \n  A data region was created at line 76 and ending at line 81.\n\n\nftn-6422 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 76 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 81 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 81 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 78 \n  A loop starting at line 78 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 78 \n  A loop starting at line 78 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 108 \n  A data region was created at line 108 and ending at line 110.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 109 \n  A region starting at line 109 and ending at line 109 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 120 \n  A loop starting at line 120 was fused with the loop starting at line 119.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 120 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 122 \n  A data region was created at line 122 and ending at line 133.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 122 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 133 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 122 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 133 (acc_copyout).\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 123 \n  A data region was created at line 123 and ending at line 132.\n\n\nftn-6422 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 123 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 132 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 123 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 132 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 123 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 132 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 125 \n  A loop starting at line 125 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 125 \n  A loop starting at line 125 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 129 \n  A loop starting at line 129 was fused with the loop starting at line 125.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 135 \n  A loop starting at line 135 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 135 \n  A loop starting at line 135 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 166 \n  A loop starting at line 166 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 175 \n  A loop starting at line 175 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_create.F90, Line = 184 \n  A loop starting at line 184 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0065 seconds\nCray Fortran : 229 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5163337970152497
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3166257969860453,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_default_copy.F90/kernels_default_copy.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 28 \n  A data region was created at line 28 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 29 \n  A data region was created at line 29 and ending at line 34.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 31 \n  A loop starting at line 31 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6002 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 82 \n  A loop starting at line 82 was eliminated by optimization.\n\n\nftn-6002 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 87 \n  A loop starting at line 87 was eliminated by optimization.\n\n\nftn-6002 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 93 \n  A loop starting at line 93 was eliminated by optimization.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 122 \n  A loop starting at line 122 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_default_copy.F90, Line = 131 \n  A loop starting at line 131 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 167 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41645800598780625
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31667045000358485,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_if.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.F90/kernels_if.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31596110700047575
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009541777020785958,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.F90/kernels_if.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 14 \n  A data region was created at line 14 and ending at line 16.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 25.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 30 \n  A loop starting at line 30 was replaced by a library call.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 30 \n  A loop starting at line 30 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 245 \n  A loop starting at line 245 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 299 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36605328001314774
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": -8,
                    "runtime": 0.3166984519921243,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT3 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.F90/kernels_if.F902 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 61 \n  A data region was created at line 61 and ending at line 63.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 62 \n  A region starting at line 62 and ending at line 62 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 73 \n  A loop starting at line 73 was fused with the loop starting at line 72.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 73 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 77 \n  A data region was created at line 77 and ending at line 82.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 79 \n  A loop starting at line 79 was partitioned.\n\n\nftn-6401 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 79 \n  A loop starting at line 79 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 79 \n  A loop starting at line 79 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 254 \n  A loop starting at line 254 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 299 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41665191799984314
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167497380054556,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.F90/kernels_if.F903 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 111 \n  A data region was created at line 111 and ending at line 113.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 112 \n  A region starting at line 112 and ending at line 112 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 124 \n  A loop starting at line 124 was fused with the loop starting at line 123.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 124 \n  A statement was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 127 \n  A loop starting at line 127 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 131 \n  A data region was created at line 131 and ending at line 136.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 133 \n  A loop starting at line 133 was partitioned.\n\n\nftn-6401 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 133 \n  A loop starting at line 133 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 133 \n  A loop starting at line 133 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 138 \n  A loop starting at line 138 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 138 \n  A loop starting at line 138 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 150 \n  A loop starting at line 150 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 150 \n  A loop starting at line 150 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 263 \n  A loop starting at line 263 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 299 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": false,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4166265309904702
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": false,
                    "output": "",
                    "result": -8,
                    "runtime": 0.31656495298375376,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -DT2 -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.F90/kernels_if.F904 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-303 ftn: ERROR TEST4, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 188, Column = 24 \n  Data type LOGICAL is not allowed with INTEGER for the operation \"eq\".\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 299 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11594638298265636
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT4 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_if.F90/kernels_if.F905 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 14 \n  A data region was created at line 14 and ending at line 16.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 15 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 25.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 30 \n  A loop starting at line 30 was replaced by a library call.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 30 \n  A loop starting at line 30 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 61 \n  A data region was created at line 61 and ending at line 63.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 62 \n  A region starting at line 62 and ending at line 62 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 73 \n  A loop starting at line 73 was fused with the loop starting at line 72.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 73 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 77 \n  A data region was created at line 77 and ending at line 82.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 79 \n  A loop starting at line 79 was partitioned.\n\n\nftn-6401 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 79 \n  A loop starting at line 79 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 79 \n  A loop starting at line 79 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 85 \n  A loop starting at line 85 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 85 \n  A loop starting at line 85 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 111 \n  A data region was created at line 111 and ending at line 113.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 112 \n  A region starting at line 112 and ending at line 112 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 124 \n  A loop starting at line 124 was fused with the loop starting at line 123.\n\n\nftn-6231 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 124 \n  A statement was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 127 \n  A loop starting at line 127 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 131 \n  A data region was created at line 131 and ending at line 136.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 133 \n  A loop starting at line 133 was partitioned.\n\n\nftn-6401 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 133 \n  A loop starting at line 133 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 133 \n  A loop starting at line 133 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 138 \n  A loop starting at line 138 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 138 \n  A loop starting at line 138 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 150 \n  A loop starting at line 150 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 150 \n  A loop starting at line 150 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 245 \n  A loop starting at line 245 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 254 \n  A loop starting at line 254 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_if.F90, Line = 263 \n  A loop starting at line 263 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 317 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165207159880083
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": -8,
                    "runtime": 0.3668504179804586,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop.F90/kernels_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 23 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 27 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 31 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 35 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 39 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 43 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 47 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 51 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 55 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 6, Column = 59 \n  Unexpected syntax while parsing the type-declaration statement : \"object-name\" was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 23, Column = 16 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 25, Column = 18 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 27, Column = 20 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 29, Column = 22 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 31, Column = 24 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 33, Column = 26 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 35, Column = 28 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 37, Column = 30 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 39, Column = 32 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-515 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 41, Column = 34 \n  Unexpected syntax:  A label, comma, identifier, WHILE or EOS was expected but found \"_\".\n\n\nftn-1725 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90, Line = 42, Column = 35 \n  Unexpected syntax while parsing the assignment statement : \"operand\" was expected but found \"_\".\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 108 source lines\nCray Fortran : 21 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11574738097260706
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop.F90/kernels_loop.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164338589995168
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009670258004916832,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_independent.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_independent.F90/kernels_loop_independent.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 20 \n  A data region was created at line 20 and ending at line 25.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 21 \n  A data region was created at line 21 and ending at line 24.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 24 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 24 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 22 \n  A loop starting at line 22 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 22 \n  A loop starting at line 22 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 27 \n  A loop starting at line 27 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 27 \n  A loop starting at line 27 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_independent.F90, Line = 52 \n  A loop starting at line 52 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 79 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41630576297757216
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3173494579968974,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_general.F90/kernels_loop_reduction_add_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 21 \n  A data region was created at line 21 and ending at line 26.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 21 \n  If not already present: allocate memory and copy variable \"total\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 22 \n  A region starting at line 22 and ending at line 25 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 22 \n  If not already present: allocate memory and copy variable \"total\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 27 \n  A loop starting at line 27 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 27 \n  A loop starting at line 27 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_general.F90, Line = 54 \n  A loop starting at line 54 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162616399989929
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167094030068256,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_loop.F90/kernels_loop_reduction_add_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 21 \n  A data region was created at line 21 and ending at line 36.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, free at line 36 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"d\" on accelerator, copy back at line 36 (acc_copyout).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 22 \n  A data region was created at line 22 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 26 \n  A loop starting at line 26 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6415 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 26 \n  Allocate memory and copy variable \"avg\" to accelerator, copy back at line 29 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 32 \n  A loop starting at line 32 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 39 \n  A loop starting at line 39 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 39 \n  A loop starting at line 39 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 43 \n  A loop starting at line 43 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_loop.F90, Line = 69 \n  A loop starting at line 69 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 96 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4664602619886864
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3169254060194362,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_add_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_add_vector_loop.F90/kernels_loop_reduction_add_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 22 \n  A data region was created at line 22 and ending at line 32.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 32 (acc_copyout).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_add_vector_loop.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4168829590198584
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31791524300933816,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_general.F90/kernels_loop_reduction_and_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 30 \n  A data region was created at line 30 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 30 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 31 \n  A data region was created at line 31 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 31 \n  If not already present: allocate memory and copy variable \"results\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 32 \n  A loop starting at line 32 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_general.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41602658000192605
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31663965299958363,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_loop.F90/kernels_loop_reduction_and_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 21 \n  A loop starting at line 21 was unrolled 2 times.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 21 \n  A loop starting at line 21 was partially vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 22 \n  A loop starting at line 22 was vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 37 \n  A data region was created at line 37 and ending at line 57.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"results\" to accelerator, copy back at line 57 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 57 (acc_copy).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 38 \n  A data region was created at line 38 and ending at line 56.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"results\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 42 \n  A loop starting at line 42 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 42 \n  A loop starting at line 42 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6415 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 42 \n  Allocate memory and copy variable \"temp\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 45 \n  A region starting at line 45 and ending at line 45 was placed on the accelerator.\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 47 \n  A loop starting at line 47 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 47 \n  A loop starting at line 47 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 60 \n  A loop starting at line 60 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 66 \n  A loop starting at line 66 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 66 \n  A loop starting at line 66 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_loop.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46688622699002735
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3170304310042411,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_and_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_and_vector_loop.F90/kernels_loop_reduction_and_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 40 \n  A data region was created at line 40 and ending at line 50.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 40 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 50 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 40 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 50 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 41 \n  A data region was created at line 41 and ending at line 49.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 41 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 49 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 41 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 49 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 42 \n  A loop starting at line 42 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 42 \n  A loop starting at line 42 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 45 \n  A loop starting at line 45 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 54 \n  A loop starting at line 54 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_and_vector_loop.F90, Line = 83 \n  A loop starting at line 83 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 110 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41680235898820683
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31641036400105804,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_general.F90/kernels_loop_reduction_bitand_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 23 \n  A loop starting at line 23 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 24 \n  A loop starting at line 24 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 24 \n  A loop starting at line 24 was vectorized as part of the loop starting at line 23.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 27 \n  A loop starting at line 27 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 37 \n  A data region was created at line 37 and ending at line 42.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 38 \n  A data region was created at line 38 and ending at line 41.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 38 \n  If not already present: allocate memory and copy variable \"b\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 41 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 39 \n  A loop starting at line 39 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 39 \n  A loop starting at line 39 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_general.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41686581799876876
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167133189854212,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_loop.F90/kernels_loop_reduction_bitand_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 23 \n  A loop starting at line 23 was partially vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 27 \n  A loop starting at line 27 was fused with the loop starting at line 23.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 28 \n  A loop starting at line 28 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 28 \n  A loop starting at line 28 was vectorized as part of the loop starting at line 23.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 31 \n  A loop starting at line 31 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 34 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 39 \n  A loop starting at line 39 was unwound.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 43 \n  A data region was created at line 43 and ending at line 57.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 43 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 57 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 43 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 57 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 43 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 57 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 44 \n  A data region was created at line 44 and ending at line 56.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 44 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 56 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 44 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 44 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 45 \n  A loop starting at line 45 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 45 \n  A loop starting at line 45 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 48 \n  A loop starting at line 48 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 53 \n  A loop starting at line 53 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 61 \n  A loop starting at line 61 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 61 \n  A loop starting at line 61 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 67 \n  A loop starting at line 67 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 67 \n  A loop starting at line 67 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_loop.F90, Line = 93 \n  A loop starting at line 93 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 120 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165906440175604
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31669710998539813,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitand_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitand_vector_loop.F90/kernels_loop_reduction_bitand_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was collapsed into the loop starting at line 25.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was partially vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 26 \n  A loop starting at line 26 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 26 \n  A loop starting at line 26 was vectorized as part of the loop starting at line 25.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 29 \n  A loop starting at line 29 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 32 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 38 \n  A data region was created at line 38 and ending at line 48.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 38 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 48 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 38 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 48 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 39 \n  A data region was created at line 39 and ending at line 47.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 39 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 39 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 47 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 40 \n  A loop starting at line 40 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 43 \n  A loop starting at line 43 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 52 \n  A loop starting at line 52 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 52 \n  A loop starting at line 52 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitand_vector_loop.F90, Line = 79 \n  A loop starting at line 79 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 106 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41594616099609993
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31657011300558224,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_general.F90/kernels_loop_reduction_bitor_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 23 \n  A loop starting at line 23 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 24 \n  A loop starting at line 24 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 24 \n  A loop starting at line 24 was vectorized as part of the loop starting at line 23.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 27 \n  A loop starting at line 27 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 35 \n  A data region was created at line 35 and ending at line 40.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 40 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 36 \n  A data region was created at line 36 and ending at line 39.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 36 \n  If not already present: allocate memory and copy variable \"b\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 37 \n  A loop starting at line 37 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 37 \n  A loop starting at line 37 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 42 \n  A loop starting at line 42 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 42 \n  A loop starting at line 42 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_general.F90, Line = 68 \n  A loop starting at line 68 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4158317369874567
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316363307996653,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_loop.F90/kernels_loop_reduction_bitor_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 23.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 27 \n  A loop starting at line 27 was collapsed into the loop starting at line 28.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 28 \n  A loop starting at line 28 was partially vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 29 \n  A loop starting at line 29 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 29 \n  A loop starting at line 29 was vectorized as part of the loop starting at line 28.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 32 \n  A loop starting at line 32 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 35 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 41 \n  A data region was created at line 41 and ending at line 55.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 41 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 41 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 41 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 55 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 42 \n  A data region was created at line 42 and ending at line 54.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 42 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 54 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 42 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 54 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 42 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 54 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 43 \n  A loop starting at line 43 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 43 \n  A loop starting at line 43 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 46 \n  A loop starting at line 46 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 51 \n  A loop starting at line 51 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 59 \n  A loop starting at line 59 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 59 \n  A loop starting at line 59 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 65 \n  A loop starting at line 65 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 65 \n  A loop starting at line 65 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_loop.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 118 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41664343199227005
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163427890103776,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitor_vector_loop.F90/kernels_loop_reduction_bitor_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was interchanged with the loop starting at line 24.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was vectorized.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 27 \n  A loop starting at line 27 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 35 \n  A data region was created at line 35 and ending at line 45.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 36 \n  A data region was created at line 36 and ending at line 44.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 49 \n  A loop starting at line 49 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 49 \n  A loop starting at line 49 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitor_vector_loop.F90, Line = 76 \n  A loop starting at line 76 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41646037000464275
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31789786100853235,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_general.F90/kernels_loop_reduction_bitxor_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 23 \n  A data region was created at line 23 and ending at line 28.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 24 \n  A data region was created at line 24 and ending at line 27.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 24 \n  If not already present: allocate memory and copy variable \"b\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 25 \n  A loop starting at line 25 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 30 \n  A loop starting at line 30 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_general.F90, Line = 56 \n  A loop starting at line 56 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165417219919618
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316979307011934,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_loop.F90/kernels_loop_reduction_bitxor_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 23.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 26 \n  A loop starting at line 26 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 28 \n  A data region was created at line 28 and ending at line 42.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 29 \n  A data region was created at line 29 and ending at line 41.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 41 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 30 \n  A loop starting at line 30 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 46 \n  A loop starting at line 46 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 52 \n  A loop starting at line 52 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 52 \n  A loop starting at line 52 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_loop.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41629175600246526
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167599379958119,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_bitxor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_bitxor_vector_loop.F90/kernels_loop_reduction_bitxor_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_bitxor_vector_loop.F90, Line = 64 \n  A loop starting at line 64 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 91 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4167004289920442
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31711774499854073,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_general.F90/kernels_loop_reduction_max_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 23 \n  A data region was created at line 23 and ending at line 28.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 24 \n  A data region was created at line 24 and ending at line 27.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 24 \n  If not already present: allocate memory and copy variable \"maximum\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 25 \n  A loop starting at line 25 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 30 \n  A loop starting at line 30 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_general.F90, Line = 56 \n  A loop starting at line 56 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4177263140154537
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.37284210897632875,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_loop.F90/kernels_loop_reduction_max_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 37.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 37 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 24 \n  A data region was created at line 24 and ending at line 36.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"maximum\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 25 \n  A loop starting at line 25 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 40 \n  A loop starting at line 40 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_loop.F90, Line = 68 \n  A loop starting at line 68 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162891029845923
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.567173695017118,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_max_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_max_vector_loop.F90/kernels_loop_reduction_max_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6373 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 21 \n  A loop starting at line 21 with a trip count of 10 was unwound into 2 vector iterations.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"maximum\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 24 \n  A data region was created at line 24 and ending at line 32.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"maximum\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_max_vector_loop.F90, Line = 64 \n  A loop starting at line 64 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 91 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4167424079787452
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31683450599666685,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_general.F90/kernels_loop_reduction_min_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 22 \n  A data region was created at line 22 and ending at line 27.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 23 \n  A data region was created at line 23 and ending at line 26.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 23 \n  If not already present: allocate memory and copy variable \"minimum\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 24 \n  A loop starting at line 24 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 29 \n  A loop starting at line 29 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 29 \n  A loop starting at line 29 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_general.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41636565400403924
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31640768999932334,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_loop.F90/kernels_loop_reduction_min_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 25 \n  A data region was created at line 25 and ending at line 39.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"minimum\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 26 \n  A data region was created at line 26 and ending at line 38.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"minimum\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 27 \n  A loop starting at line 27 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 35 \n  A loop starting at line 35 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 43 \n  A loop starting at line 43 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 50 \n  A loop starting at line 50 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 50 \n  A loop starting at line 50 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_loop.F90, Line = 76 \n  A loop starting at line 76 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4156240889860783
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163626599998679,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_min_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_min_vector_loop.F90/kernels_loop_reduction_min_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 22 \n  A data region was created at line 22 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"minimum\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 31.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"minimum\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_min_vector_loop.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4169611750112381
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163320919848047,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_general.F90/kernels_loop_reduction_multiply_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 24 \n  A data region was created at line 24 and ending at line 29.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 25 \n  A data region was created at line 25 and ending at line 28.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 25 \n  If not already present: allocate memory and copy variable \"multiplied_total\" to accelerator, copy back at line 28 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 26 \n  A loop starting at line 26 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 31 \n  A loop starting at line 31 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 31 \n  A loop starting at line 31 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_general.F90, Line = 59 \n  A loop starting at line 59 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 86 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4166080389986746
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165003870090004,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_loop.F90/kernels_loop_reduction_multiply_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 25 \n  A data region was created at line 25 and ending at line 39.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 26 \n  A data region was created at line 26 and ending at line 38.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 27 \n  A loop starting at line 27 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 35 \n  A loop starting at line 35 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 43 \n  A loop starting at line 43 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_loop.F90, Line = 81 \n  A loop starting at line 81 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0046 seconds\nCray Fortran : 108 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46647482601110823
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3168985490046907,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_multiply_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_multiply_vector_loop.F90/kernels_loop_reduction_multiply_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  A data region was created at line 24 and ending at line 34.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 34 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  A region starting at line 25 and ending at line 33 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 38 \n  A loop starting at line 38 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 38 \n  A loop starting at line 38 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_multiply_vector_loop.F90, Line = 65 \n  A loop starting at line 65 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 92 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4163802519906312
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165313840145245,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_general.F90/kernels_loop_reduction_or_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 30 \n  A data region was created at line 30 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 30 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 31 \n  A data region was created at line 31 and ending at line 34.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 31 \n  If not already present: allocate memory and copy variable \"results\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 32 \n  A loop starting at line 32 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_general.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.366073235985823
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167825939890463,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_loop.F90/kernels_loop_reduction_or_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 36 \n  A data region was created at line 36 and ending at line 56.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"results\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 37 \n  A data region was created at line 37 and ending at line 55.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"results\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 41 \n  A loop starting at line 41 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 41 \n  A loop starting at line 41 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6415 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 41 \n  Allocate memory and copy variable \"temp\" to accelerator, copy back at line 43 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 44 \n  A region starting at line 44 and ending at line 44 was placed on the accelerator.\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 46 \n  A loop starting at line 46 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 46 \n  A loop starting at line 46 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 60 \n  A loop starting at line 60 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 66 \n  A loop starting at line 66 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 66 \n  A loop starting at line 66 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_loop.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46704449100070633
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31704275897936895,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_reduction_or_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_reduction_or_vector_loop.F90/kernels_loop_reduction_or_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 31 \n  A data region was created at line 31 and ending at line 41.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 31 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 31 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 41 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 32 \n  A data region was created at line 32 and ending at line 40.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 40 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 40 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 33 \n  A loop starting at line 33 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_reduction_or_vector_loop.F90, Line = 72 \n  A loop starting at line 72 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 99 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36645471802330576
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162886219797656,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_seq.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_seq.F90/kernels_loop_seq.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 20 \n  A data region was created at line 20 and ending at line 25.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 21 \n  A data region was created at line 21 and ending at line 24.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 24 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 24 (acc_copy).\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 22 \n  A loop starting at line 22 was unrolled 4 times.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 22 \n  A loop starting at line 22 will be serially executed.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 22 \n  A region starting at line 22 and ending at line 24 was placed on the accelerator.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 27 \n  A loop starting at line 27 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 27 \n  A loop starting at line 27 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_seq.F90, Line = 52 \n  A loop starting at line 52 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 79 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41636430501239374
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31693913601338863,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_tile.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_tile.F90/kernels_loop_tile.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.F90",
                    "config": 1,
                    "errors": "\n\nftn-1342 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.F90, Line = 28, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\n\nftn-1342 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.F90, Line = 31, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 94 source lines\nCray Fortran : 2 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11572056799195707
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_tile.F90/kernels_loop_tile.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_tile.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31611688001430593
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009339448995888233,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_vector_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_vector_blocking.F90/kernels_loop_vector_blocking.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 22 \n  A data region was created at line 22 and ending at line 34.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 34 (acc_copyout).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 25 \n  A loop starting at line 25 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 30 \n  A loop starting at line 30 was fused with the loop starting at line 25.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_vector_blocking.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0037 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41637072700541466
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165900240128394,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_loop_worker_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_loop_worker_blocking.F90/kernels_loop_worker_blocking.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 20.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 22 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 24 \n  A data region was created at line 24 and ending at line 36.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 24 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 36 (acc_copyout).\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 25 \n  A data region was created at line 25 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 27 \n  A loop starting at line 27 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 32 \n  A loop starting at line 32 was fused with the loop starting at line 27.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 38 \n  A loop starting at line 38 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 38 \n  A loop starting at line 38 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_loop_worker_blocking.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662173240154516
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3169788700179197,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_present.F90/kernels_present.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_present.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_present.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_present.F90, Line = 21 \n  A data region was created at line 21 and ending at line 26.\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_present.F90, Line = 23 \n  A loop starting at line 23 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_present.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_present.F90, Line = 29 \n  A loop starting at line 29 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_present.F90, Line = 29 \n  A loop starting at line 29 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_present.F90, Line = 54 \n  A loop starting at line 54 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0036 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36622379600885324
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3169477720221039,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "kernels_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/kernels_wait.F90/kernels_wait.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_wait.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_wait.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_wait.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_wait.F90, Line = 22 \n  A data region was created at line 22 and ending at line 27.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_wait.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_wait.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_wait.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6401 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_wait.F90, Line = 24 \n  A loop starting at line 24 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_wait.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_wait.F90, Line = 30 \n  A loop starting at line 30 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_wait.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/kernels_wait.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4160952130041551
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31631838699104264,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_collapse.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/loop_collapse.F90/loop_collapse.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 22 \n  A loop starting at line 22 was unwound.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 26 \n  A data region was created at line 26 and ending at line 35.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 26 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 26 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 26 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 27 \n  A region starting at line 27 and ending at line 34 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 30 \n  A loop starting at line 30 was unrolled 4 times.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 30 \n  A loop starting at line 30 will be serially executed.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 36 \n  A loop starting at line 36 was partially vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 38 \n  A loop starting at line 38 was unrolled 2 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 38 \n  A loop starting at line 38 was vectorized as part of the loop starting at line 36.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 72 \n  A loop starting at line 72 was fused with the loop starting at line 70.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 72 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 74 \n  A data region was created at line 74 and ending at line 83.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 74 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 74 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 83 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 74 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 83 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 75 \n  A region starting at line 75 and ending at line 82 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 75 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 75 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 75 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 82 (acc_copy).\n\n\nftn-6060 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 77 \n  A loop nest starting at line 77 was collapsed according to user directive.\n\n\nftn-6060 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 78 \n  A loop nest starting at line 78 was collapsed according to user directive.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 78 \n  A loop starting at line 78 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6003 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 85 \n  A loop starting at line 85 was collapsed into the loop starting at line 86.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 86 \n  A loop starting at line 86 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 86 \n  A loop starting at line 86 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 115 \n  A loop starting at line 115 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_collapse.F90, Line = 124 \n  A loop starting at line 124 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 160 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5166751460055821
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31657066801562905,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "loop_no_collapse.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/loop_no_collapse.F90/loop_no_collapse.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 22 \n  A loop starting at line 22 was unwound.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 26 \n  A data region was created at line 26 and ending at line 35.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 26 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 26 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 26 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 27 \n  A region starting at line 27 and ending at line 34 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 30 \n  A loop starting at line 30 was unrolled 4 times.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 30 \n  A loop starting at line 30 will be serially executed.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 37 \n  A loop starting at line 37 was partially vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 39 \n  A loop starting at line 39 was unrolled 2 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 39 \n  A loop starting at line 39 was vectorized as part of the loop starting at line 37.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 73 \n  A loop starting at line 73 was fused with the loop starting at line 71.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 73 \n  A statement was replaced by a library call.\n\n\nftn-6008 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 75 \n  A loop starting at line 75 was unwound.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 79 \n  A data region was created at line 79 and ending at line 88.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 80 \n  A data region was created at line 80 and ending at line 87.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 80 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 87 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 80 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 80 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 87 (acc_copyin).\n\n\nftn-6401 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 82 \n  A loop starting at line 82 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 82 \n  A loop starting at line 82 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 83 \n  A loop starting at line 83 was unrolled 4 times.\n\n\nftn-6411 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 83 \n  A loop starting at line 83 will be serially executed.\n\n\nftn-6209 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 90 \n  A loop starting at line 90 was partially vectorized.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 92 \n  A loop starting at line 92 was unrolled 2 times.\n\n\nftn-6208 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 92 \n  A loop starting at line 92 was vectorized as part of the loop starting at line 90.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 122 \n  A loop starting at line 122 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/loop_no_collapse.F90, Line = 131 \n  A loop starting at line 131 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0058 seconds\nCray Fortran : 167 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5162134749989491
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164992140082177,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel.F90/parallel.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 23 \n  A data region was created at line 23 and ending at line 59.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 59 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 59 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 59 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 24 \n  A region starting at line 24 and ending at line 58 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 58 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 58 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 58 (acc_copy).\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 24 \n  Variable \"i_e\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 24 \n  Variable \"i_d\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 24 \n  Variable \"i_f\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 24 \n  Variable \"i_g\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 24 \n  Variable \"i_j\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 24 \n  Variable \"i_i\" is used before it is defined.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 24 \n  Variable \"i_h\" is used before it is defined.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 4 warps within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 32 threads within a warp.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 32 \n  A loop starting at line 32 was collapsed into the loop starting at line 44.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 34 \n  A loop starting at line 34 was collapsed into the loop starting at line 44.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 36 \n  A loop starting at line 36 was collapsed into the loop starting at line 44.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 38 \n  A loop starting at line 38 was collapsed into the loop starting at line 44.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 40 \n  A loop starting at line 40 was collapsed into the loop starting at line 44.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 42 \n  A loop starting at line 42 was collapsed into the loop starting at line 44.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 44 \n  A loop starting at line 44 was unrolled 2 times.\n\n\nftn-6411 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 44 \n  A loop starting at line 44 will be serially executed.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 60 \n  A loop starting at line 60 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel.F90, Line = 85 \n  A loop starting at line 85 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 112 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46641628799261525
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31671397600439377,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_async.F90/parallel_async.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 22 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 23 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  A data region was created at line 25 and ending at line 47.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"g\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"f\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"e\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 26 \n  A region starting at line 26 and ending at line 31 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 32 \n  A region starting at line 32 and ending at line 37 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"e\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, copy back at line 37 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 34 \n  A loop starting at line 34 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 40 \n  A region starting at line 40 and ending at line 45 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 40 \n  If not already present: allocate memory and copy whole array \"f\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 40 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 40 \n  If not already present: allocate memory and copy whole array \"g\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 42 \n  A loop starting at line 42 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_async.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5167639429855626
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31680468301055953,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copy.F90/parallel_copy.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copy.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copy.F90, Line = 20 \n  A region starting at line 20 and ending at line 25 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copy.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copy.F90, Line = 22 \n  A loop starting at line 22 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copy.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copy.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copy.F90, Line = 53 \n  A loop starting at line 53 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0036 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3658291900064796
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316249568015337,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copyin.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyin.F90/parallel_copyin.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.F90, Line = 24 \n  A region starting at line 24 and ending at line 26 was placed on the accelerator.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.F90, Line = 29 \n  A region starting at line 29 and ending at line 35 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.F90, Line = 29 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyin.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162333410058636
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3163486839912366,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_copyout.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_copyout.F90/parallel_copyout.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 12 \n  A region starting at line 12 and ending at line 14 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 25 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 27 \n  A data region was created at line 27 and ending at line 34.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 27 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 28 \n  A region starting at line 28 and ending at line 33 was placed on the accelerator.\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 28 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 33 (acc_copyout).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 28 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 60 \n  A region starting at line 60 and ending at line 62 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 73 \n  A loop starting at line 73 was fused with the loop starting at line 72.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 75 \n  A data region was created at line 75 and ending at line 82.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 82 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 76 \n  A region starting at line 76 and ending at line 81 was placed on the accelerator.\n\n\nftn-6420 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 76 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 81 (acc_copyout).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 81 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 78 \n  A loop starting at line 78 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 84 \n  A loop starting at line 84 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 84 \n  A loop starting at line 84 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 109 \n  A region starting at line 109 and ending at line 111 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 122 \n  A loop starting at line 122 was fused with the loop starting at line 121.\n\n\nftn-6413 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 124 \n  A data region was created at line 124 and ending at line 132.\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 124 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 132 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 124 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 132 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 125 \n  A region starting at line 125 and ending at line 130 was placed on the accelerator.\n\n\nftn-6420 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 125 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 130 (acc_copyout).\n\n\nftn-6418 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 125 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 130 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 127 \n  A loop starting at line 127 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 134 \n  A loop starting at line 134 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 134 \n  A loop starting at line 134 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 165 \n  A loop starting at line 165 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 174 \n  A loop starting at line 174 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_copyout.F90, Line = 183 \n  A loop starting at line 183 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0077 seconds\nCray Fortran : 228 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5169539370108396
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3172559160157107,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_create.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_create.F90/parallel_create.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 21 \n  A data region was created at line 21 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 22 \n  A region starting at line 22 and ending at line 31 was placed on the accelerator.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, free at line 31 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 33 \n  A loop starting at line 33 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 33 \n  A loop starting at line 33 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_create.F90, Line = 58 \n  A loop starting at line 58 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 85 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41654024200397544
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164473880024161,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_default_copy.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_default_copy.F90/parallel_default_copy.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 13 \n  A region starting at line 13 and ending at line 15 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 13 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 15 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 24.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 26 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 28 \n  A data region was created at line 28 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 29 \n  A region starting at line 29 and ending at line 34 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 31 \n  A loop starting at line 31 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 61 \n  A region starting at line 61 and ending at line 63 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 61 \n  If not already present: allocate memory and copy whole array \"devtest\" to accelerator, copy back at line 63 (acc_copy).\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 75 \n  A loop starting at line 75 was fused with the loop starting at line 73.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 75 \n  A statement was replaced by a library call.\n\n\nftn-6202 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 78 \n  A loop starting at line 78 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 79 \n  A data region was created at line 79 and ending at line 86.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 79 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 86 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 80 \n  A region starting at line 80 and ending at line 85 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 80 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 85 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 80 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 85 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 80 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 85 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 82 \n  A loop starting at line 82 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 87 \n  A loop starting at line 87 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 87 \n  A loop starting at line 87 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 93 \n  A loop starting at line 93 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 93 \n  A loop starting at line 93 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 122 \n  A loop starting at line 122 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_default_copy.F90, Line = 131 \n  A loop starting at line 131 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 167 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.51652815201669
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3166681599977892,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_firstprivate.F90/parallel_firstprivate.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 23 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 25 \n  A data region was created at line 25 and ending at line 35.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6412 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 26 \n  A loop starting at line 26 will be redundantly executed.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 26 \n  A region starting at line 26 and ending at line 34 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 26 \n  A loop starting at line 26 was unrolled 4 times.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 38 \n  A loop starting at line 38 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 38 \n  A loop starting at line 38 was vectorized.\n\n\nftn-6202 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 72 \n  A loop starting at line 72 was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 73 \n  A loop starting at line 73 was fused with the loop starting at line 70.\n\n\nftn-6231 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 73 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 75 \n  A data region was created at line 75 and ending at line 89.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"d\" to accelerator, copy back at line 89 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 75 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 89 (acc_copyin).\n\n\nftn-6412 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  A loop starting at line 76 will be redundantly executed.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  A region starting at line 76 and ending at line 88 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, copy back at line 88 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 88 (acc_copyin).\n\n\nftn-6423 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  Private array \"c\" was allocated to global memory.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 76 \n  A loop starting at line 76 was unrolled 4 times.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 78 \n  A loop starting at line 78 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 80 \n  A loop starting at line 80 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 84 \n  A loop starting at line 84 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 91 \n  A loop starting at line 91 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 91 \n  A loop starting at line 91 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 119 \n  A loop starting at line 119 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_firstprivate.F90, Line = 128 \n  A loop starting at line 128 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0053 seconds\nCray Fortran : 164 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.5165861200075597
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36666440800763667,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_if.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.F90/parallel_if.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A loop starting at line 28 was fused with the loop starting at line 26.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A statement was replaced by a library call.\n\n\nftn-6823 ftn: THREAD TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was multi-threaded.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 64 \n  A region starting at line 64 and ending at line 66 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 78 \n  A loop starting at line 78 was fused with the loop starting at line 77.\n\n\nftn-6823 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was multi-threaded.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 117 \n  A region starting at line 117 and ending at line 119 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 130 \n  A loop starting at line 130 was fused with the loop starting at line 129.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 132 \n  A region starting at line 132 and ending at line 137 was placed on the accelerator.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 171 \n  A loop starting at line 171 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0070 seconds\nCray Fortran : 234 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/15.0.1/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_134053/parallel_if_1.o: in function `test1_':\nThe Cpu Module:(.text+0x43a): undefined reference to `_cray$mt_execute_parallel'\n/opt/cray/pe/cce/15.0.1/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_134053/parallel_if_1.o: in function `test2_':\nThe Cpu Module:(.text+0xbdb): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.5165209189872257
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.F90/parallel_if.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 64 \n  A region starting at line 64 and ending at line 66 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 78 \n  A loop starting at line 78 was fused with the loop starting at line 77.\n\n\nftn-6823 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was multi-threaded.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 117 \n  A region starting at line 117 and ending at line 119 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 130 \n  A loop starting at line 130 was fused with the loop starting at line 129.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 132 \n  A region starting at line 132 and ending at line 137 was placed on the accelerator.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 225 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/15.0.1/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_134077/parallel_if_1.o: in function `test2_':\nThe Cpu Module:(.text+0x5cb): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4667779119918123
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.F90/parallel_if.F902 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A loop starting at line 28 was fused with the loop starting at line 26.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A statement was replaced by a library call.\n\n\nftn-6823 ftn: THREAD TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was multi-threaded.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 117 \n  A region starting at line 117 and ending at line 119 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 130 \n  A loop starting at line 130 was fused with the loop starting at line 129.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 132 \n  A region starting at line 132 and ending at line 137 was placed on the accelerator.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 171 \n  A loop starting at line 171 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0055 seconds\nCray Fortran : 225 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/15.0.1/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_134106/parallel_if_1.o: in function `test1_':\nThe Cpu Module:(.text+0x43a): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.46699970701592974
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.F90/parallel_if.F903 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 64 \n  A region starting at line 64 and ending at line 66 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 78 \n  A loop starting at line 78 was fused with the loop starting at line 77.\n\n\nftn-6823 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was multi-threaded.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 117 \n  A region starting at line 117 and ending at line 119 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 130 \n  A loop starting at line 130 was fused with the loop starting at line 129.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 132 \n  A region starting at line 132 and ending at line 137 was placed on the accelerator.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0069 seconds\nCray Fortran : 225 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/15.0.1/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_134144/parallel_if_1.o: in function `test2_':\nThe Cpu Module:(.text+0x5cb): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4668114839878399
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT3 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.F90/parallel_if.F904 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A loop starting at line 28 was fused with the loop starting at line 26.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A statement was replaced by a library call.\n\n\nftn-6823 ftn: THREAD TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was multi-threaded.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 64 \n  A region starting at line 64 and ending at line 66 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 78 \n  A loop starting at line 78 was fused with the loop starting at line 77.\n\n\nftn-6823 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was multi-threaded.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 171 \n  A loop starting at line 171 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 225 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/15.0.1/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_134182/parallel_if_1.o: in function `test1_':\nThe Cpu Module:(.text+0x43a): undefined reference to `_cray$mt_execute_parallel'\n/opt/cray/pe/cce/15.0.1/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_134182/parallel_if_1.o: in function `test2_':\nThe Cpu Module:(.text+0xbdb): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4664802270126529
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.F90/parallel_if.F905 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 64 \n  A region starting at line 64 and ending at line 66 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 78 \n  A loop starting at line 78 was fused with the loop starting at line 77.\n\n\nftn-6823 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was multi-threaded.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 117 \n  A region starting at line 117 and ending at line 119 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 130 \n  A loop starting at line 130 was fused with the loop starting at line 129.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 132 \n  A region starting at line 132 and ending at line 137 was placed on the accelerator.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0060 seconds\nCray Fortran : 225 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/15.0.1/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_134218/parallel_if_1.o: in function `test2_':\nThe Cpu Module:(.text+0x5cb): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4665904830035288
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT2 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.F90/parallel_if.F906 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 15 \n  A region starting at line 15 and ending at line 17 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A loop starting at line 28 was fused with the loop starting at line 26.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 28 \n  A statement was replaced by a library call.\n\n\nftn-6823 ftn: THREAD TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  A region starting at line 30 and ending at line 35 was multi-threaded.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 30 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 32 \n  A loop starting at line 32 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 117 \n  A region starting at line 117 and ending at line 119 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 130 \n  A loop starting at line 130 was fused with the loop starting at line 129.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 132 \n  A region starting at line 132 and ending at line 137 was placed on the accelerator.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 171 \n  A loop starting at line 171 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0057 seconds\nCray Fortran : 225 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/15.0.1/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_134243/parallel_if_1.o: in function `test1_':\nThe Cpu Module:(.text+0x43a): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.4668480929976795
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_if.F90/parallel_if.F907 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90",
                    "config": 1,
                    "errors": "\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 64 \n  A region starting at line 64 and ending at line 66 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 78 \n  A loop starting at line 78 was fused with the loop starting at line 77.\n\n\nftn-6823 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 81 \n  A region starting at line 81 and ending at line 86 was multi-threaded.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was vectorized.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6817 ftn: THREAD TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 83 \n  A loop starting at line 83 was partitioned.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 89 \n  A loop starting at line 89 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 117 \n  A region starting at line 117 and ending at line 119 was placed on the accelerator.\n\n\nftn-6004 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 130 \n  A loop starting at line 130 was fused with the loop starting at line 129.\n\n\nftn-6405 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 132 \n  A region starting at line 132 and ending at line 137 was placed on the accelerator.\n\n\nftn-6817 ftn: THREAD TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned.\n\n\nftn-6430 ftn: ACCEL TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 134 \n  A loop starting at line 134 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST3, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 140 \n  A loop starting at line 140 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 180 \n  A loop starting at line 180 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_if.F90, Line = 189 \n  A loop starting at line 189 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0054 seconds\nCray Fortran : 225 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n/opt/cray/pe/cce/15.0.1/binutils/x86_64/x86_64-pc-linux-gnu/bin/ld: /tmp/pe_134267/parallel_if_1.o: in function `test2_':\nThe Cpu Module:(.text+0x5cb): undefined reference to `_cray$mt_execute_parallel'\n",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.466390148998471
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": true,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop.F90/parallel_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 11 \n  A loop starting at line 11 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 18 \n  A data region was created at line 18 and ending at line 23.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 18 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 23 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 19 \n  A region starting at line 19 and ending at line 22 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 19 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 22 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 20 \n  A loop starting at line 20 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 25 \n  A loop starting at line 25 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 25 \n  A loop starting at line 25 was vectorized.\n\n\nftn-6202 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 48 \n  A loop starting at line 48 was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 58 \n  A data region was created at line 58 and ending at line 69.\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 58 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 69 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 58 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 69 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 58 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 69 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 59 \n  A region starting at line 59 and ending at line 68 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 59 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 68 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 59 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 68 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 59 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, free at line 68 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 61 \n  A loop starting at line 61 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 65 \n  A loop starting at line 65 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 71 \n  A loop starting at line 71 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST2, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 71 \n  A loop starting at line 71 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 99 \n  A loop starting at line 99 was unwound.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop.F90, Line = 108 \n  A loop starting at line 108 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0052 seconds\nCray Fortran : 144 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41665120000834577
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46655499600456096,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_async.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_async.F90/parallel_loop_async.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_async.F90",
                    "config": 1,
                    "errors": "\n\nftn-802 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_async.F90, Line = 30, Column = 66 \n  Variable subobjects are not allowed as arguments for this clause or directive.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 91 source lines\nCray Fortran : 1 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11550419399281964
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_async.F90/parallel_loop_async.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_async.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31619448598939925
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.009693950007203966,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_auto.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_auto.F90/parallel_loop_auto.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 18.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 22 \n  A data region was created at line 22 and ending at line 27.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 27 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 23 \n  A region starting at line 23 and ending at line 26 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 23 \n  Variable \"x\" is used before it is defined.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 29 \n  A loop starting at line 29 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 29 \n  A loop starting at line 29 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 35 \n  A data region was created at line 35 and ending at line 40.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 40 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 36 \n  A region starting at line 36 and ending at line 39 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 37 \n  A loop starting at line 37 was unrolled 4 times.\n\n\nftn-6412 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 37 \n  A loop starting at line 37 will be redundantly executed.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 43 \n  A loop starting at line 43 was unrolled 4 times.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_auto.F90, Line = 69 \n  A loop starting at line 69 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0039 seconds\nCray Fortran : 96 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41750126602710225
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 1,
                    "runtime": 0.3665307990158908,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_gang.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_gang.F90/parallel_loop_gang.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 21 \n  A data region was created at line 21 and ending at line 26.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 22 \n  A region starting at line 22 and ending at line 25 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_gang.F90, Line = 53 \n  A loop starting at line 53 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41707432799739763
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3168098340102006,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_general.F90/parallel_loop_reduction_add_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 21 \n  A data region was created at line 21 and ending at line 26.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 21 \n  If not already present: allocate memory and copy variable \"total\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 22 \n  A region starting at line 22 and ending at line 25 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 22 \n  If not already present: allocate memory and copy variable \"total\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 27 \n  A loop starting at line 27 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 27 \n  A loop starting at line 27 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_general.F90, Line = 54 \n  A loop starting at line 54 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4162006079859566
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31648427600157447,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_loop.F90/parallel_loop_reduction_add_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 21 \n  A data region was created at line 21 and ending at line 36.\n\n\nftn-6422 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, free at line 36 (acc_share).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"d\" on accelerator, copy back at line 36 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 22 \n  A region starting at line 22 and ending at line 35 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, copy back at line 35 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 39 \n  A loop starting at line 39 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 39 \n  A loop starting at line 39 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 43 \n  A loop starting at line 43 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_loop.F90, Line = 69 \n  A loop starting at line 69 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0044 seconds\nCray Fortran : 96 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.466814751009224
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31674882999504916,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_add_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_add_vector_loop.F90/parallel_loop_reduction_add_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 22 \n  A data region was created at line 22 and ending at line 32.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 32 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 23 \n  A region starting at line 23 and ending at line 31 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_add_vector_loop.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41626309699495323
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31671669997740537,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_general.F90/parallel_loop_reduction_and_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 30 \n  A data region was created at line 30 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 30 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 31 \n  A region starting at line 31 and ending at line 34 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 31 \n  If not already present: allocate memory and copy variable \"results\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_general.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4160349400190171
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3161876529920846,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_loop.F90/parallel_loop_reduction_and_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 22 \n  A loop starting at line 22 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 37 \n  A data region was created at line 37 and ending at line 57.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"results\" to accelerator, copy back at line 57 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 57 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 38 \n  A region starting at line 38 and ending at line 56 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"results\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 39 \n  A loop starting at line 39 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 42 \n  A loop starting at line 42 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 47 \n  A loop starting at line 47 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 60 \n  A loop starting at line 60 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 66 \n  A loop starting at line 66 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 66 \n  A loop starting at line 66 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_loop.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46704282599966973
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316421399009414,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_and_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_and_vector_loop.F90/parallel_loop_reduction_and_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was vectorized.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 40 \n  A data region was created at line 40 and ending at line 50.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 40 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 50 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 40 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 50 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 41 \n  A region starting at line 41 and ending at line 49 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 41 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 49 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 41 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 49 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 42 \n  A loop starting at line 42 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 45 \n  A loop starting at line 45 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 54 \n  A loop starting at line 54 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_and_vector_loop.F90, Line = 83 \n  A loop starting at line 83 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0051 seconds\nCray Fortran : 110 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46702851000009105
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3666394419851713,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_general.F90/parallel_loop_reduction_bitand_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 23 \n  A loop starting at line 23 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 24 \n  A loop starting at line 24 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 24 \n  A loop starting at line 24 was vectorized as part of the loop starting at line 23.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 27 \n  A loop starting at line 27 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 37 \n  A data region was created at line 37 and ending at line 42.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 37 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 38 \n  A region starting at line 38 and ending at line 41 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 38 \n  If not already present: allocate memory and copy variable \"b\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 38 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 41 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 39 \n  A loop starting at line 39 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 45 \n  A loop starting at line 45 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_general.F90, Line = 73 \n  A loop starting at line 73 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0036 seconds\nCray Fortran : 100 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4168153660139069
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36720564699498937,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_loop.F90/parallel_loop_reduction_bitand_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 23 \n  A loop starting at line 23 was partially vectorized.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 27 \n  A loop starting at line 27 was fused with the loop starting at line 23.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 28 \n  A loop starting at line 28 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 28 \n  A loop starting at line 28 was vectorized as part of the loop starting at line 23.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 31 \n  A loop starting at line 31 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 34 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 39 \n  A loop starting at line 39 was unwound.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 45 \n  A data region was created at line 45 and ending at line 59.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 45 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 59 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 45 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 59 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 45 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 59 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 46 \n  A region starting at line 46 and ending at line 58 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 46 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 58 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 46 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 58 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 46 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 58 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 47 \n  A loop starting at line 47 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 50 \n  A loop starting at line 50 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 55 \n  A loop starting at line 55 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 63 \n  A loop starting at line 63 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 63 \n  A loop starting at line 63 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 69 \n  A loop starting at line 69 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 69 \n  A loop starting at line 69 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_loop.F90, Line = 95 \n  A loop starting at line 95 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0047 seconds\nCray Fortran : 122 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4673365729977377
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3664667689881753,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitand_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitand_vector_loop.F90/parallel_loop_reduction_bitand_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was collapsed into the loop starting at line 25.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was partially vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 26 \n  A loop starting at line 26 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 26 \n  A loop starting at line 26 was vectorized as part of the loop starting at line 25.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 29 \n  A loop starting at line 29 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 32 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 38 \n  A data region was created at line 38 and ending at line 48.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 38 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 48 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 38 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 48 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 39 \n  A region starting at line 39 and ending at line 47 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 39 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 47 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 39 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 47 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 43 \n  A loop starting at line 43 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 52 \n  A loop starting at line 52 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 52 \n  A loop starting at line 52 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitand_vector_loop.F90, Line = 79 \n  A loop starting at line 79 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0048 seconds\nCray Fortran : 106 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46700092899845913
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4670078310009558,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_general.F90/parallel_loop_reduction_bitor_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 23 \n  A loop starting at line 23 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 24 \n  A loop starting at line 24 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 24 \n  A loop starting at line 24 was vectorized as part of the loop starting at line 23.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 27 \n  A loop starting at line 27 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 35 \n  A data region was created at line 35 and ending at line 40.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 40 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 36 \n  A region starting at line 36 and ending at line 39 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 36 \n  If not already present: allocate memory and copy variable \"b\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 37 \n  A loop starting at line 37 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 42 \n  A loop starting at line 42 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 42 \n  A loop starting at line 42 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_general.F90, Line = 68 \n  A loop starting at line 68 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4164196989731863
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165434370166622,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_loop.F90/parallel_loop_reduction_bitor_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 26 \n  A loop starting at line 26 was fused with the loop starting at line 23.\n\n\nftn-6003 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 27 \n  A loop starting at line 27 was collapsed into the loop starting at line 28.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 28 \n  A loop starting at line 28 was partially vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 29 \n  A loop starting at line 29 was unrolled 4 times.\n\n\nftn-6208 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 29 \n  A loop starting at line 29 was vectorized as part of the loop starting at line 28.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 32 \n  A loop starting at line 32 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 35 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 41 \n  A data region was created at line 41 and ending at line 55.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 41 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 41 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 41 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 55 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 42 \n  A region starting at line 42 and ending at line 54 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 42 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 54 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 42 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 54 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 42 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 54 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 43 \n  A loop starting at line 43 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 46 \n  A loop starting at line 46 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 51 \n  A loop starting at line 51 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 59 \n  A loop starting at line 59 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 59 \n  A loop starting at line 59 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 65 \n  A loop starting at line 65 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 65 \n  A loop starting at line 65 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_loop.F90, Line = 91 \n  A loop starting at line 91 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0049 seconds\nCray Fortran : 118 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.46655252200434916
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31638098301482387,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitor_vector_loop.F90/parallel_loop_reduction_bitor_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6007 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was interchanged with the loop starting at line 24.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was vectorized.\n\n\nftn-6002 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 27 \n  A loop starting at line 27 was eliminated by optimization.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 30 \n  Variable \"a\" is used before it is defined.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 35 \n  A data region was created at line 35 and ending at line 45.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 45 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 35 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 45 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 36 \n  A region starting at line 36 and ending at line 44 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 44 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 36 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 44 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 40 \n  A loop starting at line 40 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 49 \n  A loop starting at line 49 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 49 \n  A loop starting at line 49 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitor_vector_loop.F90, Line = 76 \n  A loop starting at line 76 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 103 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4164566860126797
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.36646349300281145,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_general.F90/parallel_loop_reduction_bitxor_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 23 \n  A data region was created at line 23 and ending at line 28.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 24 \n  A region starting at line 24 and ending at line 27 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 24 \n  If not already present: allocate memory and copy variable \"b\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 30 \n  A loop starting at line 30 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_general.F90, Line = 56 \n  A loop starting at line 56 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41659432399319485
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167946560133714,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_loop.F90/parallel_loop_reduction_bitxor_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 23.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 25 \n  A loop starting at line 25 was fused with the loop starting at line 23.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 26 \n  A loop starting at line 26 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 28 \n  A data region was created at line 28 and ending at line 42.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 42 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 28 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 42 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 29 \n  A region starting at line 29 and ending at line 41 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 41 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 29 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 46 \n  A loop starting at line 46 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 46 \n  A loop starting at line 46 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 52 \n  A loop starting at line 52 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 52 \n  A loop starting at line 52 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_loop.F90, Line = 78 \n  A loop starting at line 78 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 105 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41630256999633275
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316525633999845,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_bitxor_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_bitxor_vector_loop.F90/parallel_loop_reduction_bitxor_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_bitxor_vector_loop.F90, Line = 64 \n  A loop starting at line 64 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 91 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.416569286986487
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3174846140027512,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_general.F90/parallel_loop_reduction_max_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 23 \n  A data region was created at line 23 and ending at line 28.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 24 \n  A region starting at line 24 and ending at line 27 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 24 \n  If not already present: allocate memory and copy variable \"maximum\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 30 \n  A loop starting at line 30 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_general.F90, Line = 56 \n  A loop starting at line 56 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 83 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41727992199594155
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31625773399719037,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_loop.F90/parallel_loop_reduction_max_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 37.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 37 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 37 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 24 \n  A region starting at line 24 and ending at line 36 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 36 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"maximum\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 36 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 40 \n  A loop starting at line 40 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_loop.F90, Line = 68 \n  A loop starting at line 68 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0043 seconds\nCray Fortran : 95 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41612707200692967
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3178902909858152,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_max_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_max_vector_loop.F90/parallel_loop_reduction_max_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6373 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 21 \n  A loop starting at line 21 with a trip count of 10 was unwound into 2 vector iterations.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 21 \n  A loop starting at line 21 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 23 \n  A data region was created at line 23 and ending at line 33.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"maximum\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 24 \n  A region starting at line 24 and ending at line 32 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy whole array \"maximum\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_max_vector_loop.F90, Line = 64 \n  A loop starting at line 64 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 91 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4161574479949195
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31654528898070566,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_general.F90/parallel_loop_reduction_min_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 22 \n  A data region was created at line 22 and ending at line 27.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 23 \n  A region starting at line 23 and ending at line 26 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 23 \n  If not already present: allocate memory and copy variable \"minimum\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 29 \n  A loop starting at line 29 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 29 \n  A loop starting at line 29 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_general.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4167336840182543
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3168588639819063,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_loop.F90/parallel_loop_reduction_min_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 25 \n  A data region was created at line 25 and ending at line 39.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"minimum\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 26 \n  A region starting at line 26 and ending at line 38 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"minimum\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 35 \n  A loop starting at line 35 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 43 \n  A loop starting at line 43 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 49 \n  A loop starting at line 49 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 49 \n  A loop starting at line 49 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_loop.F90, Line = 75 \n  A loop starting at line 75 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41635147100896575
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662075759784784,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_min_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_min_vector_loop.F90/parallel_loop_reduction_min_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 22 \n  A data region was created at line 22 and ending at line 32.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"minimum\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 23 \n  A region starting at line 23 and ending at line 31 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 31 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"minimum\" to accelerator, copy back at line 31 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_min_vector_loop.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41609795700060204
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31631116301286966,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_general.F90/parallel_loop_reduction_multiply_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 24 \n  A data region was created at line 24 and ending at line 29.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 29 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 25 \n  A region starting at line 25 and ending at line 28 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 25 \n  If not already present: allocate memory and copy variable \"multiplied_total\" to accelerator, copy back at line 28 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 28 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 31 \n  A loop starting at line 31 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 31 \n  A loop starting at line 31 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_general.F90, Line = 59 \n  A loop starting at line 59 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 86 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4160817769879941
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3171454799885396,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_loop.F90/parallel_loop_reduction_multiply_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 21 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 25 \n  A data region was created at line 25 and ending at line 39.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"totals\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 39 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 25 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 39 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 26 \n  A region starting at line 26 and ending at line 38 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"totals\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 27 \n  A loop starting at line 27 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 35 \n  A loop starting at line 35 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 43 \n  A loop starting at line 43 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_loop.F90, Line = 81 \n  A loop starting at line 81 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 108 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4666038980067242
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31675468100002035,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_multiply_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_multiply_vector_loop.F90/parallel_loop_reduction_multiply_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 19.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  A data region was created at line 24 and ending at line 34.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 24 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 34 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  A region starting at line 25 and ending at line 33 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 25 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 38 \n  A loop starting at line 38 was unrolled 6 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 38 \n  A loop starting at line 38 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_multiply_vector_loop.F90, Line = 65 \n  A loop starting at line 65 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 92 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4161557749903295
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3167622649925761,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_general.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_general.F90/parallel_loop_reduction_or_general.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 22 \n  A loop starting at line 22 was fused with the loop starting at line 21.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 30 \n  A data region was created at line 30 and ending at line 35.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 30 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 35 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 31 \n  A region starting at line 31 and ending at line 34 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 31 \n  If not already present: allocate memory and copy variable \"results\" to accelerator, copy back at line 34 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 31 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 37 \n  A loop starting at line 37 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 37 \n  A loop starting at line 37 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_general.F90, Line = 63 \n  A loop starting at line 63 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0035 seconds\nCray Fortran : 90 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3668440440087579
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31659376999596134,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_loop.F90/parallel_loop_reduction_or_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 32 \n  A loop starting at line 32 was vectorized.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 36 \n  A data region was created at line 36 and ending at line 56.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"results\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 36 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 56 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 37 \n  A region starting at line 37 and ending at line 55 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 37 \n  If not already present: allocate memory and copy whole array \"results\" to accelerator, copy back at line 55 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 38 \n  A loop starting at line 38 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 41 \n  A loop starting at line 41 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 46 \n  A loop starting at line 46 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 60 \n  A loop starting at line 60 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 60 \n  A loop starting at line 60 was vectorized.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 66 \n  A loop starting at line 66 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 66 \n  A loop starting at line 66 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_loop.F90, Line = 98 \n  A loop starting at line 98 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0045 seconds\nCray Fortran : 125 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4163983280013781
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31675859898678027,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_reduction_or_vector_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_reduction_or_vector_loop.F90/parallel_loop_reduction_or_vector_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 23 \n  A loop starting at line 23 was fused with the loop starting at line 20.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 31 \n  A data region was created at line 31 and ending at line 41.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 31 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 41 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 31 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 41 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 32 \n  A region starting at line 32 and ending at line 40 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 40 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 32 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 40 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 33 \n  A loop starting at line 33 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 36 \n  A loop starting at line 36 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 45 \n  A loop starting at line 45 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 45 \n  A loop starting at line 45 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_reduction_or_vector_loop.F90, Line = 72 \n  A loop starting at line 72 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 99 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4161605440021958
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3168322569981683,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_seq.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_seq.F90/parallel_loop_seq.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 18 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 20 \n  A data region was created at line 20 and ending at line 25.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 21 \n  A region starting at line 21 and ending at line 24 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 24 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 24 (acc_copy).\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 21 \n  Variable \"x\" is used before it is defined.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 22 \n  A loop starting at line 22 was unrolled 4 times.\n\n\nftn-6412 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 22 \n  A loop starting at line 22 will be redundantly executed.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 27 \n  A loop starting at line 27 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 27 \n  A loop starting at line 27 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_seq.F90, Line = 52 \n  A loop starting at line 52 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 79 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.416401552996831
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3667654680029955,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_tile.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_tile.F90/parallel_loop_tile.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_tile.F90",
                    "config": 1,
                    "errors": "\n\nftn-1342 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_tile.F90, Line = 28, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\n\nftn-1342 ftn: ERROR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_tile.F90, Line = 31, Column = 15 \n  Loop nests following an OpenMP or OpenACC construct with a TILE clause must be perfectly nested.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 94 source lines\nCray Fortran : 2 errors, 0 warnings, 0 other messages, 0 ansi\nCray Fortran : \"explain ftn-message number\" gives more information about each message.\n",
                    "export": false,
                    "output": "",
                    "result": 1,
                    "runtime": 0.11578343599103391
                },
                "post-compile commands": [],
                "pre-compile commands": [],
                "runtime": {
                    "export": false,
                    "system": 1
                },
                "testsuite_id": 1
            },
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -DT1 -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_tile.F90/parallel_loop_tile.F901 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_tile.F90",
                    "config": 1,
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31699664099141955
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.010015900974394754,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_vector.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_vector.F90/parallel_loop_vector.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 21 \n  A data region was created at line 21 and ending at line 26.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 22 \n  A region starting at line 22 and ending at line 25 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector.F90, Line = 53 \n  A loop starting at line 53 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4172307910048403
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31705443098326214,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_vector_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_vector_blocking.F90/parallel_loop_vector_blocking.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 20 \n  A loop starting at line 20 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 20 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 22 \n  A data region was created at line 22 and ending at line 34.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 34 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 22 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 34 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 23 \n  A region starting at line 23 and ending at line 33 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 23 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 33 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 25 \n  A loop starting at line 25 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 36 \n  A loop starting at line 36 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 36 \n  A loop starting at line 36 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_vector_blocking.F90, Line = 61 \n  A loop starting at line 61 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 88 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.416478767991066
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3162877800059505,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_worker.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_worker.F90/parallel_loop_worker.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 21 \n  A data region was created at line 21 and ending at line 26.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 26 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 22 \n  A region starting at line 22 and ending at line 25 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 25 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 25 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 28 \n  A loop starting at line 28 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker.F90, Line = 53 \n  A loop starting at line 53 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 80 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4167007649957668
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31613546499283984,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_loop_worker_blocking.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_loop_worker_blocking.F90/parallel_loop_worker_blocking.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 21 \n  A data region was created at line 21 and ending at line 33.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"b\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 21 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 21 \n  If not already present: allocate memory for user shaped variable \"c\" on accelerator, copy back at line 33 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 22 \n  A region starting at line 22 and ending at line 32 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 22 \n  If not already present: allocate memory and copy whole array \"c\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 35 \n  A loop starting at line 35 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 35 \n  A loop starting at line 35 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_loop_worker_blocking.F90, Line = 60 \n  A loop starting at line 60 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 87 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4165886419941671
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31669754500035197,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_present.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_present.F90/parallel_present.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_present.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_present.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 17.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_present.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_present.F90, Line = 22 \n  A region starting at line 22 and ending at line 27 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_present.F90, Line = 22 \n  If not already present: allocate memory and copy user shaped variable \"c\" to accelerator, copy back at line 27 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_present.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_present.F90, Line = 30 \n  A loop starting at line 30 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_present.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_present.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4164039899769705
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3164138070133049,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_private.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_private.F90/parallel_private.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90",
                    "config": 1,
                    "errors": "\n\nftn-6202 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 22 \n  A loop starting at line 22 was replaced by a library call.\n\n\nftn-6373 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 23 \n  A loop starting at line 23 with a trip count of 10 was unwound into 2 vector iterations.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 23 \n  A loop starting at line 23 was vectorized.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 26 \n  A region starting at line 26 and ending at line 38 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 38 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 26 \n  If not already present: allocate memory and copy whole array \"d\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6423 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 26 \n  Private array \"c\" was allocated to global memory.\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 26 \n  Variable \"y\" is used before it is defined.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the thread blocks.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 30 \n  A loop starting at line 30 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 34 \n  A loop starting at line 34 was unrolled 4 times.\n\n\nftn-6412 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 34 \n  A loop starting at line 34 will be redundantly executed.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 43 \n  A loop starting at line 43 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 43 \n  A loop starting at line 43 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_private.F90, Line = 70 \n  A loop starting at line 70 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0041 seconds\nCray Fortran : 97 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41613422601949424
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31632034899666905,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_reduction.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_reduction.F90/parallel_reduction.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_reduction.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_reduction.F90, Line = 20 \n  A data region was created at line 20 and ending at line 27.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_reduction.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 27 (acc_copyin).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_reduction.F90, Line = 21 \n  A region starting at line 21 and ending at line 26 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_reduction.F90, Line = 21 \n  If not already present: allocate memory and copy variable \"results\" to accelerator, copy back at line 26 (acc_copy).\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_reduction.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 26 (acc_copyin).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_reduction.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_reduction.F90, Line = 28 \n  A loop starting at line 28 was unrolled 4 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_reduction.F90, Line = 28 \n  A loop starting at line 28 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_reduction.F90, Line = 54 \n  A loop starting at line 54 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 81 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.41679148102412
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165510710095987,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_scalar_default_firstprivate.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_scalar_default_firstprivate.F90/parallel_scalar_default_firstprivate.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90",
                    "config": 1,
                    "errors": "\n\nftn-6008 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 20 \n  A loop starting at line 20 was unwound.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 24 \n  A loop starting at line 24 was fused with the loop starting at line 23.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 24 \n  A statement was replaced by a library call.\n\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 26 \n  A data region was created at line 26 and ending at line 33.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 26 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, free at line 33 (acc_copyin).\n\n\nftn-6420 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 26 \n  If not already present: allocate memory for user shaped variable \"b\" on accelerator, copy back at line 33 (acc_copyout).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 27 \n  A region starting at line 27 and ending at line 32 was placed on the accelerator.\n\n\nftn-6418 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, free at line 32 (acc_copyin).\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 27 \n  If not already present: allocate memory and copy whole array \"b\" to accelerator, copy back at line 32 (acc_copy).\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 29 \n  A loop starting at line 29 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 34 \n  A loop starting at line 34 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 34 \n  A loop starting at line 34 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_scalar_default_firstprivate.F90, Line = 62 \n  A loop starting at line 62 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 89 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4167656429926865
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316834221011959,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_switch.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_switch.F90/parallel_switch.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_switch.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_switch.F90, Line = 19 \n  A loop starting at line 19 was fused with the loop starting at line 18.\n\n\nftn-6231 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_switch.F90, Line = 19 \n  A statement was replaced by a library call.\n\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_switch.F90, Line = 21 \n  A loop starting at line 21 was fused with the loop starting at line 20.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_switch.F90, Line = 24 \n  A region starting at line 24 and ending at line 36 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_switch.F90, Line = 26 \n  A loop starting at line 26 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_switch.F90, Line = 75 \n  A loop starting at line 75 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0040 seconds\nCray Fortran : 102 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.4163615160214249
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.316311463015154,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_wait.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_wait.F90/parallel_wait.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_wait.F90",
                    "config": 1,
                    "errors": "\n\nftn-6004 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_wait.F90, Line = 18 \n  A loop starting at line 18 was fused with the loop starting at line 17.\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_wait.F90, Line = 22 \n  A region starting at line 22 and ending at line 27 was placed on the accelerator.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_wait.F90, Line = 24 \n  A loop starting at line 24 was partitioned across the threadblocks and the 128 threads within a threadblock.\n\n\nftn-6005 ftn: SCALAR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_wait.F90, Line = 30 \n  A loop starting at line 30 was unrolled 2 times.\n\n\nftn-6204 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_wait.F90, Line = 30 \n  A loop starting at line 30 was vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_wait.F90, Line = 55 \n  A loop starting at line 55 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0042 seconds\nCray Fortran : 82 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3662827069929335
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.31664229099988006,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ],
        "parallel_while_loop.F90": [
            {
                "compilation": {
                    "command": "ftn -h acc,noomp -h msgs -o /global/u1/v/vaidhy/OpenACCV-V/build/parallel_while_loop.F90/parallel_while_loop.F900 /global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.F90",
                    "config": 1,
                    "errors": "\n\nftn-6413 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 20 \n  A data region was created at line 20 and ending at line 38.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 20 \n  If not already present: allocate memory and copy user shaped variable \"a\" to accelerator, copy back at line 38 (acc_copy).\n\n\nftn-6405 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 21 \n  A region starting at line 21 and ending at line 37 was placed on the accelerator.\n\n\nftn-6416 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 21 \n  If not already present: allocate memory and copy whole array \"a\" to accelerator, copy back at line 37 (acc_copy).\n\n\nftn-7212 ftn: WARNING TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 21 \n  Variable \"avg\" is used before it is defined.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 23 \n  A loop starting at line 23 was partitioned across the thread blocks.\n\n\nftn-6412 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 25 \n  A loop starting at line 25 will be redundantly executed.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 28 \n  A loop starting at line 28 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6430 ftn: ACCEL TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 32 \n  A loop starting at line 32 was partitioned across the 128 threads within a threadblock.\n\n\nftn-6209 ftn: VECTOR TEST1, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 42 \n  A loop starting at line 42 was partially vectorized.\n\n\nftn-6008 ftn: SCALAR MAIN, File = ../../../global/u1/v/vaidhy/OpenACCV-V/Tests/parallel_while_loop.F90, Line = 69 \n  A loop starting at line 69 was unwound.\n\nCray Fortran : Version 15.0.1 (20230120205242_66f7391d6a03cf932f321b9f6b1d8612ef5f362c)\nCray Fortran : Compile time:  0.0038 seconds\nCray Fortran : 96 source lines\nCray Fortran : 0 errors, 0 warnings, 0 other messages, 0 ansi\n",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.467357774003176
                },
                "post-compile commands": [],
                "post-run commands": [],
                "pre-compile commands": [],
                "pre-run commands": [],
                "runtime": {
                    "errors": "",
                    "export": true,
                    "output": "",
                    "result": 0,
                    "runtime": 0.3165201139927376,
                    "system": 1
                },
                "testsuite_id": 1
            }
        ]
    },
    "summary": {
        "1": {
            "1": {
                "1": {
                    "acc_async_test.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_async_test_all.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 1
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyin.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "5": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "7": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyin_with_len.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "5": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "6": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "7": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyout.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "4": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        },
                        "5": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "acc_copyout_with_len.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 5
                        }
                    },
                    "acc_create_with_len.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "4": {
                            "result": "Pass",
                            "run_index": 5
                        }
                    },
                    "acc_delete.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_delete_with_len.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_get_device_num.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "acc_get_num_devices.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_init.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_is_present.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_is_present_with_len.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_on_device.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_num.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "acc_set_device_type.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "acc_shutdown.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "acc_update_device.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_update_device_with_len.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_update_self.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_update_self_with_len.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_wait.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_wait_all_async.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "acc_wait_async.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_and_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_divided_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_eqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_minus_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_neqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_or_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_plus_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_expr_times_x.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_iand_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_iand_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ior_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ior_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ixor_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_ixor_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_max_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_min_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_and_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_divided_expr.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_eqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_minus_expr.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_neqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_or_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_plus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_assign_x_times_expr.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_and_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_divided_x_assign.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_eqv_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_minus_x_assign.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_neqv_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_or_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_plus_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_expr_times_x_assign.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_iand_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_iand_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ior_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ior_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ixor_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_ixor_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_expr_list_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_max_x_expr_list_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_expr_list_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_expr_x_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_x_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_min_x_expr_list_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_and_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_divided_expr_assign.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_eqv_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_minus_expr_assign.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_neqv_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_or_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_plus_expr_assign.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_capture_x_times_expr_assign.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_and_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_and_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_divided_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_divided_x_end.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_eqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_eqv_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_minus_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_minus_x_end.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_neqv_x.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_neqv_x_end.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_or_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_or_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_plus_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_plus_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_times_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_expr_times_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_iand_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ior_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_ixor_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_list_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_max_x_expr_list_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_list_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_min_x_expr_list_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_and_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_and_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_divided_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_divided_x_end.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_eqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_eqv_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_minus_x.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_minus_x_end.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_neqv_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_neqv_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_or_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_or_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_plus_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_plus_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_times_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_expr_times_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_iand_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ior_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_ixor_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_list_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_max_x_expr_list_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_list_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_list_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_x.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_expr_x_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_list.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_min_x_expr_list_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_and_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_and_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_divided_expr.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_divided_expr_end.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_eqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_eqv_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_minus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_minus_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_neqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_neqv_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_or_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_or_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_plus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_plus_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_times_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_update_x_times_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_and_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_and_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_divided_expr.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_divided_expr_end.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "atomic_x_eqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_eqv_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_minus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_minus_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_neqv_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_neqv_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_or_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_or_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_plus_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_plus_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_times_expr.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "atomic_x_times_expr_end.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copy_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyin_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyout_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_copyout_reference_counts.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_create_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_present_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_with_changing_subscript.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "data_with_derived_type.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "declare_copyin.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_create.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_copy.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "declare_function_scope_copyin.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_copyout.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_create.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "declare_function_scope_present.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 2
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 3
                        }
                    },
                    "enter_data_copyin_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_data_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_data_create_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "enter_data_if.F90": {
                        "1": {
                            "result": "Runtime Error",
                            "run_index": 6
                        },
                        "2": {
                            "result": "Runtime Error",
                            "run_index": 6
                        },
                        "3": {
                            "result": "Runtime Error",
                            "run_index": 6
                        },
                        "4": {
                            "result": "Runtime Error",
                            "run_index": 6
                        },
                        "5": {
                            "result": "Runtime Error",
                            "run_index": 6
                        }
                    },
                    "exit_data.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_copyout_no_lower_bound.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_copyout_reference_counts.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "exit_data_delete_no_lower_bound.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 1
                        }
                    },
                    "exit_data_finalize.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Excluded From Run",
                            "run_index": -1
                        }
                    },
                    "kernels_async.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_copyin.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_copyout.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_default_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_if.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 5
                        },
                        "4": {
                            "result": "Compilation Failure",
                            "run_index": 4
                        }
                    },
                    "kernels_loop.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_independent.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_add_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_and_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitand_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitor_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_bitxor_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_max_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_min_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_multiply_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_reduction_or_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_seq.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_tile.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_vector_blocking.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_loop_worker_blocking.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_present.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "kernels_wait.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "loop_collapse.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "loop_no_collapse.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_async.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_copyin.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_copyout.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "3": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_create.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_default_copy.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_firstprivate.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_if.F90": {
                        "1": {
                            "result": "Unknown Section Result",
                            "run_index": -1
                        },
                        "2": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        },
                        "3": {
                            "result": "Compilation Failure",
                            "run_index": 7
                        }
                    },
                    "parallel_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        },
                        "2": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_async.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_auto.F90": {
                        "1": {
                            "result": "Runtime Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_gang.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_add_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_and_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitand_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitor_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_bitxor_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_max_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_min_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_multiply_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_general.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_reduction_or_vector_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_seq.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_tile.F90": {
                        "1": {
                            "result": "Compilation Failure",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_vector_blocking.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_loop_worker_blocking.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_present.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_private.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_reduction.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_scalar_default_firstprivate.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_switch.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_wait.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    },
                    "parallel_while_loop.F90": {
                        "1": {
                            "result": "Pass",
                            "run_index": 0
                        }
                    }
                }
            }
        }
    },
    "systems": [
        {
            "id": 1,
            "machine": "x86_64",
            "name": null,
            "node": "login09",
            "processor": "x86_64",
            "release": "5.14.21-150400.24.46_12.0.63-cray_shasta_c",
            "version": "#1 SMP Sun Mar 19 16:51:48 UTC 2023 (6e164f9)"
        }
    ],
    "testsuites": [
        {
            "acc_async_test.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n        \n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT)) async(1)\n        !$acc enter data copyin(d(1:LOOPCOUNT)) create(e(1:LOOPCOUNT)) async(2)\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1) wait(2)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            e(x) = c(x) + d(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(e(1:LOOPCOUNT)) async(1)\n\n\n        DO WHILE (acc_async_test(1) .eqv. .FALSE.)\n          CONTINUE\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .GT. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:async,runtime,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e\n        INTEGER :: errors\n        errors = 0\n        \n        !Initialization\n        CALL RANDOM_SEED()\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n          DO WHILE (acc_async_test(1) .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .GT. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e\n        INTEGER :: errors, async_val\n        INTEGER :: acc_get_default_async\n        async_val = acc_get_default_async()\n        errors = 0\n\n        !Initialization\n        CALL RANDOM_SEED()\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n          DO WHILE (acc_async_test(async_val) .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_async_test_all.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc enter data create(a(1:LOOPCOUNT,1:10), b(1:LOOPCOUNT,1:10), c(1:LOOPCOUNT,1:10), d(1:LOOPCOUNT,1:10), e(1:LOOPCOUNT,1:10))\n        DO y = 1, 10\n          !$acc update device(a(1:LOOPCOUNT,y:y), b(1:LOOPCOUNT,y:y), d(1:LOOPCOUNT,y:y)) async(y)\n          !$acc parallel present(a(1:LOOPCOUNT,y:y), b(1:LOOPCOUNT,y:y), c(1:LOOPCOUNT,y:y)) async(y)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x, y) = a(x, y) + b(x, y)\n            END DO\n          !$acc end parallel\n          !$acc parallel present(c(1:LOOPCOUNT,y:y), d(1:LOOPCOUNT,y:y),e(1:LOOPCOUNT,y:y)) async(y)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x, y) = c(x, y) + d(x, y)\n            END DO\n          !$acc end parallel\n          !$acc update host(e(1:LOOPCOUNT,y:y)) async(y)\n        END DO\n\n        DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n          CONTINUE\n        END DO\n\n        DO y = 1, 10\n          DO x = 1, LOOPCOUNT\n            IF (abs(e(x, y) - (a(x, y) + b(x, y) + d(x, y))) .GT. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:async,runtime,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT,1:10), d(1:LOOPCOUNT, 1:10)) copyout(c(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10))\n          DO x = 1, 10\n            !$acc parallel present(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10)) async(x)\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                c(y, x) = a(y, x) + b(y, x)\n              END DO\n            !$acc end parallel\n            !$acc parallel present(c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10)) async(x)\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                e(y, x) = c(y, x) + d(y, x)\n              END DO\n            !$acc end parallel\n          END DO\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, 10\n          DO y = 1, LOOPCOUNT\n            IF (abs(e(y, x) - (a(y, x) + b(y, x) + d(y, x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:async,runtime,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d, e !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(d)\n        c = 0\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10)) copyout(c(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10))\n          DO x = 1, 10\n            CALL acc_set_default_async(x)\n            !$acc parallel present(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10)) async\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                c(y, x) = a(y, x) + b(y, x)\n              END DO\n            !$acc end parallel\n            !$acc parallel present(c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10), e(1:LOOPCOUNT, 1:10)) async\n              !$acc loop\n              DO y = 1, LOOPCOUNT\n                e(y, x) = c(y, x) + d(y, x)\n              END DO\n            !$acc end parallel\n          END DO\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n        !$acc end data\n\n        DO x = 1, 10\n          DO y = 1, LOOPCOUNT\n            IF (abs(e(y, x) - (a(y, x) + b(y, x) + d(y, x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "async",
                            "runtime",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin.F90": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 1\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(a(1:LOOPCOUNT))\n        CALL acc_copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          a_copy(:) = a(:)\n          CALL RANDOM_NUMBER(b)\n          b_copy(:) = b(:)\n          c = 0\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x) - b_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,executable-data,construct-independent,compatibility-features,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcopyin(a(1:LOOPCOUNT))\n        CALL acc_pcopyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,executable-data,construct-independent,compatibility-features,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        \n        CALL acc_present_or_copyin(a(1:LOOPCOUNT))\n        CALL acc_present_or_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "executable-data",
                            "construct-independent",
                            "compatibility-features"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n!T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test6()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test6 = .FALSE.\n        ELSE\n          test6 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T6\n        LOGICAL :: test6\n#endif\n#ifndef T6\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test6()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 5\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n!T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test7()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          !Initialization\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          a_copy = a\n          b_copy = b\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          a = 0\n          b = 0\n\n          CALL acc_copyin(a(1:LOOPCOUNT))\n          CALL acc_copyin(b(1:LOOPCOUNT))\n\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test7 = .FALSE.\n        ELSE\n          test7 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T7\n        LOGICAL :: test7\n#endif\n#ifndef T7\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test7()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 6\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel async(1) present(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2) present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2) wait(1) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x)*a_host(x) + b_host(x)*b_host(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyin_async(c(1:LOOPCOUNT), 1)\n          !$acc exit data delete(c(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n      LOGICAL :: test4\n#endif\n#ifndef T4\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test4()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 3\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        CALL RANDOM_NUMBER(b)\n        b_copy = b\n        c = 0\n\n        CALL acc_copyin_async(a(1:LOOPCOUNT), 1)\n        CALL acc_copyin_async(b(1:LOOPCOUNT), 2)\n\n        a = 0\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n      LOGICAL :: test5\n#endif\n#ifndef T5\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test5()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 4\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_async_with_len.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel wait(1, 2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x)*a_host(x) + b_host(x)*b_host(x))) .gt. 4*PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          DO WHILE (acc_async_test_all() .eqv. .FALSE.)\n            CONTINUE\n          END DO\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEn\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyin_async(c(1), LOOPCOUNT*8, 1)\n          !$acc exit data delete(c(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT)) async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,async,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initialization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin_async(a(1), LOOPCOUNT*8, 1)\n        CALL acc_copyin_async(b(1), LOOPCOUNT*8, 2)\n\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc wait\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyin_with_len.F90": {
                "num tests": 7,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc Loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(a(1:LOOPCOUNT))\n        CALL acc_copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        !$acc data copy(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T2\n      LOGICAL :: test2\n#endif\n#ifndef T2\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test2()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 1\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) .eq. 1) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          a_copy = a\n          b_copy = b\n          c = 0\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          CALL acc_copyout(a(1:LOOPCOUNT))\n          CALL acc_copyout(b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x) - b_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T3\n      LOGICAL :: test3\n#endif\n#ifndef T3\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test3()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 2\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcopyin(a(1), LOOPCOUNT*8)\n        CALL acc_pcopyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T4\n      LOGICAL :: test4\n#endif\n#ifndef T4\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test4()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 3\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_present_or_copyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T5\n      LOGICAL :: test5\n#endif\n#ifndef T5\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test5()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 4\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "6": {
                        "content": "#ifndef T6\n!T6:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test6()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(a(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n        CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) + (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test6 = .FALSE.\n        ELSE\n          test6 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T6\n      LOGICAL :: test6\n#endif\n#ifndef T6\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test6()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 5\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "7": {
                        "content": "#ifndef T7\n!T7:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test7()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_copy, b_copy !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          a_copy = a\n          b_copy = b\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          a = 0\n          b = 0\n\n          CALL acc_copyin(a(1), LOOPCOUNT*8)\n          CALL acc_copyin(b(1), LOOPCOUNT*8)\n\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n        IF (errors .eq. 0) THEN\n          test7 = .FALSE.\n        ELSE\n          test7 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T7\n      LOGICAL :: test7\n#endif\n#ifndef T7\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test7()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 6\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END FUNCTION\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,data,executable-data,construct-independent,devonly,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n\n        devtest(1) = .TRUE.\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_copyout(c(1:LOOPCOUNT))\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "devonly",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,data,executable-data,construct-independent,reference-counting,V:2.5-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(c(1:LOOPCOUNT))\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:runtime,data,executable-data,construct-independent,reference-counting,devonly,V:2.5-2.7\n      LOGICAL FUNCTION test5()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          SEEDDIM(1) = 1\n#         ifdef SEED\n          SEEDDIM(1) = SEED\n#         endif\n          CALL RANDOM_SEED(PUT=SEEDDIM)\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data create(c(1:LOOPCOUNT))\n          !$acc enter data create(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_copyout(c(1:LOOPCOUNT))\n          !$acc exit data delete(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "reference-counting",
                            "devonly"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_async(c(1:LOOPCOUNT), 1)\n          CALL acc_copyout_async(f(1:LOOPCOUNT), 2)\n        !$acc end data\n        !$acc wait\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_copyout_async(f(1), LOOPCOUNT*8, 2)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout_finalize(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_finalize_async(c(1:LOOPCOUNT), 1)\n          CALL acc_copyout_finalize_async(f(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_copyout_finalize_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_copyout_finalize_async(f(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_finalize_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout_finalize(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_copyout_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c= 0\n\n        CALL acc_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_pcreate(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_present_or_create(c(1:LOOPCOUNT))\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          CALL acc_create_async(c(1:LOOPCOUNT), 1)\n          CALL acc_create_async(f(1:LOOPCOUNT), 2)\n          !$acc data present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                f(x) = d(x) + e(x)\n              END DO\n            !$acc end parallel\n            !$acc wait\n          !$acc end data\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_async_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          CALL acc_create_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_create_async(f(1), LOOPCOUNT*8, 2)\n          !$acc data present(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                f(x) = d(x) + e(x)\n              END DO\n            !$acc end parallel\n            !$acc wait\n          !$acc end data\n        !$acc end data\n\n        !$acc exit data copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_create_with_len.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n        #ifdef SEED\n        SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_create(c(1), LOOPCOUNT*8)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel present(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER :: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#ifdef SEED\n        SEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#ifdef SEED\n        SEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:runtime,compatibility-features,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#ifdef SEED\n        SEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "runtime",
                            "compatibility-features",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1:LOOPCOUNT))\n        CALL acc_delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER:: x\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1:LOOPCOUNT))\n        CALL acc_delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_async(a(1:LOOPCOUNT), 1)\n          CALL acc_delete_async(b(1:LOOPCOUNT), 1)\n          CALL acc_delete_async(d(1:LOOPCOUNT), 2)\n          CALL acc_delete_async(e(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c!Data\n        INTEGER,DIMENSION(1) :: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) == 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_delete_async(c(1:LOOPCOUNT), 1)\n          !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_async(a(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_async(b(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_async(d(1), LOOPCOUNT*8, 2)\n          CALL acc_delete_async(e(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) == 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          CALL acc_delete_async(c(1), LOOPCOUNT*8, 1)\n          !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n          !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1:LOOPCOUNT))\n        CALL acc_delete_finalize(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1:LOOPCOUNT))\n        CALL acc_delete_finalize(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_finalize_async(a(1:LOOPCOUNT), 1)\n          CALL acc_delete_finalize_async(b(1:LOOPCOUNT), 1)\n          CALL acc_delete_finalize_async(d(1:LOOPCOUNT), 2)\n          CALL acc_delete_finalize_async(e(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize_async(c(1:LOOPCOUNT), 1)\n\n        !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_delete_finalize_async(a(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_finalize_async(b(1), LOOPCOUNT*8, 1)\n          CALL acc_delete_finalize_async(d(1), LOOPCOUNT*8, 2)\n          CALL acc_delete_finalize_async(e(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,async,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize_async(c(1), LOOPCOUNT*8, 1)\n\n        !$acc enter data copyin(c(1:LOOPCOUNT)) async(1)\n        !$acc data present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_finalize_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1), LOOPCOUNT*8)\n        CALL acc_delete_finalize(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete_finalize(a(1), LOOPCOUNT*8)\n        CALL acc_delete_finalize(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_delete_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1), LOOPCOUNT*8)\n        CALL acc_delete(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        CALL acc_copyin(a(1:LOOPCOUNT))\n        CALL acc_copyin(b(1:LOOPCOUNT))\n\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        CALL acc_delete(a(1), LOOPCOUNT*8)\n        CALL acc_delete(b(1), LOOPCOUNT*8)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2**1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_free.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,V:3.3\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        REAL(8),DIMENSION(LOOPCOUNT):: initial_memory, final_memory !Data\n        INTEGER, POINTER :: a(:)\n        INTEGER :: errors = 0\n\n        initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n        \n        ALLOCATE(a(n))\n\n        acc_free(a)\n\n        final_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory);\n\n        ALLOCATE(a(N))\n\n        IF (final_memory .lt. (initial_memory + size(a))) THEN\n            errors = errors + 1\n        END IF\n\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n    LOGICAL :: test1\n#endif\n#ifndef T1\n    DO testrun = 1, NUM_TEST_CALLS\n      failed = failed .or. test1()\n    END DO\n    IF (failed) THEN\n      failcode = failcode + 2 ** 0\n      failed = .FALSE.\n    END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data"
                        ],
                        "versions": [
                            "3.3"
                        ]
                    }
                }
            },
            "acc_get_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,internal-control-values,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, holder !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        INTEGER :: acc_get_default_async\n        errors = 0\n        holder = acc_get_default_async()\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(holder)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (acc_get_default_async() .lt. 0) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER :: errors\n        errors = 0\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            CALL acc_set_device_num(x, acc_get_device_type())\n            IF (acc_get_device_num(acc_get_device_type()) .ne. x) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_num_devices.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors\n        errors = 0\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          IF (acc_get_num_devices(acc_get_device_type()) .eq. 0) THEN\n            errors = errors + 1\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,nonvalidating,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: output\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          output = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_memory)\n          output = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory)\n        END IF\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_get_property_string.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,nonvalidating,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        CHARACTER(len=:),ALLOCATABLE :: output1\n        CHARACTER(len=:),ALLOCATABLE :: output2\n        CHARACTER(len=:),ALLOCATABLE :: output3\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          ! Hopefully, the string is long enough:\n          allocate(character(len=1024) :: output1, output2, output3)\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), &\n                                                          acc_property_name, output1)\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), &\n                                                          acc_property_vendor, output2)\n          CALL acc_get_property_string(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), &\n                                                          acc_property_driver, output3)\n        END IF\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_init.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_init(acc_get_device_type())\n        END IF\n\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,devonly,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors\n        errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        IF (acc_is_present(a(1:LOOPCOUNT)) .eqv. .FALSE.) THEN\n          errors = errors + 1\n          PRINT*, 1\n        END IF\n        !$acc exit data delete(a(1:LOOPCOUNT))\n\n        IF (devtest(1) .eq. 1) THEN\n          IF (acc_is_present(a(1:LOOPCOUNT)) .eqv. .TRUE.) THEN\n            errors = errors + 1\n            PRINT*, 2\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_is_present_with_len.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,devonly,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        IF (acc_is_present(a(1), LOOPCOUNT*8) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n        !$acc exit data delete(a(1:LOOPCOUNT))\n\n        IF (devtest(1) .eq. 1) THEN\n          IF (acc_is_present(a(1), LOOPCOUNT*8) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "devonly",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_malloc.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:3.3\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        REAL(8),DIMENSION(LOOPCOUNT):: initial_memory, final_memory !Data\n        INTEGER, POINTER :: a(:)\n        INTEGER :: errors = 0\n\n        initial_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory)\n        \n        acc_malloc(a(N))\n\n        IF (initial_memory .ne. 0) THEN\n          test1 = .FALSE.\n        END IF\n\n        final_memory = acc_get_property(acc_get_device_num(acc_get_device_type()), acc_get_device_type(), acc_property_free_memory)\n\n        DO x = 1, LOOPCOUNT\n          IF (final_memory + N * sizeof(a(1)) .gt. initial_memory) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        acc_free(a(N))\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "3.3"
                        ]
                    }
                }
            },
            "acc_map_data.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:3.3\n    LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors = 0\n        INTEGER :: x,i\n        !Initilization\n        SEEDDIM(1) = 1\n        #ifdef SEED\n            SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        \n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        CALL acc_map_data(C_LOC(c), C_LOC(d), LOOPCOUNT)\n\n        !$acc data copyin(a, b) present(c)\n            !$acc parallel\n                !$acc loop\n                DO i = 1, LOOPCOUNT\n                    c(i) = a(i) + b(i)\n                END DO\n                !$acc end loop\n            !$acc end parallel\n        !$acc end data\n\n\n        !$acc update host(c(0:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n            IF (ABS(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            END IF\n        END DO\n\n        CALL acc_unmap_data(c)\n        CALL acc_free(d)\n\n        IF (errors .eq. 0) THEN\n            test1 = .FALSE.\n        ELSE\n            test1 = .TRUE.\n        END IF\n    END\n#endif\n#ifndef T1\n    LOGICAL :: test1\n#endif\n#ifndef T1\n    DO testrun = 1, NUM_TEST_CALLS\n      failed = failed .or. test1()\n    END DO\n    IF (failed) THEN\n      failcode = failcode + 2 ** 0\n      failed = .FALSE.\n    END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "3.3"
                        ]
                    }
                }
            },
            "acc_on_device.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,present,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors\n        INTEGER :: device_type\n        errors = 0\n        device_type = acc_get_device_type()\n        IF (device_type .ne. acc_device_none) THEN\n          !$acc parallel\n            IF (acc_on_device(device_type) .eqv. .FALSE.) THEN\n              errors = errors + 1\n            END IF\n          !$acc end parallel\n        ELSE\n          !$acc parallel\n            IF (acc_on_device(acc_device_host) .eqv. .FALSE.) THEN\n              errors = errors + 1\n            END IF\n          !$acc end parallel\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "present"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a_host = a\n        b_host = b\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_set_default_async(1)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_set_default_async(2)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x) * a_host(x) + b_host(x) * b_host(x))) .gt. 4 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(:, :),ALLOCATABLE :: host_copy\n        INTEGER :: errors = 0\n\n        CALL RANDOM_SEED\n        ALLOCATE(host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT))\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          !host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT)\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            DO y = 1, LOOPCOUNT\n              CALL RANDOM_NUMBER(a)\n              host_copy(x, :) = a\n            END DO\n            call acc_set_device_num(x, acc_get_device_type())\n            !$acc enter data copyin(a(1:LOOPCOUNT))\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            call acc_set_device_num(x, acc_get_device_type())\n            !$acc data present(a(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(y) = a(y) + 1\n                END DO\n              !$acc end parallel\n            !$acc end data\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            call acc_set_device_num(x, acc_get_device_type())\n            !$acc exit data copyout(a(1:LOOPCOUNT))\n            DO y = 1, LOOPCOUNT\n              IF (abs(a(y) - (host_copy(x, y) + 1)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_set_device_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n        INTEGER :: device_type\n\n        device_type = acc_get_device_type()\n        CALL acc_set_device_type(device_type)\n        IF (acc_get_device_type() .ne. device_type) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_shutdown.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          CALL acc_shutdown(acc_get_device_type())\n        END IF\n\n        test1 = .FALSE.\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_unmap_data.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,V:3.3\n    LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        REAL(8),DIMENSION(LOOPCOUNT) :: a, b, c, d, e !Data\n        INTEGER :: errors = 0\n        INTEGER :: x,i\n\n        !Initilization \n        SEEDDIM(1) = 1\n        #ifdef SEED\n            SEEDDIM(1) = SEED\n        #endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        CALL acc_map_data(C_LOC(c), C_LOC(d), LOOPCOUNT)\n\n        !$acc data copyin(a(0:LOOPCOUNT), b(0:LOOPCOUNT)) present(c(0:LOOPCOUNT)) copyout(c(0:LOOPCOUNT))\n            !$acc parallel\n                !$acc loop\n                    DO i = 0, LOOPCOUNT\n                        c(x) = a(x) + b(x)\n                    END DO\n                !$acc end loop\n            !$acc end parallel\n        !$acc end data \n\n        !$acc update host(c(0:n))\n                    \n        DO x = 0, LOOPCOUNT\n            IF (ABS(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n                errors = errors + 1\n            END IF\n        END DO\n\n        CALL acc_unmap_data(C_LOC(c))\n        CALL acc_free(C_LOC(d))\n\n        IF (errors .eq. 0) THEN\n            test1 = .FALSE.\n        ELSE\n            test1 = .TRUE.\n        END IF\n    END\n#endif\n#ifndef T1\n    LOGICAL :: test1\n#endif\n#ifndef T1\n    DO testrun = 1, NUM_TEST_CALLS\n      failed = failed .or. test1()\n    END DO\n    IF (failed) THEN\n      failcode = failcode + 2 ** 0\n      failed = .FALSE.\n    END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "3.3"
                        ]
                    }
                }
            },
            "acc_update_device.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) create(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          CALL acc_update_device(a(1:LOOPCOUNT))\n          CALL acc_update_device(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_update_device_async(a(1:LOOPCOUNT), 1)\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_device_async(b(1:LOOPCOUNT), 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(a(1:LOOPCOUNT), 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(b(1:LOOPCOUNT), 2)\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a_host = a\n        b_host = b\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          CALL acc_update_device_async(a(1), LOOPCOUNT*8, 1)\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_device_async(b(1), LOOPCOUNT*8, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        INTEGER :: errors\n        errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(a(1), LOOPCOUNT*8, 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device_async(b(1), LOOPCOUNT*8, 2)\n            !$acc parallel async(1), wait(2)\n              !$acc loop\n               DO x = 1, LOOPCOUNT\n                 c(x) = a(x) + b(x)\n               END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_device_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) create(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          CALL acc_update_device(a(1), LOOPCOUNT*8)\n          CALL acc_update_device(b(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(a(1), LOOPCOUNT*8)\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_device(b(1), LOOPCOUNT*8)\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(c(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(a(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self_async(c(1:LOOPCOUNT), 1)\n          CALL acc_update_self_async(d(1:LOOPCOUNT), 2)\n          !$acc wait\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x) - (a(x) * b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(a(1:LOOPCOUNT), 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(b(1:LOOPCOUNT), 2)\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) * b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - ((a(x) + 1) * (b(x) + 1))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_async_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self_async(c(1), LOOPCOUNT*8, 1)\n          CALL acc_update_self_async(d(1), LOOPCOUNT*8, 2)\n          !$acc wait\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x) - (a(x) * b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,devonly,async,construct-independent,update,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d !Data\n        INTEGER,DIMENSION(1):: devtest\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) * a(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(a(1), LOOPCOUNT*8, 1)\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) * b(x)\n              END DO\n            !$acc end parallel\n            CALL acc_update_self_async(b(1), LOOPCOUNT*8, 2)\n            !$acc parallel async(1)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                a(x) = a(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) + 1\n              END DO\n            !$acc end parallel\n            !$acc parallel async(1) wait(2)\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) * b(x)\n              END DO\n            !$acc end parallel\n            !$acc wait(1)\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - ((a(x) + 1) * (b(x) + 1))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "devonly",
                            "async",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_update_self_with_len.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(c(1), LOOPCOUNT*8)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,data,executable-data,construct-independent,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyout(c(1:LOOPCOUNT)) copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(a(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          CALL acc_update_self(b(1), LOOPCOUNT*8)\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "data",
                            "executable-data",
                            "construct-independent",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data  copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT)) async(1)\n        !$acc enter data copyin(d(1:LOOPCOUNT)) create(e(1:LOOPCOUNT)) async(2)\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc parallel present(c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT)) async(1) wait(2)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            e(x) = c(x) + d(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(e(1:LOOPCOUNT)) async(1)\n\n        CALL acc_wait(1)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT), d(1:LOOPCOUNT))\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, a_host, b_host, c_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n        d = 0\n        a_host = a\n        b_host = b\n        c_host = c\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) * c(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all()\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = a(x) + b(x) + c(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(d(x) - ((a_host(x) * a_host(x)) + (b_host(x) * b_host(x)) + (c_host(x) * c_host(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_all_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g, h, i, j, k !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: a_host, d_host, g_host\n        REAL(8) :: RAND\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        CALL RANDOM_NUMBER(g)\n        CALL RANDOM_NUMBER(h)\n        i = 0\n        j = 0\n        k = 0\n        a_host = a\n        d_host = d\n        g_host = g\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), g(1:LOOPCOUNT), h(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), f(1:LOOPCOUNT), i(1:LOOPCOUNT), j(1:LOOPCOUNT)) copyout(k(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              i(x) = g(x) + h(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all_async(4)\n          !$acc parallel async(4)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              j(x) = c(x) + f(x) + i(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = b(x) * c(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              d(x) = e(x) * f(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = h(x) * i(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_all_async(4)\n          !$acc parallel async(4)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              k(x) = j(x) + a(x) + d(x) + g(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(4)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = a_host(x) + b(x) + d_host(x) + e(x) + g_host(x) + h(x)\n          temp = temp + (b(x) * (a_host(x) + b(x))) + (e(x) * (d_host(x) + e(x))) + (h(x) * (g_host(x) + h(x)))\n          IF (abs(k(x) - temp) .gt. PRECISION * 10) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "acc_wait_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,async,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g, h, i !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        CALL RANDOM_NUMBER(g)\n        h = 0\n        i = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), g(1:LOOPCOUNT)) create(c(1:LOOPCOUNT), f(1:LOOPCOUNT), h(1:LOOPCOUNT)) copyout(i(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n          !$acc end parallel\n          CALL acc_wait_async(1, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              h(x) = c(x) + g(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          CALL acc_wait_async(1, 2)\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              i(x) = h(x) + f(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(2)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(i(x) - (a(x) + b(x) + g(x) + d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "async",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n        LOGICAL :: init\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        REAL(8),DIMENSION(10):: passed_b\n        REAL(8) :: holder\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL:: init\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL:: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 1\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER,DIMENSION(10):: passed_a, passed_b\n        INTEGER:: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            DO z = 1, 8\n              IF (randoms(x, y, z) .lt. .933) THEN\n                a(x, y) = a(x, y) + ISHFT(1, z - 1)\n              END IF\n            END DO\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = iand(a(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          DO y = 0, 7\n            init = init + ISHFT(1, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .lt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 0, 7\n      totals(x) = totals(x) + ISHFT(1, y)\n      totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = iand(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    DO y = 0, 7\n      init = init + ISHFT(1, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ior(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ior(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ieor(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\nLOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = ieor(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  c(x, y) = totals(x)\n                  totals(x) = max(a(x, y), b(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = max(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n      LOGICAL :: test1\n#endif\n#ifndef T1\n      DO testrun = 1, NUM_TEST_CALLS\n        failed = failed .or. test1()\n      END DO\n      IF (failed) THEN\n        failcode = failcode + 2 ** 0\n        failed = .FALSE.\n      END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = max(a(x, y), totals(x))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = max(totals(x), a(x, y))\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\nIMPLICIT NONE\nINCLUDE \"acc_testsuite.Fh\"\nINTEGER :: x, y !Iterators\nREAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\nREAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\nREAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\nREAL(8):: init\nLOGICAL IS_POSSIBLE\nINTEGER :: errors = 0\n\n!Initilization\nSEEDDIM(1) = 1\n#ifdef SEED\nSEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  c(x, y) = totals(x)\n                  totals(x) = min(a(x, y), b(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = min(a(x, y), totals(x))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  b(x, y) = totals(x)\n                  totals(x) = min(totals(x), a(x, y))\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n      IMPLICIT NONE\n      INCLUDE \"acc_testsuite.Fh\"\n      INTEGER :: x, y !Iterators\n      REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n      REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n      REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n      REAL(8):: init\n      LOGICAL IS_POSSIBLE\n      INTEGER :: errors = 0\n\n      !Initilization\n      SEEDDIM(1) = 1\n#     ifdef SEED\n      SEEDDIM(1) = SEED\n#     endif\n      CALL RANDOM_SEED(PUT=SEEDDIM)\n\n      CALL RANDOM_NUMBER(a)\n      CALL RANDOM_NUMBER(b)\n\n      totals = 1\n      totals_comparison = 1\n\n      !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            DO y = 1, 10\n              !$acc atomic capture\n                c(x, y) = totals(x)\n                totals(x) = min(totals(x), a(x, y), b(x, y))\n              !$acc end atomic\n            END DO\n          END DO\n        !$acc end parallel\n      !$acc end data\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n        END DO\n      END DO\n      DO x = 1, LOOPCOUNT\n        IF (totals_comparison(x) .NE. totals(x)) THEN\n          errors = errors + 1\n          WRITE(*, *) totals_comparison(x)\n        END IF\n      END DO\n\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          passed_a(y) = a(x, y)\n          passed_b(y) = b(x, y)\n          passed_c(y) = c(x, y)\n        END DO\n        init = 1\n        IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n      END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\nLOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER :: errors = 0\n  LOGICAL :: init\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) < .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .AND. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed\n  REAL(8),DIMENSION(10):: passed_b\n  REAL(8) :: holder\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) / a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL:: init\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .EQV. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) - a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .NEQV. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL:: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) .OR. a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) + a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) + a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_assign_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n  totals_comparison = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            b(x, y) = totals(x)\n            totals(x) = totals(x) * a(x, y)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) * a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 1\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_and_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: b\n        LOGICAL IS_POSSIBLE\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .AND. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_divided_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        REAL(8),DIMENSION(10):: passed_b\n        REAL(8) :: holder\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) / totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          holder = 1\n          IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_eqv_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL:: init\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .EQV. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_minus_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        LOGICAL IS_POSSIBLE_2\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) - totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_neqv_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_or_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        LOGICAL,DIMENSION(10):: passed_a, passed_b\n        LOGICAL IS_POSSIBLE\n        LOGICAL:: init\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) .OR. totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = .FALSE.\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_plus_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) + totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_expr_times_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = a(x, y) * totals(x)\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 1\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_iand_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER,DIMENSION(10):: passed_a, passed_b\n        INTEGER:: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            DO z = 1, 8\n              IF (randoms(x, y, z) .lt. .933) THEN\n                a(x, y) = a(x, y) + ISHFT(1, z - 1)\n              END IF\n            END DO\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = iand(a(x, y), totals(x))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          DO y = 0, 7\n            init = init + ISHFT(1, y)\n          END DO\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_iand_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .lt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 0, 7\n      totals(x) = totals(x) + ISHFT(1, y)\n      totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = iand(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = iand(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    DO y = 0, 7\n      init = init + ISHFT(1, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ior_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ior(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ior_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .933) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ior(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ior(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ixor_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ieor(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_ixor_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y, z !Iterators\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 8):: randoms\n  INTEGER,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER,DIMENSION(10):: passed_a, passed_b\n  INTEGER:: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  a = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 8\n        IF (randoms(x, y, z) .gt. .5) THEN\n          a(x, y) = a(x, y) + ISHFT(1, z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = ieor(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = ieor(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_expr_list_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = max(a(x, y), b(x, y), totals(x))\n                  c(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = max(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = max(a(x, y), totals(x))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = max(totals(x), a(x, y))\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = max(totals_comparison(x), a(x, y))\n    END DO\n  END DO\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_max_x_expr_list_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\nIMPLICIT NONE\nINCLUDE \"acc_testsuite.Fh\"\nINTEGER :: x, y !Iterators\nREAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\nREAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\nREAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\nREAL(8):: init\nLOGICAL IS_POSSIBLE\nINTEGER :: errors = 0\n\n!Initilization\nSEEDDIM(1) = 1\n#ifdef SEED\nSEEDDIM(1) = SEED\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_expr_list_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(a(x, y), b(x, y), totals(x))\n                  c(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n            passed_c(y) = c(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_expr_x_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(a(x, y), totals(x))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_x_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        REAL(8),DIMENSION(10):: passed_a, passed_b\n        REAL(8):: init\n        LOGICAL IS_POSSIBLE\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic capture\n                  totals(x) = min(totals(x), a(x, y))\n                  b(x, y) = totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = min(totals_comparison(x), a(x, y))\n          END DO\n        END DO\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed_a(y) = a(x, y)\n            passed_b(y) = b(x, y)\n          END DO\n          init = 0\n          IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_min_x_expr_list_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n      IMPLICIT NONE\n      INCLUDE \"acc_testsuite.Fh\"\n      INTEGER :: x, y !Iterators\n      REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c !Data\n      REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n      REAL(8),DIMENSION(10):: passed_a, passed_b, passed_c\n      REAL(8):: init\n      LOGICAL IS_POSSIBLE\n      INTEGER :: errors = 0\n\n      !Initilization\n      SEEDDIM(1) = 1\n#     ifdef SEED\n      SEEDDIM(1) = SEED\n#     endif\n      CALL RANDOM_SEED(PUT=SEEDDIM)\n\n      CALL RANDOM_NUMBER(a)\n      CALL RANDOM_NUMBER(b)\n\n      totals = 1\n      totals_comparison = 1\n\n      !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT, 1:10))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            DO y = 1, 10\n              !$acc atomic capture\n                totals(x) = min(totals(x), a(x, y), b(x, y))\n                c(x, y) = totals(x)\n              !$acc end atomic\n            END DO\n          END DO\n        !$acc end parallel\n      !$acc end data\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          totals_comparison(x) = min(totals_comparison(x), a(x, y), b(x, y))\n        END DO\n      END DO\n      DO x = 1, LOOPCOUNT\n        IF (totals_comparison(x) .NE. totals(x)) THEN\n          errors = errors + 1\n          WRITE(*, *) totals_comparison(x)\n        END IF\n      END DO\n\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          passed_a(y) = a(x, y)\n          passed_b(y) = b(x, y)\n          passed_c(y) = c(x, y)\n        END DO\n        init = 1\n        IF (IS_POSSIBLE(passed_a, passed_b, passed_c, 10, init) .eqv. .FALSE.) THEN\n          errors = errors + 1\n        END IF\n      END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_and_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  INTEGER :: errors = 0\n  LOGICAL :: init\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) < .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .AND. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (.FALSE. .eqv. IS_POSSIBLE(a(x, 1:10), b(x, 1:10), 10, .FALSE.)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_divided_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed\n  REAL(8),DIMENSION(10):: passed_b\n  REAL(8) :: holder\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) / a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE(passed, totals(x), 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    holder = 1\n    IF (IS_POSSIBLE_2(passed, passed_b, 10, holder) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_eqv_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL:: init\n  INTEGER :: errors = 0\n  LOGICAL IS_POSSIBLE\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .EQV. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_minus_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  LOGICAL IS_POSSIBLE\n  LOGICAL IS_POSSIBLE_2\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT, 1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) - a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, totals(x), 10, 0) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE_2(passed_a, passed_b, 10, init) .EQV. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_neqv_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .5) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .NEQV. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, .FALSE.) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_or_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  LOGICAL,DIMENSION(10):: passed_a, passed_b\n  LOGICAL IS_POSSIBLE\n  LOGICAL:: init\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      IF (randoms(x, y) > .933) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  totals = .FALSE.\n  totals_comparison = .FALSE.\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) .OR. a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NEQV. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = .FALSE.\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_plus_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 0\n  totals_comparison = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) + a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) + a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 0\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .FALSE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_capture_x_times_expr_assign.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, y !Iterators\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b !Data\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n  REAL(8),DIMENSION(10):: passed_a, passed_b\n  REAL(8):: init\n  LOGICAL IS_POSSIBLE\n  INTEGER :: errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  totals = 1\n  totals_comparison = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT,1:10))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        DO y = 1, 10\n          !$acc atomic capture\n            totals(x) = totals(x) * a(x, y)\n            b(x, y) = totals(x)\n          !$acc end atomic\n        END DO\n      END DO\n    !$acc end parallel\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      totals_comparison(x) = totals_comparison(x) * a(x, y)\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    IF (totals_comparison(x) .NE. totals(x)) THEN\n      errors = errors + 1\n      WRITE(*, *) totals_comparison(x)\n    END IF\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      passed_a(y) = a(x, y)\n      passed_b(y) = b(x, y)\n    END DO\n    init = 1\n    IF (IS_POSSIBLE(passed_a, passed_b, 10, init) .eqv. .TRUE.) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .AND. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_and_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) / totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_divided_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .EQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_eqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) - totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_minus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .NEQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_neqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .OR. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_or_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) + totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_plus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) * totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_expr_times_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_iand_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ior_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_ixor_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_max_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_min_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_and_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .AND. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_and_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .AND. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) / totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_divided_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        REAL(8),DIMENSION(10):: passed\n        INTEGER :: errors = 0\n        LOGICAL IS_POSSIBLE\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) / totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 1) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_eqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .EQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_eqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .EQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) - totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_minus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL IS_POSSIBLE\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals\n        INTEGER :: errors = 0\n        REAL(8),DIMENSION(10):: passed\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) - totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            passed(y) = a(x, y)\n          END DO\n          IF (IS_POSSIBLE(passed, totals(x), 10, 0) .eqv. .FALSE.) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_neqv_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .NEQV. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_neqv_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .NEQV. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_or_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .OR. totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_or_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) .OR. totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) + totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_plus_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) + totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_times_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) * totals(x)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_expr_times_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = a(x, y) * totals(x)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_iand_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .gt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          DO y = 0, 7\n            totals(x) = totals(x) + ISHFT(1, y)\n            totals_comparison(x) = totals_comparison(x) + ISHFT(1, y)\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = iand(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ior_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .933) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ior(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_ixor_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT, 8):: randoms\n        INTEGER,DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = 0\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 8\n            IF (randoms(x, y) .lt. .5) THEN\n              a(x) = a(x) + ISHFT(1, y - 1)\n            END IF\n          END DO\n        END DO\n        totals = 0\n        totals_comparison = 0\n        DO x = 1, LOOPCOUNT/10 + 1\n          totals(x) = 0\n          totals_comparison(x) = 0\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = ieor(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_max_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = max(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_list_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_list_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), b(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_x.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_expr_x_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(a(x), totals(MOD(x, LOOPCOUNT/10 + 1) + 1))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_list.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_min_x_expr_list_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT/10 + 1):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(totals(1:(LOOPCOUNT/10 + 1)))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              !$acc atomic update\n                totals(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n              !$acc end atomic\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1) = min(totals_comparison(MOD(x, LOOPCOUNT/10 + 1) + 1), a(x), b(x))\n        END DO\n        DO x = 1, LOOPCOUNT/10 + 1\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .AND. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_and_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .AND. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) / a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_divided_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) / a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .EQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_eqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .EQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) - a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_minus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) - a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .NEQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_neqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .NEQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .OR. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_or_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) .OR. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) + a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_plus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) + a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) * a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_update_x_times_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic update\n                  totals(x) = totals(x) * a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_and_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .AND. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_and_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) < .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .AND. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .AND. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) / a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_divided_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) / a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) / a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_eqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .EQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_eqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .EQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .EQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) - a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_minus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) - a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) - a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_neqv_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .NEQV. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_neqv_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .5) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .NEQV. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .NEQV. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_or_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .OR. a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_or_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT, 10):: a !Data\n        LOGICAL,DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            IF (randoms(x, y) > .933) THEN\n              a(x, y) = .TRUE.\n            ELSE\n              a(x, y) = .FALSE.\n            END IF\n          END DO\n        END DO\n\n        totals = .FALSE.\n        totals_comparison = .FALSE.\n\n        !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) .OR. a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) .OR. a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NEQV. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) + a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_plus_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 0\n        totals_comparison = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) + a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) + a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_times_expr.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) * a(x, y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "atomic_x_times_expr_end.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,atomic,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT, 10):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: totals, totals_comparison\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        totals = 1\n        totals_comparison = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(totals(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              DO y = 1, 10\n                !$acc atomic\n                  totals(x) = totals(x) * a(x, y)\n                !$acc end atomic\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 10\n            totals_comparison(x) = totals_comparison(x) * a(x, y)\n          END DO\n        END DO\n\n        DO x = 1, LOOPCOUNT\n          IF (totals_comparison(x) .NE. totals(x)) THEN\n            errors = errors + 1\n            WRITE(*, *) totals_comparison(x)\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "atomic"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copy_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyin_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(:LOOPCOUNT), b(:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_copyout_reference_counts.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          !$acc data copyin(c(1:LOOPCOUNT))\n            !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO x = 1, LOOPCOUNT\n                  c(x) = c(x) + a(x) + b(x)\n                END DO\n              !$acc end parallel\n            !$acc end data\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n              EXIT\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        IF (devtest(1) .eq. 1) THEN\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 2\n              EXIT\n            END IF\n          END DO\n        END IF\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,data_region,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1)::devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(c(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 8\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0 \n\n        !$acc data create(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc data present_or_create(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc data pcreate(b(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc data copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n        !$acc end data\n     \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_create_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) create(c(:LOOPCOUNT)) copyout(e(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_present_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,present,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n \n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent",
                            "present"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_changing_subscript.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, indexer !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        indexer = LOOPCOUNT\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:indexer), b(1:indexer)) copyout(c(1:indexer))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, indexer\n              c(x) = a(x) + b(x)\n            END DO\n            indexer = 1\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "data_with_derived_type.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,data_region,construct-independent,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        TYPE multi_item\n          REAL(8) :: a\n          REAL(8) :: b\n          REAL(8) :: c\n        END TYPE multi_item\n        INTEGER :: x !Iterators\n        TYPE (multi_item),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        DO x = 1, LOOPCOUNT\n          CALL RANDOM_NUMBER(a(x)%a)\n          CALL RANDOM_NUMBER(a(x)%b)\n          a(x)%c = 0.0\n        END DO\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x)%c = a(x)%a + a(x)%b\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x)%c - (a(x)%a + a(x)%b)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "data_region",
                            "construct-independent"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  INTEGER :: x\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(fixed_size_array)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + fixed_size_array(MOD(x, 10))\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + fixed_size_array(MOD(x, 10)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(scalar)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL externMultiplyData(a, LOOPCOUNT)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:construct-independent,declare,V:1.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  USE DECLARE_COPYIN_MOD\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL multiplyData(a)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_copyin_mod.F90": {
                "num tests": 0,
                "tests": {}
            },
            "declare_create.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,declare,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  !$acc update device(n)\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(fixed_size_array)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 10\n        fixed_size_array(x) = x * x\n      END DO\n    !$acc end parallel\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + fixed_size_array(MOD(x, 10))\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + (MOD(x, 10) * MOD(x, 10)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,declare,update,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  scalar = 10\n  !$acc update device(scalar)\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) present(scalar)\n    !$acc parallel\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n  !$acc update\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL externMultiplyData(a, LOOPCOUNT)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT) :: a, b\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = a\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc parallel\n      !$acc loop\n      DO x = 1, 1\n        CALL multiplyData(a)\n      END DO\n    !$acc end parallel\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (b(x) * 2)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copy.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(1:LOOPCOUNT, x:x))\n        CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (2 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(1:LOOPCOUNT, x:x))\n          CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 4\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copy(c(1:LOOPCOUNT, x:x))\n          CALL copyin_copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(y, x) - 4) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - (4 + a(y, x) + b(y, x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyin.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n\n  !$acc data copy(c(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL function_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n        PRINT*, \"1\"\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 0\n    a_host = a\n    b_host = b\n\n    !$acc data copy(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT), c(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        CALL function_test_dev_only(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      END DO\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      DO y = 1, LOOPCOUNT\n        IF (abs(a(x, y) + 1) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"2\"\n        END IF\n        IF (abs(b(x, y) + 1) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"3\"\n        END IF\n        IF (abs(c(x, y) - (a_host(x, y) + b_host(x, y))) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"4\"\n        END IF\n      END DO\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, a_host, b_host\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 1\n    a_host = a\n    b_host = b\n\n    !$acc data copy(c(1:LOOPCOUNT, 1:LOOPCOUNt))\n      DO x = 1, LOOPCOUNT\n        CALL function_test_dev_only(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      END DO\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      DO y = 1, LOOPCOUNT\n        IF (abs(a(x, y) - a_host(x, y)) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"5\"\n        END IF\n        IF (abs(b(x, y) - b_host(x, y)) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"6\"\n        END IF\n        IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n          errors = errors + 1\n          PRINT*, \"7\"\n        END IF\n      END DO\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(1:LOOPCOUNT, x:x))\n        CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(1:LOOPCOUNT, x:x))\n          CALL copyout_test(a(:,x), b(:,x), c(:,x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(y, x) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL create_test(a(x), b(x), c(x), d(x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(d(x, y) - (a(x, y) * (a(x, y) + b(x, y)))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 2\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copy(c(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      CALL create_as_present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (2 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(d(x, y) - (a(x, y) * c(x, y))) .gt. PRECISION * 2) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(x:x, 1:LOOPCOUNT)) copyout(d(x:x, 1:LOOPCOUNT))\n          CALL create_as_present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(x, y) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x, y) - (a(x, y) * (3 + a(x, y) + b(x, y)))) .gt. PRECISION * 2) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "declare_function_scope_present.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 1\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT)) copyout(d(1:LOOPCOUNT, 1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      !$acc data copy(c(x:x, 1:LOOPCOUNT))\n        CALL present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n      !$acc end data\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, LOOPCOUNT\n      IF (abs(c(x, y) - (1 + a(x, y) + b(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(d(x, y) - (a(x, y) * c(x, y))) .gt. PRECISION * 2) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,construct-independent,declare,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n  USE OPENACC\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: errors = 0\n  INTEGER :: mult = 2\n  REAL(8),DIMENSION(LOOPCOUNT, LOOPCOUNT) :: a, b, c, d\n  INTEGER,DIMENSION(1) :: devtest\n  INTEGER :: x, y\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 3\n\n    !$acc data copyin(a(1:LOOPCOUNT, 1:LOOPCOUNT), b(1:LOOPCOUNT, 1:LOOPCOUNT))\n      DO x = 1, LOOPCOUNT\n        !$acc data copyin(c(x:x, 1:LOOPCOUNT)) copyout(d(x:x, 1:LOOPCOUNT))\n          CALL present(a(x), b(x), c(x), d(x), LOOPCOUNT)\n        !$acc end data\n        DO y = 1, LOOPCOUNT\n          IF (abs(c(x, y) - 3) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          IF (abs(d(x, y) - (a(x, y) * (3 + a(x, y) + b(x, y)))) .gt. PRECISION * 2) THEN\n            errors = errors + 1\n          END IF\n        END DO\n      END DO\n    !$acc end data\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "construct-independent",
                            "declare"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_copyin_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(:LOOPCOUNT), b(:LOOPCOUNT))\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n\n        !$acc enter data create(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop \n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n        !$acc enter data present_or_create(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n \n        !$acc enter data pcreate(b(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc data copyout(c(1:LOOPCOUNT))\n          !$acc parallel present(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_create_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        e = 0\n\n        !$acc enter data create(c(:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT)) copyout(e(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              e(x) = c(x) + d(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(e(x) - (a(x) + b(x) + d(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "enter_data_if.F90": {
                "num tests": 5,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n        !$acc data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          a_copy = a\n          CALL RANDOM_NUMBER(b)\n          b_copy = b\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n\n          a = 0\n          b = 0\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(dev)\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n          CALL RANDOM_NUMBER(a)\n          a_copy = a\n          CALL RANDOM_NUMBER(b)\n          b_copy = b\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a_copy(x) + b_copy(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "5": {
                        "content": "#ifndef T5\n!T5:data,executable-data,devonly,construct-independent,if,V:2.0-2.7\n      LOGICAL FUNCTION test5()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b, b_copy, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        LOGICAL :: dev = .TRUE.\n        LOGICAL :: cpu = .FALSE.\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n\n          !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) if(cpu)\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test5 = .FALSE.\n        ELSE\n          test5 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T5\n        LOGICAL :: test5\n#endif\n#ifndef T5\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test5()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 4\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n\n        IF (devtest(1) .eq. 1) THEN\n          !$acc enter data copyin(a(1:LOOPCOUNT))\n          !$acc parallel present(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) + 1\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(a(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        !$acc enter data copyin(a(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = a(x) + 1\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (a_copy(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_no_lower_bound.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data create(c(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_copyout_reference_counts.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        IF (devtest(1) .eq. 1) THEN\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc data copyin(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n            !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n              EXIT\n            END IF\n          END DO \n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc data copyin(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 2\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data copyin(c(1:LOOPCOUNT))\n        !$acc parallel\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = c(x) + a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(c(1:LOOPCOUNT))\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 4\n            EXIT\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_delete_no_lower_bound.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: has_device\n\n        has_device(1) = .TRUE.\n        !$acc enter data copyin(has_device(1:1))\n        !$acc parallel present(has_device(1:1))\n          has_device(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc data copyout(c(1:LOOPCOUNT)) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        !$acc exit data delete(a(:LOOPCOUNT), b(:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: has_device\n\n        has_device(1) = .TRUE.\n        !$acc enter data copyin(has_device(1:1))\n        !$acc parallel present(has_device(1:1))\n          has_device(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (has_device(1) .eqv. .TRUE.) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 0\n          \n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) present(c(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          !$acc exit data delete(c(:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "exit_data_finalize.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:data,executable-data,devonly,construct-independent,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        IF (devtest(1) .eq. 1) THEN\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n        !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:data,executable-data,devonly,construct-independent,V:2.5-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1) :: devtest\n\n        devtest(1) = 1\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc enter data create(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) finalize\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "data",
                            "executable-data",
                            "devonly",
                            "construct-independent"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "id": 1,
            "init.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_num = acc_get_device_num(acc_get_device_type())\n        !$acc init device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    }
                }
            },
            "init_device_type_num.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(host) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(multicore) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(default) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    }
                }
            },
            "init_device_type_num_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc init device_type(nvidia) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "init_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,init,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc init device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "init",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    }
                }
            },
            "kernels_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,kernels,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        g = 0\n        !$acc enter data create(g(1:LOOPCOUNT), c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT))\n          !$acc kernels async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end kernels\n          !$acc kernels async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end kernels\n          !$acc kernels wait(1, 2) async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = c(x) + f(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        !$acc wait(1, 2)\n        !$acc update host(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n        !$acc exit data copyout(g(1:LOOPCOUNT)) async(3)\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" a: \", c(x), \" = \", a(x), \" + \", b(x)\n          END IF\n          IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" b: \", f(x), \" = \", d(x), \" + \", e(x)\n          END IF\n        END DO\n        !$acc wait(3)\n        DO x = 1, LOOPCOUNT\n          IF (abs(g(x) - (c(x) + f(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) x, \" c: \", g(x), \" = \", c(x), \" + \", f(x)\n          END IF\n        END DO\n        !$acc exit data delete(c(1:LOOPCOUNT), f(1:LOOPCOUNT))\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "kernels",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copy.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 1\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels copy(c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc kernels copy(c(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - 1) .gt. PRECISION) THEN\n              IF ((a(x) + b(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest)\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n            DO x = 1, LOOPCOUNT\n              c(x) = 0\n            END DO\n            !$acc kernels copy(c(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n            DO x = 1, LOOPCOUNT\n              IF (abs(c(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (1 + a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyin.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copy(b(1:LOOPCOUNT))\n          !$acc kernels copyin(a(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) + a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            DO x = 1, LOOPCOUNT\n              a(x) = -1\n            END DO\n            !$acc kernels copyin(a(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n            DO x = 1, LOOPCOUNT\n              IF (abs(a(x) + 1) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END DO\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc kernels copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_copyout.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          \n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc kernels copyout(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          \n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_create.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT))\n            !$acc kernels create(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = a(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: devtest\n        devtest(1) = 1\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = 0\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1)) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc kernels\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end kernels\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n          !$acc exit data copyout(c(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,default,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels default(present)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data delete(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT)) \n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_if.F90": {
                "num tests": 4,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        data_on_device = .TRUE.\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data copyout(b(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eqv. .TRUE.) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            a(x) = -1\n          END DO\n\n          !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          data_on_device = .FALSE.\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "4": {
                        "content": "#ifndef T4\n!T4:devonly,kernels,if,V:2.0-2.7\n      LOGICAL FUNCTION test4()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        LOGICAL:: data_on_device = .FALSE.\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc kernels present(devtest(1:1))\n          devtest(1) = .FALSE.\n        !$acc end kernels\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1) .eq. 1) THEN\n          CALL RANDOM_NUMBER(a)\n          b = 0\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels if(data_on_device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n\n          !$acc exit data copyout(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(b(x)) .gt. PRECISION) THEN\n              IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test4 = .FALSE.\n        ELSE\n          test4 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T4\n        LOGICAL :: test4\n#endif\n#ifndef T4\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test4()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 3\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "kernels",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9 !Iterators\n        REAL(8),DIMENSION(1024):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:1024)) copyout(b(1:1024))\n          !$acc kernels\n            !$acc loop\n            DO _0 = 0, 1\n              !$acc loop\n              DO _1 = 0, 1\n                !$acc loop\n                DO _2 = 0, 1\n                  !$acc loop\n                  DO _3 = 0, 1\n                    !$acc loop\n                    DO _4 = 0, 1\n                      !$acc loop\n                      DO _5 = 0, 1\n                        !$acc loop\n                        DO _6 = 0, 1\n                          !$acc loop\n                          DO _7 = 0, 1\n                            !$acc loop\n                            DO _8 = 0, 1\n                              !$acc loop\n                              DO _9 = 1, 2\n                                b(_0*512+_1*256+_2*128+_3*64+_4*32+_5*16+_6*8+_7*4+_8*2+_9)=a(_0*512+_1*256+_2*128+_3*64+_4*32+_5*16+_6*8+_7*4+_8*2+_9)\n                              END DO\n                            END DO\n                          END DO\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, 1024\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_independent.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc kernels loop independent\n          DO x = 1, LOOPCOUNT\n            b(x) = b(x) + a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        total = 0\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(total)\n          !$acc parallel loop reduction(+:total)\n          DO x = 1, LOOPCOUNT\n            total = total + a(x) + b(x)\n          END DO\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. LOOPCOUNT * PRECISION) THEN\n          WRITE(*, *) total\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c, d !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        avg = 0\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) create(c(1:10*LOOPCOUNT)) copyout(d(1:10*LOOPCOUNT))\n          !$acc kernels loop gang private(avg)\n          DO x = 0, 9\n            avg = 0\n            !$acc loop worker reduction(+:avg)\n            DO y = 1, LOOPCOUNT\n              avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            avg = avg / LOOPCOUNT\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              d(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y) / avg\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          avg = 0\n          DO y = 1, LOOPCOUNT\n            avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          avg = avg / LOOPCOUNT\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / avg)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0.0\n            !$acc loop vector reduction(+:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .TRUE.\n        LOGICAL :: host_results = .TRUE.\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(.and.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .and. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          host_results = host_results .and. a(x)\n        END DO\n        IF (host_results .neqv. results) THEN\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results, has_false\n        LOGICAL :: host_results = .TRUE.\n        LOGICAL :: temp = .TRUE.\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / LOOPCOUNT)\n        INTEGER :: errors = 0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, 10\n          results(x) = .TRUE.\n          has_false(x) = .FALSE.\n        END DO\n        DO x = 1, 10*LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n            a_copy(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n            a_copy(x) = .FALSE.\n            has_false(x / LOOPCOUNT) = .TRUE.\n          END IF\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc kernels loop gang\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop worker reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (temp .eqv. .TRUE.) THEN\n                IF (a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          temp = .TRUE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .AND. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .TRUE.) THEN\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10):: b\n        LOGICAL,DIMENSION(10):: has_false\n        LOGICAL :: temp\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(10*LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        DO x = 1, 10\n          has_false(x) = .FALSE.\n          b(x) = .TRUE.\n        END DO\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (randoms(x * LOOPCOUNT + y) .lt. false_margin) THEN\n              a(x * LOOPCOUNT + y) = .TRUE.\n            ELSE\n              a(x * LOOPCOUNT + y) = .FALSE.\n              has_false(x + 1) = .TRUE.\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop vector reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) .eqv. .FALSE.) THEN\n              temp = .TRUE.\n            END IF\n          END DO\n          IF (temp .neqv. has_false(x + 1)) THEN\n            errors = 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: b\n        REAL(8),DIMENSION(16 * LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 15\n            IF (randoms(y * LOOPCOUNT + x) .lt. false_margin) THEN\n              temp = 1\n              DO z = 0, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        b = a(1)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(iand:b)\n          DO x = 1, LOOPCOUNT\n            b = iand(b, a(x))\n          END DO\n        !$acc end data\n\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = iand(a(x), temp)\n        END DO\n        IF (temp .ne. b) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) b\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160*LOOPCOUNT)::randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(10000 * randoms2)\n        b_copy = b\n        false_margin = exp(log(.5)/LOOPCOUNT)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms((y - 1) * 10 * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        DO x = 1, 10\n         c(x) = a((x - 1) * LOOPCOUNT + x)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 1, 10\n            temp = a((x - 1) * LOOPCOUNT + 1)\n            !$acc loop worker reduction(iand:temp)\n            DO y = 2, LOOPCOUNT\n              temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n            END DO\n            c(x) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b((x - 1) * LOOPCOUNT + y) = b((x - 1) * LOOPCOUNT + y) + c(x)\n            END DO\n          END DO\n        !$acc end data\n\n       DO x = 1, 10\n         temp = a((x - 1) * LOOPCOUNT + 1)\n         DO y = 2, LOOPCOUNT\n           temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n         END DO\n         IF (temp .ne. c(x)) THEN\n           errors = errors + 1\n         END IF\n         DO y = 1, LOOPCOUNT\n           IF (b((x - 1) * LOOPCOUNT + y) .ne. b_copy((x - 1) * LOOPCOUNT + y) + temp) THEN\n             errors = errors + 1\n           END IF\n         END DO\n       END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: random\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5) / n)\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (random(x * 16 * LOOPCOUNT + (y - 1) * 16 + z - 1) < false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc kernels loop private(c)\n          DO x = 0, 9\n            c = a(x * LOOPCOUNT + 1)\n            !$acc loop vector reduction(iand:c)\n            DO y = 1, LOOPCOUNT\n              c = iand(c, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = c\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = a(x * LOOPCOUNT + 1)\n          DO y = 2, LOOPCOUNT\n            temp = iand(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (b(x + 1) .ne. temp) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(16*LOOPCOUNT):: random\n        INTEGER :: errors = 0\n        INTEGER :: temp\n        INTEGER :: b\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 16\n            IF (random((y - 1) * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        b = a(1)\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(ior:b)\n          DO x = 2, LOOPCOUNT\n            b = ior(b, a(x))\n          END DO\n        !$acc end data\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = ior(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        false_margin = exp(log(.5)/n)\n        b = FLOOR(6*randoms2)\n        b_copy = b\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (randoms(x * 16 * LOOPCOUNT + y * 16 + z - 1) .gt. false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10 * LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10) :: b\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160 * LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / n)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms(y * 10 * LOOPCOUNT + y - 1) .gt. false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        INTEGER :: errors = 0\n        INTEGER :: b = 0\n        INTEGER :: temp = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(ieor:b)\n          DO x = 1, LOOPCOUNT\n            b = ieor(b, a(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = ieor(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms, randoms2\n        INTEGER,DIMENSION(10):: c\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(randoms2*1000000)\n        b_copy = b\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: maximum, temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        maximum = 0\n        temp = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels loop reduction(max:maximum)\n          DO x = 1, LOOPCOUNT\n            maximum = max(maximum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = max(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - maximum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: maximum\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / maximum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) - maximum(x + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            ELSE IF ((c(x * LOOPCOUNT + y) - 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: maximum\n        INTEGER :: errors = 0\n        REAL(8) :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        maximum = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(maximum(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - maximum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8):: minimum = 1000\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc kernels loop reduction(min:minimum)\n          DO x = 1, LOOPCOUNT\n            minimum = min(minimum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = min(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - minimum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = a + 1\n        b = b + 1\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc kernels loop gang independent private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop worker independent reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n            !$acc loop independent\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / minimum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) minimum(x + 1)\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) / temp)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y!Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop vector reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: temp = 1\n        REAL(8) :: multiplied_total = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a)/1000\n        b = (999.4 + b)/1000\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(*:multiplied_total)\n          DO x = 1, LOOPCOUNT\n            multiplied_total = multiplied_total * (a(x) + b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp * (a(x) + b(x))\n        END DO\n        IF (abs(temp - multiplied_total) .gt. ((temp / 2) + (multiplied_total / 2)) * PRECISION) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) multiplied_total\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: totals\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = (999.4 + a) / 2000\n        b = (999.4 + b) / 2000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT), totals(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop worker reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            totals(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - totals(x + 1)) .gt. ((temp / 2) + (totals(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) temp\n            WRITE(*, *) totals(x + 1)\n            WRITE(*, *) \" \"\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1))) .gt. c(x * LOOPCOUNT + y) * PRECISION) THEN\n              errors = errors + 1\n              WRITE(*, *) c(x * LOOPCOUNT + y)\n              WRITE(*, *) a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              WRITE(*, *) \" \"\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a) / 1000\n        b = (999.4 + b) / 1000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop vector reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. ((temp / 2) + (c(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .FALSE.\n        LOGICAL :: temp = .FALSE.\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        REAL(8),DIMENSION(LOOPCOUNT):: random\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        DO x = 1, LOOPCOUNT\n          IF (random(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc kernels loop reduction(.OR.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .OR. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp .OR. a(x)\n        END DO\n        IF (temp .neqv. results) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results\n        LOGICAL :: temp = .FALSE.\n        REAL(8),DIMENSION(10 * LOOPCOUNT) :: random\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (random(x) .gt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n          a_copy(x) = a(x)\n        END DO\n\n        DO x = 1, 10\n          results(x) = .FALSE.\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc kernels loop gang private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop worker reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (results(x + 1) .eqv. .TRUE.) THEN\n                IF(a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .FALSE.) THEN\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10) :: b\n        LOGICAL :: temp\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / 2)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (randoms(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc kernels loop private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop vector reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc kernels loop seq\n          DO x = 2, LOOPCOUNT\n            b(x) = b(x - 1) + a(x)\n          END DO\n        !$acc end data\n\n        DO x = 2, LOOPCOUNT\n          IF (abs(b(x) - (b(x - 1) + a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,combined-constructs,loop,tile,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT,SMALL_LOOPCOUNT)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copyin(a(1:SMALL_LOOPCOUNT), b(1:SMALL_LOOPCOUNT), c(1:SMALL_LOOPCOUNT)) copyout(d(1:SMALL_LOOPCOUNT,1:SMALL_LOOPCOUNT))\n          !$acc kernels loop tile(*, *) reduction(+:temp)\n          DO x = 1, SMALL_LOOPCOUNT\n            DO y = 1, SMALL_LOOPCOUNT\n              temp = 0\n              DO z = 1, SMALL_LOOPCOUNT\n                temp = temp + a(z) + b(z) + c(z)\n              END DO\n              d(x,y) = temp\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 1, SMALL_LOOPCOUNT\n          DO y = 1, SMALL_LOOPCOUNT\n            temp = 0\n            DO z = 1, SMALL_LOOPCOUNT\n              temp = temp + a(z) + b(z) + c(z)\n            END DO\n            IF (abs(d(x,y) - temp) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplier\n        INTEGER :: errors = 0\n\n        multiplier = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplier\n            END DO\n            multiplier = multiplier + 1\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: RAND\n        REAL(8) :: multiplier\n        INTEGER :: errors = 0\n\n        multiplier = 1\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc kernels\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplier\n            END DO\n            multiplier = multiplier + 1\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + (a(x) + b(x)) * multiplier\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_gangs.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,reduction,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER :: results !Data\n        INTEGER :: errors = 0\n\n        results = 0\n\n        !$acc kernels num_gangs(8)\n          !$acc loop gang reduction(+:results)\n          DO x = 1, LOOPCOUNT\n            results = 1\n          END DO\n        !$acc end kernels\n          \n        IF (results .ne. 8) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels",
                            "reduction"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_num_workers.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels loop num_workers(16)\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT)) create(b(1:LOOPCOUNT))\n        !$acc kernels present(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data delete(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_scalar_default_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: total = 0.0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        DO x = 1, LOOPCOUNT\n          total = total + a(x)\n        END DO\n        !$acc data copyin(b(1:LOOPCOUNT))\n          !$acc kernels num_gangs(1) vector_length(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              total = total + b(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. (2 * LOOPCOUNT - 2) * PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_vector_length.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:kernels,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc kernels vector_length(16)\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "kernels"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "kernels_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,kernels,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT)) async(1)\n        !$acc kernels wait(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end kernels\n        !$acc exit data copyout(c(1:LOOPCOUNT)) delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "kernels"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_collapse.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x*LOOPCOUNT + 1) = a(x*LOOPCOUNT + 1) + b(x*LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x*LOOPCOUNT + y) = c(x*LOOPCOUNT + y - 1) + a(x*LOOPCOUNT + y) + b(x*LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent collapse(2)\n            DO x = 0, 9\n              DO y = 1, LOOPCOUNT\n                c(x*LOOPCOUNT + y) = a(x*LOOPCOUNT + y) + b(x*LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x*LOOPCOUNT+y) - (a(x*LOOPCOUNT+y)+b(x*LOOPCOUNT+y))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "loop_no_collapse.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x * LOOPCOUNT + 1) = a(x * LOOPCOUNT + 1) + b(x * LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y - 1) + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:construct-independent,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8):: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        DO x = 0, 9\n          c(x * LOOPCOUNT + 1) = a(x * LOOPCOUNT + 1) + b(x * LOOPCOUNT + 1)\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc kernels\n            !$acc loop independent\n            DO x = 0, 9\n              DO y = 2, LOOPCOUNT\n                c(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y - 1) + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              END DO\n            END DO\n          !$acc end kernels\n        !$acc end data\n\n        DO x = 0, 9\n          total = 0\n          DO y = 1, LOOPCOUNT\n            total = total + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            IF (abs(total - c(x * LOOPCOUNT + y)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, i_a, i_b, i_c, i_d, i_e, i_f, i_g, i_h, i_i, i_j !Iterators\n        INTEGER, PARAMETER :: PRIVATE_LOOPCOUNT = 1024\n        REAL(8),DIMENSION(PRIVATE_LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors\n        errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:PRIVATE_LOOPCOUNT), b(1:PRIVATE_LOOPCOUNT)) copy(c(1:PRIVATE_LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO i_a = 0, 1\n              !$acc loop\n              DO i_b = 0, 1\n                !$acc loop\n                DO i_c = 0, 1\n                  !$acc loop\n                  DO i_d = 0, 1\n                    !$acc loop\n                    DO i_e = 0, 1\n                      !$acc loop\n                      DO i_f = 0, 1\n                        !$acc loop\n                        DO i_g = 0, 1\n                          !$acc loop\n                          DO i_h = 0, 1\n                            !$acc loop\n                            DO i_i = 0, 1\n                              !$acc loop\n                              DO i_j = 0, 1\n                                c(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) = &\n                                a(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) + &\n                                b(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1)\n                              END DO\n                            END DO\n                          END DO\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, PRIVATE_LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(d)\n        CALL RANDOM_NUMBER(e)\n        f = 0\n        g = 0\n        \n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), c(1:LOOPCOUNT), f(1:LOOPCOUNT), g(1:LOOPCOUNT))\n          !$acc parallel async(1)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              f(x) = d(x) + e(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(c(1:LOOPCOUNT)) wait(1) async(4)\n          !$acc update host(f(1:LOOPCOUNT)) wait(2) async(5)\n          !$acc parallel wait(1, 2) async(3)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              g(x) = c(x) + f(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(g(1:LOOPCOUNT)) async(3)\n        !$acc end data\n        !$acc wait\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          ELSE IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          ELSE IF (abs(g(x) - (f(x) + c(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_host !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_host = a\n\n        !$acc parallel copy(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 2 * a(x)\n          END DO \n        !$acc end parallel\n    \n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a_host(x) - (a(x) / 2)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyin.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        b = 0\n\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !$acc parallel copyin(a(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 0.0\n          END DO\n\n        !$acc end parallel\n\n        DO x = 1, LOOPCOUNT\n          IF ((abs(a(x) - a_copy(x)) > PRECISION .AND. hasDevice(1) .eq. 1) .OR. (hasDevice(1) .eq. 0 .AND. abs(a(x)) > PRECISION)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n        IF (hasDevice(1) .eq. 1) THEN\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel copyout(b(1:LOOPCOUNT))\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                b(x) = b(x) - a(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        INTEGER,DIMENSION(1):: hasDevice\n        hasDevice(1) = 1\n        !$acc enter data copyin(hasDevice(1:1))\n        !$acc parallel present(hasDevice(1:1))\n          hasDevice(1) = 0\n        !$acc end parallel\n\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel copyout(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) - a(x)\n            END DO\n          !$acc end parallel\n          !$acc update host(b(1:LOOPCOUNT))\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x)) > 2 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_create.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel create(b(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,parallel,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL,DIMENSION(1):: devtest\n        devtest(1) = .TRUE.\n\n        !$acc enter data copyin(devtest(1:1))\n        !$acc parallel\n          devtest(1) = .FALSE.\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (devtest(1)) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = 1\n\n          !$acc enter data copyin(c(1:LOOPCOUNT))\n          c = 0\n          !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n            !$acc parallel\n              !$acc loop\n              DO x = 1, LOOPCOUNT\n                c(x) = c(x) + a(x) + b(x)\n              END DO\n            !$acc end parallel\n          !$acc end data\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n          !$acc exit data copyout(c(1:LOOPCOUNT))\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,default,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: errors = 0\n\n        a = 0\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel default(present)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = 1.0\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - 1) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "default"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_firstprivate.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,firstprivate,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, d !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c, c_copy\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n        c_copy = c\n        d = 0\n        \n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(d(1:10*LOOPCOUNT))\n          !$acc parallel firstprivate(c(1:LOOPCOUNT))\n            !$acc loop gang\n            DO x = 0, 9\n              !$acc loop worker\n              DO y = 1, LOOPCOUNT\n                d(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,firstprivate,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, d !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c, c_copy\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n        \n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(d(1:10*LOOPCOUNT))\n          !$acc parallel firstprivate(c(1:LOOPCOUNT))\n            !$acc loop gang independent\n            DO x = 0, 9\n              !$acc loop worker independent\n              DO y = 1, LOOPCOUNT\n                c(y) = a(x * LOOPCOUNT + y) - b(x * LOOPCOUNT + y)\n              END DO\n              !$acc loop worker independent\n              DO y = 1, LOOPCOUNT\n                d(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y) + c(y)\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, 10 * LOOPCOUNT\n          IF (abs(d(x) - (2 * a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO       \n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "firstprivate"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_if.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc parallel if(host)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        IF (dev_test(1) .eq. 0) THEN\n          CALL RANDOM_NUMBER(a)\n          CALL RANDOM_NUMBER(b)\n          c = a + b\n\n          !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel if(host) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n          DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,parallel,if,V:2.0-2.7\n      LOGICAL FUNCTION test3()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n        LOGICAL :: host = .FALSE.\n        LOGICAL :: device = .TRUE.\n        INTEGER,DIMENSION(1) :: dev_test\n        dev_test(1) = 0\n\n        !$acc enter data copyin(dev_test(1:1))\n        !$acc parallel present(dev_test(1:1))\n          dev_test(1) = 1\n        !$acc end parallel\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = a + b\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel if(device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = c(x) + a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)), copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (2 * (a(x) + b(x)))) .gt. 2 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "parallel",
                            "if"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        a = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel loop\n          DO x = 1, LOOPCOUNT\n            a(x) = 1\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - 1) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test2()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        a = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = b(x)\n            END DO\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) + c(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (b(x) + c(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c, d !Data\n\t\t\t\tINTEGER,DIMENSION(10):: errors_array\n        INTEGER :: errors\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = a + b\n\t\t\t\terrors = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT), c(1:10*LOOPCOUNT), d(1:10*LOOPCOUNT)) copy(errors_array(1:10))\n          DO x = 0, 9\n            !$acc parallel loop async(x)\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            !$acc parallel loop async(x) reduction(+:errors_array(x))\n            DO y = 1, LOOPCOUNT\n              IF (c(x * LOOPCOUNT + y) - d(x * LOOPCOUNT + y) .gt.  PRECISION .OR. &\n                d(x * LOOPCOUNT + y) - c(x * LOOPCOUNT + y) .gt. PRECISION) THEN\n                errors_array(x) = errors_array(x) + 1\n              END IF\n            END DO\n          END DO\n\t\t\t\t\t!$acc wait\n        !$acc end data\n\n\t\t\t\tDO x = 1, 10\n\t\t\t\t\terrors = errors + errors_array(x)\n\t\t\t\tEND DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_auto.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,auto,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b !Data\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        a_copy = a\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc parallel loop auto\n          DO x = 1, LOOPCOUNT\n            b(x) = a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        !$acc data copy(a(1:LOOPCOUNT))\n          !$acc parallel loop auto\n          DO x = 2, LOOPCOUNT\n            a(x) = a(x - 1) + a(x)\n          END DO\n        !$acc end data\n\n        temp = 0\n        DO x = 1, LOOPCOUNT\n          temp = temp + a_copy(x)\n          IF (abs(temp - a(x)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_gang.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel loop gang\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: total\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        total = 0\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(total)\n          !$acc parallel loop reduction(+:total)\n          DO x = 1, LOOPCOUNT\n            total = total + a(x) + b(x)\n          END DO\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          total = total - (a(x) + b(x))\n        END DO\n        IF (abs(total) .gt. LOOPCOUNT * PRECISION) THEN\n          WRITE(*, *) total\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c, d !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        avg = 0\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) create(c(1:10*LOOPCOUNT)) copyout(d(1:10*LOOPCOUNT))\n          !$acc parallel loop gang private(avg)\n          DO x = 0, 9\n            avg = 0\n            !$acc loop worker reduction(+:avg)\n            DO y = 1, LOOPCOUNT\n              avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              c(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            avg = avg / LOOPCOUNT\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              d(x * LOOPCOUNT + y) = c(x * LOOPCOUNT + y) / avg\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          avg = 0\n          DO y = 1, LOOPCOUNT\n            avg = avg + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          avg = avg / LOOPCOUNT\n          DO y = 1, LOOPCOUNT\n            IF (abs(d(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / avg)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0.0\n            !$acc loop vector reduction(+:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .TRUE.\n        LOGICAL :: host_results = .TRUE.\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(.and.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .and. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          host_results = host_results .and. a(x)\n        END DO\n        IF (host_results .neqv. results) THEN\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results, has_false\n        LOGICAL :: host_results = .TRUE.\n        LOGICAL :: temp = .TRUE.\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / LOOPCOUNT)\n        INTEGER :: errors = 0\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        DO x = 1, 10\n          results(x) = .TRUE.\n          has_false(x) = .FALSE.\n        END DO\n        DO x = 1, 10*LOOPCOUNT\n          IF (randoms(x) .lt. false_margin) THEN\n            a(x) = .TRUE.\n            a_copy(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n            a_copy(x) = .FALSE.\n            has_false(x / LOOPCOUNT) = .TRUE.\n          END IF\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc parallel loop gang\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop worker reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (temp .eqv. .TRUE.) THEN\n                IF (a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n        DO x = 0, 9\n          temp = .TRUE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .AND. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .TRUE.) THEN\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10):: b\n        LOGICAL,DIMENSION(10):: has_false\n        LOGICAL :: temp\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(10*LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / LOOPCOUNT)\n        DO x = 1, 10\n          has_false(x) = .FALSE.\n          b(x) = .TRUE.\n        END DO\n\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (randoms(x * LOOPCOUNT + y) .lt. false_margin) THEN\n              a(x * LOOPCOUNT + y) = .TRUE.\n            ELSE\n              a(x * LOOPCOUNT + y) = .FALSE.\n              has_false(x + 1) = .TRUE.\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = .TRUE.\n            !$acc loop vector reduction(.AND.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .AND. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) .eqv. .FALSE.) THEN\n              temp = .TRUE.\n            END IF\n          END DO\n          IF (temp .neqv. has_false(x + 1)) THEN\n            errors = 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        INTEGER :: b\n        REAL(8),DIMENSION(16 * LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 0, 15\n            IF (randoms(y * LOOPCOUNT + x) .lt. false_margin) THEN\n              temp = 1\n              DO z = 0, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        \n        b = a(1)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(iand:b)\n          DO x = 1, LOOPCOUNT\n            b = iand(b, a(x))\n          END DO\n        !$acc end data\n \n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = iand(a(x), temp)\n        END DO\n        IF (temp .ne. b) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) b\n          errors = 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160*LOOPCOUNT)::randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(10000 * randoms2)\n        b_copy = b\n        false_margin = exp(log(.5)/LOOPCOUNT)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms((y - 1) * 10 * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        \n        DO x = 1, 10\n         c(x) = a((x - 1) * LOOPCOUNT + x)\n        END DO\n        \n        \n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 1, 10\n            temp = a((x - 1) * LOOPCOUNT + 1)\n            !$acc loop worker reduction(iand:temp)\n            DO y = 2, LOOPCOUNT\n              temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n            END DO\n            c(x) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b((x - 1) * LOOPCOUNT + y) = b((x - 1) * LOOPCOUNT + y) + c(x)\n            END DO\n          END DO\n        !$acc end data\n\n       DO x = 1, 10\n         temp = a((x - 1) * LOOPCOUNT + 1)\n         DO y = 2, LOOPCOUNT\n           temp = iand(temp, a((x - 1) * LOOPCOUNT + y))\n         END DO\n         IF (temp .ne. c(x)) THEN\n           errors = errors + 1\n         END IF\n         DO y = 1, LOOPCOUNT\n           IF (b((x - 1) * LOOPCOUNT + y) .ne. b_copy((x - 1) * LOOPCOUNT + y) + temp) THEN\n             errors = errors + 1\n           END IF\n         END DO\n       END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: random\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5) / n)\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (random(x * 16 * LOOPCOUNT + (y - 1) * 16 + z - 1) < false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n                \n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc parallel loop private(c)\n          DO x = 0, 9\n            c = a(x * LOOPCOUNT + 1)\n            !$acc loop vector reduction(iand:c)\n            DO y = 1, LOOPCOUNT\n              c = iand(c, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = c\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = a(x * LOOPCOUNT + 1)\n          DO y = 2, LOOPCOUNT\n            temp = iand(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (b(x + 1) .ne. temp) THEN\n            errors = errors + 1\n          END IF\n        END DO       \n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(16*LOOPCOUNT):: random\n        INTEGER :: errors = 0\n        INTEGER :: temp\n        INTEGER :: b\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        false_margin = exp(log(.5)/n)\n        DO x = 1, LOOPCOUNT\n          DO y = 1, 16\n            IF (random((y - 1) * LOOPCOUNT + x) < false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n        b = a(1)\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(ior:b)\n          DO x = 2, LOOPCOUNT\n            b = ior(b, a(x))\n          END DO\n        !$acc end data\n        temp = a(1)\n        DO x = 2, LOOPCOUNT\n          temp = ior(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z, i !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms2\n        INTEGER,DIMENSION(10) :: c\n        REAL(8),DIMENSION(160*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        CALL RANDOM_NUMBER(randoms2)\n        false_margin = exp(log(.5)/n)\n        b = FLOOR(6*randoms2)\n        b_copy = b\n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            DO z = 1, 16\n              IF (randoms(x * 16 * LOOPCOUNT + y * 16 + z - 1) .gt. false_margin) THEN\n                temp = 1\n                DO i = 1, z\n                  temp = temp * 2\n                END DO\n                a(x * LOOPCOUNT + y) = a(x * LOOPCOUNT + y) + temp\n              END IF\n            END DO\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        INTEGER,DIMENSION(10 * LOOPCOUNT):: a !Data\n        INTEGER,DIMENSION(10) :: b\n        REAL(8) :: false_margin\n        REAL(8),DIMENSION(160 * LOOPCOUNT) :: randoms\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        false_margin = exp(log(.5) / n)\n        DO x = 1, 10 * LOOPCOUNT\n          DO y = 1, 16\n            IF (randoms(y * 10 * LOOPCOUNT + y - 1) .gt. false_margin) THEN\n              temp = 1\n              DO z = 1, y\n                temp = temp * 2\n              END DO\n              a(x) = a(x) + temp\n            END IF\n          END DO\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ior:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ior(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ior(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: randoms\n        INTEGER :: errors = 0\n        INTEGER :: b = 0\n        INTEGER :: temp = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(ieor:b)\n          DO x = 1, LOOPCOUNT\n            b = ieor(b, a(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = ieor(temp, a(x))\n        END DO\n        IF (temp .ne. b) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a, b, b_copy !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms, randoms2\n        INTEGER,DIMENSION(10):: c\n        REAL*8 :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n        CALL RANDOM_NUMBER(randoms2)\n        b = FLOOR(randoms2*1000000)\n        b_copy = b\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10*LOOPCOUNT), c(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              b(x * LOOPCOUNT + y) = b(x * LOOPCOUNT + y) + c(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. c(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (b(x * LOOPCOUNT + y) .ne. b_copy(x * LOOPCOUNT + y) + c(x + 1)) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        INTEGER,DIMENSION(10*LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        INTEGER,DIMENSION(10):: b\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n        a = FLOOR(randoms*1000000)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)) copy(b(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(ieor:temp)\n            DO y = 1, LOOPCOUNT\n              temp = ieor(temp, a(x * LOOPCOUNT + y))\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = ieor(temp, a(x * LOOPCOUNT + y))\n          END DO\n          IF (temp .ne. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8) :: maximum, temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        maximum = 0\n        temp = 0\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel loop reduction(max:maximum)\n          DO x = 1, LOOPCOUNT\n            maximum = max(maximum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = max(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - maximum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: maximum\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop worker reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / maximum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          DO y = 1, LOOPCOUNT\n            IF (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) - maximum(x + 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            ELSE IF ((c(x * LOOPCOUNT + y) - 1) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: maximum\n        INTEGER :: errors = 0\n        REAL(8) :: temp\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        maximum = 0\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(maximum(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 0\n            !$acc loop vector reduction(max:temp)\n            DO y = 1, LOOPCOUNT\n              temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            maximum(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = max(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - maximum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8):: minimum = 1000\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n          !$acc parallel loop reduction(min:minimum)\n          DO x = 1, LOOPCOUNT\n            minimum = min(minimum, a(x) * b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = min(temp, a(x) * b(x))\n        END DO\n        IF (abs(temp - minimum) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = a + 1\n        b = b + 1\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop worker reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n            !$acc loop\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y)) / minimum(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (abs(c(x * LOOPCOUNT + y) - (a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y) / temp)) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y!Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10):: minimum\n        REAL(8):: temp = 1000\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(minimum(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1000\n            !$acc loop vector reduction(min:temp)\n            DO y = 1, LOOPCOUNT\n              temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n            END DO\n            minimum(x + 1) = temp\n          END DO\n        !$acc end data\n        \n        DO x = 0, 9\n          temp = 1000\n          DO y = 1, LOOPCOUNT\n            temp = min(temp, a(x * LOOPCOUNT + y) * b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - minimum(x + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n        REAL(8) :: temp = 1\n        REAL(8) :: multiplied_total = 1\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a)/1000\n        b = (999.4 + b)/1000\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(*:multiplied_total)\n          DO x = 1, LOOPCOUNT\n            multiplied_total = multiplied_total * (a(x) + b(x))\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp * (a(x) + b(x))\n        END DO\n        IF (abs(temp - multiplied_total) .gt. ((temp / 2) + (multiplied_total / 2)) * PRECISION) THEN\n          WRITE(*, *) temp\n          WRITE(*, *) multiplied_total\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10*LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(10):: totals\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        a = (999.4 + a) / 2000\n        b = (999.4 + b) / 2000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copy(c(1:10*LOOPCOUNT), totals(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop worker reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            totals(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(x * LOOPCOUNT + y) = (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1)\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - totals(x + 1)) .gt. ((temp / 2) + (totals(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n            WRITE(*, *) temp\n            WRITE(*, *) totals(x + 1)\n            WRITE(*, *) \" \"\n          END IF\n          DO y = 1, LOOPCOUNT \n            IF (abs(c(x * LOOPCOUNT + y) - ((a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)) / totals(x + 1))) .gt. c(x * LOOPCOUNT + y) * PRECISION) THEN\n              errors = errors + 1\n              WRITE(*, *) c(x * LOOPCOUNT + y)\n              WRITE(*, *) a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n              WRITE(*, *) \" \"\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(10) :: c\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a = (999.4 + a) / 1000\n        b = (999.4 + b) / 1000\n\n        !$acc data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT)) copyout(c(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = 1\n            !$acc loop vector reduction(*:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n            END DO\n            c(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = 1\n          DO y = 1, LOOPCOUNT\n            temp = temp * (a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y))\n          END DO\n          IF (abs(temp - c(x + 1)) .gt. ((temp / 2) + (c(x + 1) / 2)) * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        LOGICAL,DIMENSION(LOOPCOUNT):: a !Data\n        LOGICAL :: results = .FALSE.\n        LOGICAL :: temp = .FALSE.\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        REAL(8),DIMENSION(LOOPCOUNT):: random\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        DO x = 1, LOOPCOUNT\n          IF (random(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel loop reduction(.OR.:results)\n          DO x = 1, LOOPCOUNT\n            results = results .OR. a(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          temp = temp .OR. a(x)\n        END DO\n        IF (temp .neqv. results) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a, a_copy !Data\n        LOGICAL,DIMENSION(10) :: results\n        LOGICAL :: temp = .FALSE.\n        REAL(8),DIMENSION(10 * LOOPCOUNT) :: random\n        REAL(8) :: false_margin = exp(log(.5) / n)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (random(x) .gt. false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n          a_copy(x) = a(x)\n        END DO\n\n        DO x = 1, 10\n          results(x) = .FALSE.\n        END DO\n\n        !$acc data copy(a(1:10*LOOPCOUNT), results(1:10))\n          !$acc parallel loop gang private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop worker reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            results(x + 1) = temp\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              IF (results(x + 1) .eqv. .TRUE.) THEN\n                IF(a(x * LOOPCOUNT + y) .eqv. .TRUE.) THEN\n                  a(x * LOOPCOUNT + y) = .FALSE.\n                ELSE\n                  a(x * LOOPCOUNT + y) = .TRUE.\n                END IF\n              END IF\n            END DO\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a_copy(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. results(x + 1)) THEN\n            errors = errors + 1\n          END IF\n          DO y = 1, LOOPCOUNT\n            IF (temp .eqv. .FALSE.) THEN\n              IF (a(x * LOOPCOUNT + y) .neqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            ELSE\n              IF (a(x * LOOPCOUNT + y) .eqv. a_copy(x * LOOPCOUNT + y)) THEN\n                errors = errors + 1\n              END IF\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,reduction,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        LOGICAL,DIMENSION(10*LOOPCOUNT):: a !Data\n        LOGICAL,DIMENSION(10) :: b\n        LOGICAL :: temp\n        REAL(8),DIMENSION(10*LOOPCOUNT):: randoms\n        REAL(8) :: false_margin = exp(log(.5) / 2)\n        INTEGER :: errors = 0\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(randoms)\n\n        !Initilization\n        DO x = 1, 10 * LOOPCOUNT\n          IF (randoms(x) > false_margin) THEN\n            a(x) = .TRUE.\n          ELSE\n            a(x) = .FALSE.\n          END IF\n        END DO\n\n        !$acc data copyin(a(1:10*LOOPCOUNT)), copy(b(1:10))\n          !$acc parallel loop private(temp)\n          DO x = 0, 9\n            temp = .FALSE.\n            !$acc loop vector reduction(.OR.:temp)\n            DO y = 1, LOOPCOUNT\n              temp = temp .OR. a(x * LOOPCOUNT + y)\n            END DO\n            b(x + 1) = temp\n          END DO\n        !$acc end data\n\n        DO x = 0, 9\n          temp = .FALSE.\n          DO y = 1, LOOPCOUNT\n            temp = temp .OR. a(x * LOOPCOUNT + y)\n          END DO\n          IF (temp .neqv. b(x + 1)) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n          !$acc parallel loop seq\n          DO x = 2, LOOPCOUNT\n            b(x) = b(x - 1) + a(x)\n          END DO\n        !$acc end data\n        \n        DO x = 2, LOOPCOUNT\n          IF (abs(b(x) - (b(x - 1) + a(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,combined-constructs,loop,tile,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y, z !Iterators\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT):: a, b, c !Data\n        REAL(8),DIMENSION(SMALL_LOOPCOUNT,SMALL_LOOPCOUNT)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        CALL RANDOM_NUMBER(c)\n\n        !$acc data copyin(a(1:SMALL_LOOPCOUNT), b(1:SMALL_LOOPCOUNT), c(1:SMALL_LOOPCOUNT)) copyout(d(1:SMALL_LOOPCOUNT,1:SMALL_LOOPCOUNT))\n          !$acc parallel loop tile(*, *) reduction(+:temp)\n          DO x = 1, SMALL_LOOPCOUNT\n            DO y = 1, SMALL_LOOPCOUNT \n              temp = 0\n              DO z = 1, SMALL_LOOPCOUNT\n                temp = temp + a(z) + b(z) + c(z)\n              END DO\n              d(x,y) = temp\n            END DO\n          END DO\n        !$acc end data\n        \n        DO x = 1, SMALL_LOOPCOUNT \n          DO y = 1, SMALL_LOOPCOUNT \n            temp = 0\n            DO z = 1, SMALL_LOOPCOUNT\n              temp = temp + a(z) + b(z) + c(z) \n            END DO\n            IF (abs(d(x,y) - temp) .gt. PRECISION) THEN\n              errors = errors + 1\n            END IF\n          END DO\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc parallel loop vector\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n        \n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplyer\n        INTEGER :: errors = 0\n\n        multiplyer = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplyer\n            END DO\n            multiplyer = multiplyer + 1\n            !$acc loop vector\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + ((a(x) + b(x)) * multiplyer)\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,combined-constructs,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel loop worker\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        REAL(8) :: multiplyer\n        INTEGER :: errors = 0\n\n        multiplyer = 1\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = (a(x) + b(x)) * multiplyer\n            END DO\n            multiplyer = multiplyer + 1\n            !$acc loop worker\n            DO x = 1, LOOPCOUNT\n              c(x) = c(x) + (a(x) + b(x)) * multiplyer\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            c(x) = a(x) + b(x)\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_private.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,private,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10 * LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(LOOPCOUNT):: c\n        REAL(8),DIMENSION(10)::d\n        REAL(8) :: temp\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        d = 0\n\n        !$acc enter data copyin(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT), d(1:10)) \n        !$acc parallel num_gangs(10) private(c(1:LOOPCOUNT))\n          !$acc loop gang\n          DO x = 1, 10\n            !$acc loop worker\n            DO y = 1, LOOPCOUNT\n              c(y) = a((x - 1) * LOOPCOUNT + y) + b((x - 1) * LOOPCOUNT + y)\n            END DO\n            !$acc loop seq\n            DO y = 1, LOOPCOUNT\n              d(x) = d(x) + c(y)\n            END DO\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(d(1:10)) delete(a(1:10*LOOPCOUNT), b(1:10*LOOPCOUNT))\n\n        DO x = 0, 9\n          temp = 0\n          DO y = 1, LOOPCOUNT\n            temp = temp + a(x * LOOPCOUNT + y) + b(x * LOOPCOUNT + y)\n          END DO\n          IF (abs(temp - d(x + 1)) .gt. 2 * PRECISION * LOOPCOUNT) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "private"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_reduction.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8) :: results = 0\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n\n        !$acc data copyin(a(1:LOOPCOUNT))\n          !$acc parallel reduction(+:results)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              results = results + a(x)\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          results = results - a(x)\n        END DO\n        IF (abs(results) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_scalar_default_firstprivate.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        REAL(8),DIMENSION(1):: random\n        INTEGER :: errors = 0\n        REAL(8) :: scalar\n        REAL(8) :: scalar_copy\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(random)\n        scalar = random(1)\n        scalar_copy = scalar\n        CALL RANDOM_NUMBER(a)\n        b = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = a(x) + scalar\n            END DO\n          !$acc end parallel\n        !$acc end data\n        DO x = 1, LOOPCOUNT\n          IF (abs(b(x) - (a(x) + scalar_copy)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n        IF (abs(scalar_copy - scalar) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_switch.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        INTEGER,DIMENSION(LOOPCOUNT):: a\n        REAL(8),DIMENSION(LOOPCOUNT):: b, c, randoms!Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(b)\n        c = 0\n        CALL RANDOM_NUMBER(randoms)\n        a = floor(randoms * 3)\n\n        !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n        !$acc parallel present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            SELECT CASE (a(x))\n              CASE (0)\n                c(x) = b(x) * b(x)\n              CASE (1)\n                c(x) = b(x) / b(x)\n              CASE (2)\n                c(x) = b(x) / 2\n            END SELECT\n          END DO\n        !$acc end parallel\n        !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          SELECT CASE (a(x))\n            CASE (0)\n              IF (abs(c(x) - (b(x) * b(x))) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            CASE (1)\n              IF (abs(c(x) - (b(x) / b(x))) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n            CASE (2)\n              IF (abs(c(x) - (b(x) / 2)) .gt. PRECISION) THEN\n                errors = errors + 1\n              END IF\n          END SELECT\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,parallel,update,V:2.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b !Data\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        b = a\n\n        !$acc enter data create(a(1:LOOPCOUNT))\n        !$acc update device(a(1:LOOPCOUNT)) async(1)\n        !$acc parallel present(a(1:LOOPCOUNT)) wait(1)\n          !$acc loop\n          DO x = 1, LOOPCOUNT\n            a(x) = a(x) + 1\n          END DO\n        !$acc end parallel\n        !$acc exit data copyout(a(1:LOOPCOUNT))\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(a(x) - (b(x) + 1)) .gt. PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "parallel",
                            "update"
                        ],
                        "versions": [
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "parallel_while_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:parallel,reduction,loop,V:1.0-2.7\n      LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(10, LOOPCOUNT):: a !Data\n        REAL(8) :: avg\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n \n        !$acc data copy(a(1:10, 1:LOOPCOUNT))\n          !$acc parallel\n            !$acc loop\n            DO x = 1, 10\n              avg = 0.0\n              DO WHILE (avg - 1000 .lt. PRECISION * LOOPCOUNT)\n                avg = 0.0\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(x, y) = a(x, y) * 1.5\n                END DO\n                !$acc loop reduction(+:avg)\n                DO y = 1, LOOPCOUNT\n                  avg = avg + (a(x, y) / LOOPCOUNT)\n                END DO\n              END DO\n            END DO\n          !$acc end parallel\n        !$acc end data\n\n        DO x = 1, 10\n          avg = 0.0\n          DO y = 1, LOOPCOUNT\n            avg = avg + (a(x, y) / LOOPCOUNT)\n          END DO\n          IF (avg < 1000 .OR. avg > 1600) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "parallel",
                            "reduction",
                            "loop"
                        ],
                        "versions": [
                            "1.0",
                            "2.0",
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER :: x, i_a, i_b, i_c, i_d, i_e, i_f, i_g, i_h, i_i, i_j !Iterators\n  INTEGER, PARAMETER :: PRIVATE_LOOPCOUNT = 1024\n  REAL(8),DIMENSION(PRIVATE_LOOPCOUNT):: a, b, c !Data\n  INTEGER :: errors\n  errors = 0\n\n  !Initilization\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:PRIVATE_LOOPCOUNT), b(1:PRIVATE_LOOPCOUNT)) copy(c(1:PRIVATE_LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO i_a = 0, 1\n        !$acc loop\n        DO i_b = 0, 1\n          !$acc loop\n          DO i_c = 0, 1\n            !$acc loop\n            DO i_d = 0, 1\n              !$acc loop\n              DO i_e = 0, 1\n                !$acc loop\n                DO i_f = 0, 1\n                  !$acc loop\n                  DO i_g = 0, 1\n                    !$acc loop\n                    DO i_h = 0, 1\n                      !$acc loop\n                      DO i_i = 0, 1\n                        !$acc loop\n                        DO i_j = 0, 1\n                          c(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) = &\n                          a(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1) + &\n                          b(i_a*512 + i_b*256 + i_c*128 + i_d*64 + i_e*32 + i_f*16 + i_g*8 + i_h*4 + i_i*2 + i_j + 1)\n                        END DO\n                      END DO\n                    END DO\n                  END DO\n                END DO\n              END DO\n            END DO\n          END DO\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, PRIVATE_LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, d, e, f, g\n  INTEGER:: x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  CALL RANDOM_NUMBER(d)\n  CALL RANDOM_NUMBER(e)\n  f = 0\n  g = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT), d(1:LOOPCOUNT), e(1:LOOPCOUNT), f(1:LOOPCOUNT), g(1:LOOPCOUNT))\n    !$acc serial async(1)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = a(x) + b(x)\n      END DO\n    !$acc end serial\n    !$acc serial async(2)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        f(x) = d(x) + e(x)\n      END DO\n    !$acc end serial\n    !$acc serial wait(1, 2) async(3)\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        g(x) = c(x) + f(x)\n      END DO\n    !$acc end serial\n\n    !$acc update host(c(1:LOOPCOUNT)) async(1)\n    !$acc update host(f(1:LOOPCOUNT)) async(2)\n    !$acc update host(g(1:LOOPCOUNT)) async(3)\n\n    !$acc wait(1)\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc wait(2)\n    DO x = 1, LOOPCOUNT\n      IF (abs(f(x) - (d(x) + e(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc wait(3)\n    DO x = 1, LOOPCOUNT\n      IF (abs(g(x) - (a(x) + b(x) + d(x) + e(x))) .gt. 4 * PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  !$acc end data\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copy.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_host\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_host = a\n\n  !$acc serial copy(a(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, N\n      a(x) = 2 * a(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, N\n    IF (abs(a(x) - (2 * a_host(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyin.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER,DIMENSION(1):: hasDevice\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n  b = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n    hasDevice(1) = 0\n  !$acc end parallel\n\n  !$acc serial copyin(a(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = 0\n    END DO\n  !$acc end serial\n\n  DO x = 1, LOOPCOUNT\n    IF (hasDevice(1) .eq. 1) THEN\n      IF (abs(a(x) - a_copy(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    ELSE\n      IF (abs(a(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER,DIMENSION(1):: hasDevice\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc data copy(b(1:LOOPCOUNT))\n    !$acc serial copyin(a(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_copyout.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial copyout(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (hasDevice(1) .eq. 1) THEN\n    !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n      !$acc serial copyout(b(1:LOOPCOUNT))\n        !$acc loop\n        DO x = 1, LOOPCOUNT\n          b(x) = b(x) - a(x)\n        END DO\n      !$acc end serial\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(a(x) - b(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test3()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  INTEGER:: x\n  INTEGER,DIMENSION(1):: hasDevice\n  errors = 0\n\n  hasDevice(1) = 1\n  !$acc enter data copyin(hasDevice(1:1))\n  !$acc parallel present(hasDevice(1:1))\n  hasDevice(1) = 0\n  !$acc end parallel\n  \n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial copyout(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = b(x) - a(x)\n      END DO\n    !$acc end serial\n    !$acc update host(b(1:LOOPCOUNT))\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x)) .gt. 2 * PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_create.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial create(b(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x)\n      END DO\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = b(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - c(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_copy.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER,DIMENSION(1):: devtest\n  INTEGER:: x\n  errors = 0\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + b(x) + a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER,DIMENSION(1):: devtest\n  INTEGER:: x\n  errors = 0\n\n  devtest(1) = 1\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = 0\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1) .eq. 1) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = 1\n\n    !$acc enter data copyin(c(1:LOOPCOUNT))\n    DO x = 1, LOOPCOUNT\n      c(x) = 0\n    END DO\n\n    !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n      !$acc serial\n        !$acc loop\n        DO x = 1, LOOPCOUNT\n          c(x) = c(x) + a(x) + b(x)\n        END DO\n      !$acc end serial\n    !$acc end data\n\n    DO x = 1, LOOPCOUNT\n      if (abs(c(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n\n    !$acc exit data copyout(c(1:LOOPCOUNT))\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x) + 1)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_default_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,default,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a\n  INTEGER:: x\n  errors = 0\n\n  a = 0\n\n  !$acc enter data copyin(a(1:LOOPCOUNT))\n  !$acc serial default(present)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = 1\n    END DO\n  !$acc end serial\n  !$acc exit data copyout(a(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - 1) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "default"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_firstprivate.F90": {
                "num tests": 2,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,firstprivate,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, d\n  REAL(8),DIMENSION(10):: c, c_copy\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  CALL RANDOM_NUMBER(c)\n  c_copy = c\n  d = 0\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copy(d(1:10, 1:LOOPCOUNT))\n    !$acc serial firstprivate(c(1:10))\n      !$acc loop gang\n      DO y = 1, LOOPCOUNT\n        !$acc loop worker\n        DO x = 1, 10\n          d(x, y) = a(x, y) + b(x, y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      IF (abs(d(x, y) - (a(x, y) + b(x, y) + c_copy(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:serial,firstprivate,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, d\n  REAL(8),DIMENSION(10):: c, c_copy\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  d = 0\n  c = 0\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copy(d(1:10, 1:LOOPCOUNT))\n    !$acc serial firstprivate(c(1:10))\n      !$acc loop gang independent\n      DO y = 1, LOOPCOUNT\n        !$acc loop worker independent\n        DO x = 1, 10\n          c(x) = a(x, y) - b(x, y)\n        END DO\n        !$acc loop worker independent\n        DO x = 1, 10\n          d(x, y) = a(x, y) + b(x, y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      IF (abs(d(x, y) - (2 * a(x, y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "firstprivate"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_if.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc serial if(host)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, N\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test2()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  IF (devtest(1)) THEN\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    c = a + b\n\n    !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial if(host) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + a(x) + b(x)\n      END DO\n    !$acc end serial\n    !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:devonly,serial,if,V:2.6-2.7\n      LOGICAL FUNCTION test3()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  LOGICAL,DIMENSION(1):: devtest\n  LOGICAL:: host, device\n  INTEGER:: x\n  host = .FALSE.\n  device = .TRUE.\n  errors = 0\n\n  devtest(1) = .TRUE.\n  !$acc enter data copyin(devtest(1:1))\n  !$acc parallel present(devtest(1:1))\n    devtest(1) = .FALSE.\n  !$acc end parallel\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = a + b\n  \n  !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n  !$acc serial if(device) present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = c(x) + a(x) + b(x)\n    END DO\n  !$acc end serial\n  !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (2 * (a(x) + b(x)))) .gt. PRECISION * 2) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "devonly",
                            "serial",
                            "if"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copy(c(1:LOOPCOUNT))\n    !$acc serial loop\n    DO x = 1, LOOPCOUNT\n      c(x) = 1\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - 1) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  !$acc data copy(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = b(x)\n      END DO\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + a(x)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d\n  INTEGER,DIMENSION(10):: error_array\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      d(x, y) = a(x, y) + b(x, y)\n    END DO\n  END DO\n\n  error_array = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10), c(1:LOOPCOUNT, 1:10), d(1:LOOPCOUNT, 1:10)) copy(error_array(1:10))\n    DO y = 1, 10\n      !$acc serial loop async(y)\n      DO x = 1, LOOPCOUNT\n        c(x, y) = a(x, y) + b(x, y)\n      END DO\n      !$acc serial loop async(y)\n      DO x = 1, LOOPCOUNT\n        IF (((c(x, y) - d(x, y)) .gt. PRECISION) .OR. ((d(x, y) - c(x, y)) .gt. PRECISION)) THEN\n          error_array(y) = error_array(y) + 1\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    errors = errors + error_array(x)\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_auto.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,auto,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy, b\n  INTEGER:: x\n  REAL(8):: temp\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n    !$acc serial loop auto\n    DO x = 1, LOOPCOUNT\n      b(x) = a(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - a(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  !$acc data copy(a(1:LOOPCOUNT))\n    !$acc serial loop auto\n    DO x = 2, LOOPCOUNT\n      a(x) = a(x - 1) + a(x)\n    END DO\n  !$acc end data\n\n  temp = 0\n  DO x = 1, LOOPCOUNT\n    temp = temp + a_copy(x)\n    IF (abs(temp - a(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop",
                            "auto"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_gang.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop gang\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_gang_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:loop,V:2.6-2.7\n    LOGICAL FUNCTION test1()\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n        INTEGER:: multiplier\n        INTEGER:: x\n        INTEGER:: errors\n\n        errors = 0\n\n        SEEDDIM(1) = 1\n        # ifdef SEED\n        SEEDDIM(1) = SEED\n        # endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n            !$acc serial\n            !$acc loop gang\n            DO x = 1, LOOPCOUNT\n                c(x) = (a(x) + b(x)) * multiplier\n            END DO\n            multiplier = multiplier + 1\n            !$acc loop gang\n            DO x = 1, LOOPCOUNT\n                c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n            END DO\n            !$acc end serial\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n            IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n            errors = errors + 1\n            END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: total\n  INTEGER:: x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  total = 10\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(+:total)\n    DO x = 1, LOOPCOUNT\n      total = total + a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    total = total - (a(x) + b(x))\n  END DO\n\n  IF (abs(total - 10) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c, d\n  REAL(8):: avg, temp\n  INTEGER:: x, y\n  avg = 0\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) create(c(1:LOOPCOUNT, 1:10)) copyout(d(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(avg)\n    DO y = 1, 10\n      avg = 0\n      !$acc loop worker reduction(+:avg)\n      DO x = 1, LOOPCOUNT\n        c(x, y) = a(x, y) + b(x, y)\n        avg = avg + c(x, y)\n      END DO\n      avg = avg / LOOPCOUNT\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        d(x, y) = c(x, y) - avg\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = 0\n    DO x = 1, LOOPCOUNT\n      temp = temp + (a(x, y) + b(x, y))\n    END DO\n    temp = temp / LOOPCOUNT\n    DO x = 1, LOOPCOUNT\n      IF (abs(d(x, y) - ((a(x, y) + b(x, y)) - temp)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_add_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: c\n  REAL(8):: temp\n  INTEGER:: x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10), b(1:LOOPCOUNT,1:10)) copyout(c(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(+:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp + (a(x, y) + b(x, y))\n      END DO\n      c(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      c(y) = c(y) - (a(x, y) + b(x, y))\n    END DO\n    IF (abs(c(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  INTEGER:: x\n  LOGICAL,DIMENSION(LOOPCOUNT):: a\n  LOGICAL:: result, host_result\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  REAL(8):: false_margin = EXP(LOG(.5) / LOOPCOUNT)\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    IF (randoms(x) .lt. false_margin) THEN\n      a(x) = .TRUE.\n    ELSE\n      a(x) = .FALSE.\n    END IF\n  END DO\n\n  result = .TRUE.\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(.AND.:result)\n    DO x = 1, LOOPCOUNT\n      result = result .AND. a(x)\n    END DO\n  !$acc end data\n\n  host_result = .TRUE.\n  DO x = 1, LOOPCOUNT\n    host_result = host_result .AND. a(x)\n  END DO\n\n  IF (host_result .NEQV. result) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, a_copy\n  LOGICAL,DIMENSIOn(10):: has_false\n  LOGICAL:: temp\n  INTEGER:: x, y\n  errors = 0\n  false_margin = EXP(LOG(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  has_false = .FALSE.\n  a = .TRUE.\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .FALSE.\n        has_false(y) = .TRUE.\n      END IF\n    END DO\n  END DO\n  a_copy = a\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = .TRUE.\n      !$acc loop worker reduction(.AND.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .AND. a(x, y)\n      END DO\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        IF (temp) THEN\n          IF (a(x, y) .eq. 1) THEN\n            a(x, y) = .FALSE.\n          ELSE\n            a(x, y) = .TRUE.\n          END IF\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF ((has_false(y) .eqv. .TRUE.) .AND. (a(x, y) .neqv. a_copy(x, y))) THEN\n        errors = errors + 1\n      ELSEIF ((has_false(y) .eqv. .FALSE.) .AND. (a(x, y) .eqv. a_copy(x, y))) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_and_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a\n  LOGICAL,DIMENSION(10):: b, has_false\n  LOGICAL:: temp\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  REAL(8):: false_margin\n  INTEGER:: errors, x, y\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  has_false = .FALSE.\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .lt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n        has_false(y) = .TRUE.\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = .TRUE.\n      !$acc loop vector reduction(.AND.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .AND. a(x, y)\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (has_false(x) .eqv. b(x)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(N):: a\n  INTEGER:: b, host_b\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 16):: randoms\n  INTEGER:: x, y\n  INTEGER:: errors\n\n  errors = 0\n  false_margin = exp(log(.5)/LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 16\n      IF (randoms(x, y) .lt. false_margin) THEN\n        a(x) = a(x) + 2**(y - 1)\n      END IF\n    END DO\n  END DO\n\n  b = a(1)\n  host_b = a(1)\n  DO x = 2, LOOPCOUNT\n    host_b = iand(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(iand: b)\n    DO x = 1, LOOPCOUNT\n      b = iand(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, b_copy\n  INTEGER,DIMENSION(10):: c, host_c\n  INTEGER:: errors, x, y, z, temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 17):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      b(x) = INT(10 * randoms(x, y, 17))\n      DO z = 1, 16\n        IF (randoms(x, y, z) .lt. false_margin) THEN\n          a(x) = a(x) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  b_copy = b\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 1, LOOPCOUNT\n      temp = iand(temp, a(x, y))\n    END DO\n    host_c(y) = temp\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = a(1, y)\n      !$acc loop worker reduction(iand:temp)\n      DO x = 1, LOOPCOUNT\n        temp = iand(temp, a(x, y))\n      END DO\n      c(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (host_c(y) .ne. c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (b(x, y) .ne. b_copy(x, y) + c(y)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitand_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n  LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b, b_host\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 16):: randoms\n  REAL(8):: false_margin\n  INTEGER:: x, y, temp, c, z\n  INTEGER:: errors\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      DO z = 1, 16\n        IF (randoms(x, y, z) .lt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  DO y = 1, 10\n    b_host(y) = a(1, y)\n    DO x = 1, LOOPCOUNT\n      b_host(y) = iand(b_host(y), a(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(c)\n    DO y = 1, 10\n      c = a(1, y)\n      !$acc loop vector reduction(iand:c)\n      DO x = 1, LOOPCOUNT\n        c = iand(c, a(x, y))\n      END DO\n      b(y) = c\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (b(x) .ne. b_host(x)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, temp, x, y, b, host_b\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 16):: randoms\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 16\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x) = a(x) + 2**(y - 1)\n      END IF\n    END DO\n  END DO\n\n  DO x = 1, LOOPCOUNT\n    host_b = ior(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(ior:b)\n    DO x = 1, LOOPCOUNT\n      b = ior(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x, y, z, temp\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, b_copy\n  INTEGER,DIMENSION(10):: c\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 17):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      b(x, y) = INT(randoms(x, y, 17) * 1000)\n      DO z = 1, 16\n        IF (randoms(x, y, z) .gt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z-1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  b_copy = b\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(ior:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ior(temp, a(x, y))\n      END DO\n      c(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 2, LOOPCOUNT\n      temp = ior(temp, a(x, y))\n    END DO\n    IF (temp .ne. c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (b(x, y) .ne. (b_copy(x, y) + temp)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x, y, z, temp\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 16):: randoms\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      DO z = 1, 16\n        IF (randoms(x, y, z) .gt. false_margin) THEN\n          a(x, y) = a(x, y) + 2**(z - 1)\n        END IF\n      END DO\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT,1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(ior:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ior(temp, a(x, y))\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = a(1, y)\n    DO x = 2, LOOPCOUNT\n      temp = ior(temp, a(x, y))\n    END DO\n    IF (temp .ne. b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  INTEGER:: errors, b, host_b, x\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    a(x) = INT(randoms(x) * 100000)\n  END DO\n\n  b = 0\n  host_b = 0\n\n  DO x = 1, LOOPCOUNT\n    host_b = ieor(host_b, a(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(ieor:b)\n    DO x = 1, LOOPCOUNT\n      b = ieor(b, a(x))\n    END DO\n  !$acc end data\n\n  IF (b .ne. host_b) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a, b, host_b\n  INTEGER,DIMENSION(10):: c, host_c\n  REAL(8),DIMENSION(LOOPCOUNT, 10, 2):: randoms\n  INTEGER:: errors, x, y, temp\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  c = 0\n  host_c = 0\n  DO x = 1, LOOPCOUNT\n    DO y = 1, 10\n      b(x, y) = INT(randoms(x, y, 1) * 1000)\n      a(x, y) = INT(randoms(x, y, 2) * 1000)\n    END DO\n  END DO\n  host_b = b\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_c(y) = ieor(host_c(y), a(x, y))\n    END DO\n    DO x = 1, LOOPCOUNT\n      host_b(x, y) = host_b(x, y) + host_c(y)\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:LOOPCOUNT, 1:10), c(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(ieor:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ieor(temp, a(x, y))\n      END DO\n      c(y) = temp\n      DO x = 1, LOOPCOUNT\n        b(x, y) = b(x, y) + c(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (c(y) .ne. host_c(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (host_b(x, y) .ne. b(x, y)) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_bitxor_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT, 10):: a\n  INTEGER,DIMENSION(10):: b, host_b\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors, x, y, temp\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      a(x, y) = INT(randoms(x, y) * 10000)\n    END DO\n  END DO\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_b(y) = ieor(host_b(y), a(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(ieor:temp)\n      DO x = 1, LOOPCOUNT\n        temp = ieor(temp, a(x, y))\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (b(y) .ne. host_b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: maxval, host_max\n  INTEGER:: errors, x\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  errors = 0\n\n  DO x = 1, LOOPCOUNT\n    host_max = max(host_max, a(x) * b(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(max:maxval)\n    DO x = 1, LOOPCOUNT\n      maxval = max(maxval, a(x) * b(x))\n    END DO\n  !$acc end data\n\n  IF (abs(host_max - maxval) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c\n  REAL(8),DIMENSIOn(10):: host_maximums, maximums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  maximums = 0\n  host_maximums = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_maximums(y) = max(host_maximums(y), a(x, y) * b(x, y))\n    ENDDO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(c(1:LOOPCOUNT, 1:10), maximums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop worker reduction(max:temp)\n      DO x = 1, LOOPCOUNT\n        temp = max(temp, a(x, y) * b(x, y))\n      END DO\n      maximums(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x, y) = (a(x, y) * b(x, y)) / maximums(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (maximums(y) .ne. host_maximums(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x, y) - ((a(x, y) * b(x, y)) / maximums(y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_max_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: maximums, host_maximums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  host_maximums = 0\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_maximums(y) = max(host_maximums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(maximums(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = 0\n      !$acc loop vector reduction(max:temp)\n      DO x = 1, LOOPCOUNT\n        temp = max(temp, a(x, y) * b(x, y))\n      END DO\n      maximums(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (abs(host_maximums(x) - maximums(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors, x\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: minimum, host_minimum\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  minimum = a(1) * b(1)\n  host_minimum = minimum\n\n  DO x = 2, LOOPCOUNT\n    host_minimum = min(host_minimum, a(x) * b(x))\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT))\n    !$acc serial loop reduction(min:minimum)\n    DO x = 1, LOOPCOUNT\n      minimum = min(minimum, a(x) * b(x))\n    END DO\n  !$acc end data\n\n  IF (abs(host_minimum - minimum) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b, c\n  REAL(8),DIMENSION(10):: minimums, host_minimums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  minimums = 0\n  host_minimums = 0\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_minimums(y) = min(host_minimums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(c(1:LOOPCOUNT, 1:10), minimums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 1\n      !$acc loop reduction(min: temp)\n      DO x = 1, LOOPCOUNT\n        temp = min(temp, a(x, y) * b(x, y))\n      END DO\n      minimums(y) = temp\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        c(x, y) = (a(x, y) * b(x, y)) / minimums(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    IF (abs(minimums(y) - host_minimums(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (abs(c(x, y) - ((a(x, y) * b(x, y)) / minimums(y))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_min_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(10):: minimums, host_minimums\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n  minimums = 1\n  host_minimums = 1\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      host_minimums(y) = min(host_minimums(y), a(x, y) * b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(minimums(1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = 1\n      !$acc loop vector reduction(min:temp)\n      DO x = 1, LOOPCOUNT\n        temp = min(temp, a(x, y) * b(x, y))\n      END DO\n      minimums(y) = temp\n    END DO\n  !$acc end data\n\n  DO x = 1, 10\n    IF (abs(host_minimums(x) - minimums(x)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10):: a, b\n  REAL(8):: reduced, host_reduced\n  INTEGER:: errors, x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  DO y = 1, LOOPCOUNT\n    CALL RANDOM_NUMBER(a)\n    CALL RANDOM_NUMBER(b)\n    reduced = 1\n    host_reduced = 1\n\n    DO x = 1, 10\n      host_reduced = host_reduced * (a(x) + b(x))\n    END DO\n\n    !$acc data copyin(a(1:10), b(1:10))\n      !$acc serial loop reduction(*:reduced)\n      DO x = 1, 10\n        reduced = reduced * (a(x) + b(x))\n      END DO\n    !$acc end data\n\n    IF (abs(host_reduced - reduced) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b, c\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, host_totals\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n\n  host_totals = 1\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      host_totals(y) = host_totals(y) * (a(x, y) + b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copyout(c(1:10, 1:LOOPCOUNT)) copy(totals(1:LOOPCOUNT))\n    !$acc serial loop gang private(temp)\n    DO y = 1, LOOPCOUNT\n      temp = 1\n      !$acc loop worker reduction(*:temp)\n      DO x = 1, 10\n        temp = temp * (a(x, y) + b(x, y))\n      END DO\n      totals(y) = temp\n      !$acc loop worker\n      DO x = 1, 10\n        c(x, y) = (a(x, y) + b(x, y)) / totals(y)\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    IF (abs(host_totals(y) - totals(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, 10\n      IF (c(x, y) - ((a(x, y) + b(x, y)) / totals(y)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_multiply_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(10, LOOPCOUNT):: a, b\n  REAL(8),DIMENSION(LOOPCOUNT):: totals, host_totals\n  REAL(8):: temp\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n\n  host_totals = 1\n  DO y = 1, LOOPCOUNT\n    DO x = 1, 10\n      host_totals(y) = host_totals(y) * (a(x, y) + b(x, y))\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:10, 1:LOOPCOUNT), b(1:10, 1:LOOPCOUNT)) copyout(totals(1:LOOPCOUNT))\n    !$acc serial loop private(temp)\n    DO y = 1, LOOPCOUNT\n      temp = 1\n      !$acc loop vector reduction(*:temp)\n      DO x = 1, 10\n        temp = temp * (a(x, y) + b(x, y))\n      END DO\n      totals(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, LOOPCOUNT\n    IF (abs(host_totals(y) - totals(y)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_general.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT):: a\n  LOGICAL:: result, host_result\n  REAL(8),DIMENSION(LOOPCOUNT):: randoms\n  REAL(8):: false_margin\n  INTEGER:: errors, x\n\n  errors = 0\n  false_margin = exp(log(.5) / LOOPCOUNT)\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO x = 1, LOOPCOUNT\n    IF (randoms(x) .gt. false_margin) THEN\n      a(x) = .TRUE.\n    ELSE\n      a(x) = .FALSE.\n    END IF\n  END DO\n\n  host_result = .FALSE.\n  result = .FALSE.\n\n  DO x = 1, LOOPCOUNT\n    host_result = host_result .OR. a(x)\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT))\n    !$acc serial loop reduction(.OR.: result)\n    DO x = 1, LOOPCOUNT\n      result = result .OR. a(x)\n    END DO\n  !$acc end data\n\n  IF (host_result .neqv. result) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a, a_copy\n  LOGICAL,DIMENSION(10):: results\n  LOGICAL:: temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n  #ifdef SEED\n  SEEDDIM(1) = SEED\n  #endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  a_copy = a\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial loop gang private(temp)\n    DO y = 1, 10\n      temp = .FALSE.\n      !$acc loop worker reduction(.OR.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .OR. a(x, y)\n      END DO\n      results(y) = temp\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        IF (results(y)) THEN\n          IF (a(x, y)) THEN\n            a(x, y) = .FALSE.\n          ELSE\n            a(x, y) = .TRUE.\n          END IF\n        END IF\n      END DO\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = .FALSE.\n    DO x = 1, LOOPCOUNT\n      temp = temp .OR. a(x, y)\n    END DO\n    IF (temp .neqv. results(y)) THEN\n      errors = errors + 1\n    END IF\n    DO x = 1, LOOPCOUNT\n      IF (temp) THEN\n        IF (a(x, y) .eqv. a_copy(x, y)) THEN\n          errors = errors + 1\n        END IF\n      ELSE\n        IF (a(x, y) .neqv. a_copy(x, y)) THEN\n          errors = errors + 1\n        END IF\n      END IF\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_reduction_or_vector_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,reduction,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  LOGICAL,DIMENSION(LOOPCOUNT, 10):: a\n  LOGICAL,DIMENSION(10):: b\n  LOGICAL:: temp\n  REAL(8):: false_margin\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: randoms\n  INTEGER:: errors\n  INTEGER:: x, y\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(randoms)\n\n  DO y = 1, 10\n    DO x = 1, LOOPCOUNT\n      IF (randoms(x, y) .gt. false_margin) THEN\n        a(x, y) = .TRUE.\n      ELSE\n        a(x, y) = .FALSE.\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10)) copy(b(1:10))\n    !$acc serial loop private(temp)\n    DO y = 1, 10\n      temp = .FALSE.\n      !$acc loop vector reduction(.OR.:temp)\n      DO x = 1, LOOPCOUNT\n        temp = temp .OR. a(x, y)\n      END DO\n      b(y) = temp\n    END DO\n  !$acc end data\n\n  DO y = 1, 10\n    temp = .FALSE.\n    DO x = 1, LOOPCOUNT\n      temp = temp .OR. a(x, y)\n    END DO\n    IF (temp .neqv. b(y)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private",
                            "reduction",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_seq.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: temp\n  INTEGER:: errors, x\n\n  errors = 0\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT))\n    !$acc serial loop seq\n    DO x = 2, LOOPCOUNT\n      b(x) = b(x - 1) + a(x)\n    END DO\n  !$acc end data\n\n  temp = 0\n  DO x = 2, LOOPCOUNT\n    temp = temp + a(x)\n    IF (abs(b(x) - temp) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_tile.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,tile,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(100):: a, b, c\n  REAL(8),DIMENSION(100, 100):: d2\n  REAL(8),DIMENSION(100, 100, 100):: d3\n  INTEGER:: x, y, z\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  CALL RANDOM_NUMBER(c)\n  d2 = 0\n  d3 = 0\n\n  !$acc data copyin(a(1:100), b(1:100), c(1:100)) copyout(d2(1:100, 1:100))\n    !$acc serial loop tile(*, *)\n    DO x = 1, 100\n      DO y = 1, 100\n        DO z = 1, 100\n          d2(x, y) = d2(x, y) + (a(x) * b(y) * c(z))\n        END DO\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 100\n    DO y = 1, 100\n      DO z = 1, 100\n        d2(x, y) = d2(x, y) - (a(x) * b(y) * c(z))\n      END DO\n      IF (abs(d2(x, y)) .gt. 10*PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END DO\n  END DO\n\n  !$acc data copyin(a(1:100), b(1:100), c(1:100)) copyout(d3(1:100, 1:100, 1:100))\n    !$acc serial loop tile(*, *, *)\n    DO x = 1, 100\n      DO y = 1, 100\n        DO z = 1, 100\n          d3(x, y, z) = a(x) * b(y) * c(z)\n        END DO\n      END DO\n    END DO\n  !$acc end data\n\n  DO x = 1, 100\n    DO y = 1, 100\n      DO z = 1, 100\n        IF (abs(d3(x, y, z) - (a(x) * b(y) * c(z))) .gt. PRECISION) THEN\n          errors = errors + 1\n        END IF\n      END DO\n    END DO\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop",
                            "tile"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop vector\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_vector_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER:: errors\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: multiplier, x\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop vector\n      DO x = 1, LOOPCOUNT\n        c(x) = (a(x) + b(x)) * multiplier\n      END DO\n      multiplier = multiplier + 1\n      !$acc loop vector\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - ((a(x) + b(x)) * 3)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,combined-constructs,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copy(c(1:LOOPCOUNT))\n    !$acc serial loop worker\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "combined-constructs",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_loop_worker_blocking.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: multiplier\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x) = (a(x) + b(x)) * multiplier\n      END DO\n      multiplier = multiplier + 1\n      !$acc loop worker\n      DO x = 1, LOOPCOUNT\n        c(x) = c(x) + ((a(x) + b(x)) * multiplier)\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (3 * (a(x) + b(x)))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_present.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b, c\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n\n  !$acc enter data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) create(c(1:LOOPCOUNT))\n  !$acc serial present(a(1:LOOPCOUNT), b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      c(x) = a(x) + b(x)\n    END DO\n  !$acc end serial\n  !$acc exit data delete(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(c(x) - (a(x) + b(x))) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_private.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,private,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a, b\n  REAL(8),DIMENSION(LOOPCOUNT):: c\n  REAL(8),DIMENSION(10):: d\n  REAL(8):: temp\n  INTEGER:: x, y\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  d = 0\n\n  !$acc data copyin(a(1:LOOPCOUNT, 1:10), b(1:LOOPCOUNT, 1:10)) copy(d(1:10))\n    !$acc serial private(c(1:LOOPCOUNT))\n      !$acc loop gang\n      DO y = 1, 10\n        !$acc loop worker\n        DO x = 1, LOOPCOUNT\n          c(x) = a(x, y) + b(x, y)\n        END DO\n        !$acc loop seq\n        DO x = 1, LOOPCOUNT\n          d(y) = d(y) + c(x)\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, 10\n    temp = 0\n    DO x = 1, LOOPCOUNT\n      temp = temp + (a(x, y) + b(x, y))\n    END DO\n    IF (abs(d(x) - temp) .gt. (2 * PRECISION * LOOPCOUNT)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "private"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_reduction.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:serial,reduction,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a\n  REAL(8):: reduction\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc serial copyin(a(1:LOOPCOUNT)) reduction(+:reduction)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      reduction = reduction + a(x)\n    END DO\n  !$acc end serial\n\n  DO x = 1, LOOPCOUNT\n    reduction = reduction - a(x)\n  END DO\n\n  IF (abs(reduction) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "serial",
                            "reduction"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_scalar_default_firstprivate.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, b\n  REAL(8):: scalar, scalar_copy\n  INTEGER:: x\n  INTEGER:: errors\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  b = 0\n  scalar = 5.5\n  scalar_copy = scalar\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copyout(b(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        b(x) = a(x) + scalar\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(b(x) - (a(x) + scalar_copy)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n  IF (abs(scalar_copy - scalar) .gt. PRECISION) THEN\n    errors = errors + 1\n  END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_switch.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  INTEGER,DIMENSION(LOOPCOUNT):: a\n  REAL(8),DIMENSION(LOOPCOUNT):: a_randoms, b, b_host, c\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a_randoms)\n  CALL RANDOM_NUMBER(b)\n  c = 0\n  b_host = b\n\n  DO x = 1, LOOPCOUNT\n    a(x) = INT(a_randoms(x) * 4)\n  END DO\n\n  !$acc data copyin(a(1:LOOPCOUNT)) copy(b(1:LOOPCOUNT), c(1:LOOPCOUNT))\n    !$acc serial\n      !$acc loop\n      DO x = 1, LOOPCOUNT\n        SELECT CASE(a(x))\n        CASE (0)\n          c(x) = b(x) * b(x)\n        CASE (1)\n          c(x) = b(x) / b(x)\n        CASE (2)\n          b(x) = b(x) / 2\n        CASE DEFAULT\n          c(x) = a(x) + b(x)\n        END SELECT\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO x = 1, LOOPCOUNT\n    SELECT CASE(a(x))\n    CASE(0)\n      IF (abs(c(x) - (b_host(x) * b_host(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE(1)\n      IF (abs(c(x) - 1) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE(2)\n      IF (abs(c(x)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n      IF (abs(b(x) - (b_host(x) / 2)) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    CASE DEFAULT\n      IF (abs(c(x) - (b_host(x) + a(x))) .gt. PRECISION) THEN\n        errors = errors + 1\n      END IF\n    END SELECT\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            ""
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_wait.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,serial,update,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT):: a, a_copy\n  INTEGER:: errors, x\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n  a_copy = a\n\n  !$acc enter data create(a(1:LOOPCOUNT))\n  !$acc update device(a(1:LOOPCOUNT)) async(1)\n  !$acc serial present(a(1:lOOPCOUNT)) wait(1)\n    !$acc loop\n    DO x = 1, LOOPCOUNT\n      a(x) = a(x) + 1\n    END DO\n  !$acc end serial\n  !$acc exit data copyout(a(1:LOOPCOUNT))\n\n  DO x = 1, LOOPCOUNT\n    IF (abs(a(x) - (a_copy(x) + 1)) .gt. PRECISION) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "serial",
                            "update"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "serial_while_loop.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:reduction,loop,V:2.6-2.7\n      LOGICAL FUNCTION test1()\n  IMPLICIT NONE\n  INCLUDE \"acc_testsuite.Fh\"\n  REAL(8),DIMENSION(LOOPCOUNT, 10):: a\n  REAL(8):: avg\n  INTEGER:: errors, x, y\n\n  errors = 0\n\n  SEEDDIM(1) = 1\n# ifdef SEED\n  SEEDDIM(1) = SEED\n# endif\n  CALL RANDOM_SEED(PUT=SEEDDIM)\n\n  CALL RANDOM_NUMBER(a)\n\n  !$acc data copy(a(1:LOOPCOUNT, 1:10))\n    !$acc serial\n      !$acc loop\n      DO y = 1, 10\n        avg = 0\n        DO WHILE (avg .lt. 1000)\n          avg = 0\n          !$acc loop reduction(+:avg)\n          DO x = 1, LOOPCOUNT\n            a(x, y) = a(x, y) * 1.5\n            avg = avg + (a(x, y) / LOOPCOUNT)\n          END DO\n        END DO\n      END DO\n    !$acc end serial\n  !$acc end data\n\n  DO y = 1, 10\n    avg = 0\n    DO x = 1, LOOPCOUNT\n      avg = avg + (a(x, y) / LOOPCOUNT)\n    END DO\n    IF ((avg .lt. 1000) .or. (avg .gt. 1500)) THEN\n      errors = errors + 1\n    END IF\n  END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "reduction",
                            "loop"
                        ],
                        "versions": [
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_default_async.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:async,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a, b, c, a_host, b_host !Data\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n\n        !Initilization\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        CALL RANDOM_NUMBER(a)\n        CALL RANDOM_NUMBER(b)\n        a_host = a\n        b_host = b\n        c = 0\n\n        !$acc data copyin(a(1:LOOPCOUNT), b(1:LOOPCOUNT)) copyout(c(1:LOOPCOUNT))\n          !$acc set default_async(1)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              a(x) = a(x) * a(x)\n            END DO\n          !$acc end parallel\n          !$acc set default_async(2)\n          !$acc parallel async\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              b(x) = b(x) * b(x)\n            END DO\n          !$acc end parallel\n          !$acc parallel async(1) wait(2)\n            !$acc loop\n            DO x = 1, LOOPCOUNT\n              c(x) = a(x) + b(x)\n            END DO\n          !$acc end parallel\n          !$acc wait(1)\n        !$acc end data\n\n        DO x = 1, LOOPCOUNT\n          IF (abs(c(x) - (a_host(x) * a_host(x) + b_host(x) * b_host(x))) .gt. 4 * PRECISION) THEN\n            errors = errors + 1\n          END IF\n        END DO\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "async",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: x, y !Iterators\n        REAL(8),DIMENSION(LOOPCOUNT):: a !Data\n        REAL(8),DIMENSION(:, :),ALLOCATABLE :: host_copy\n        REAL(8) :: RAND\n        INTEGER :: errors = 0\n        INTEGER :: temp\n\n        SEEDDIM(1) = 1\n#       ifdef SEED\n        SEEDDIM(1) = SEED\n#       endif\n        CALL RANDOM_SEED(PUT=SEEDDIM)\n\n        ALLOCATE(host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT))\n\n        IF (acc_get_device_type() .ne. acc_device_none) THEN\n          !host_copy(acc_get_num_devices(acc_get_device_type()), LOOPCOUNT)\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            CALL RANDOM_NUMBER(a)\n            host_copy(x, :) = a\n            !$acc set device_num(x)\n            !$acc enter data copyin(a(1:LOOPCOUNT))\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            !$acc set device_num(x)\n            !$acc data present(a(1:LOOPCOUNT))\n              !$acc parallel\n                !$acc loop\n                DO y = 1, LOOPCOUNT\n                  a(y) = a(y) + 1\n                END DO\n              !$acc end parallel\n            !$acc end data\n          END DO\n\n          DO x = 1, acc_get_num_devices(acc_get_device_type())\n            !$acc set device_num(x)\n            !$acc exit data copyout(a(1:LOOPCOUNT))\n            temp = errors\n            DO y = 1, LOOPCOUNT\n              IF (abs(a(y) - (host_copy(x, y) + 1)) .gt. PRECISION) THEN\n                PRINT*, a(y)\n                PRINT*, host_copy(x, y)\n                errors = errors + 1\n              END IF\n            END DO\n            IF (temp .ne. errors) THEN\n              PRINT*, x\n            END IF\n          END DO\n        END IF\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,set,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    }
                }
            },
            "set_device_type_num.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc set device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,set,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc set device_type(multicore) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,set,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc set device_type(default) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    }
                }
            },
            "set_device_type_num_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc set device_type(nvidia) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "set_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,set,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc set device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "set"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:construct-independent,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "construct-independent",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_num.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_num = acc_get_device_num(acc_get_device_type())\n        !$acc shutdown device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(host)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(multicore)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(default)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    }
                }
            },
            "shutdown_device_type_num.F90": {
                "num tests": 3,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(host) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "2": {
                        "content": "#ifndef T2\n!T2:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test2()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(multicore) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test2 = .FALSE.\n        ELSE\n          test2 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T2\n        LOGICAL :: test2\n#endif\n#ifndef T2\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test2()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 1\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    },
                    "3": {
                        "content": "#ifndef T3\n!T3:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-3.2\n      LOGICAL FUNCTION test3()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(default) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test3 = .FALSE.\n        ELSE\n          test3 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T3\n        LOGICAL :: test3\n#endif\n#ifndef T3\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test3()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 2\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7",
                            "3.0",
                            "3.1",
                            "3.2"
                        ]
                    }
                }
            },
            "shutdown_device_type_num_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: device_num\n        INTEGER :: device_type\n        INTEGER :: errors = 0\n\n        device_type = acc_get_device_type()\n        device_num = acc_get_device_num(device_type)\n        !$acc shutdown device_type(nvidia) device_num(device_num)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            },
            "shutdown_device_type_nvidia.F90": {
                "num tests": 1,
                "tests": {
                    "1": {
                        "content": "#ifndef T1\n!T1:runtime,construct-independent,internal-control-values,shutdown,nonvalidating,V:2.5-2.7\n      LOGICAL FUNCTION test1()\n        USE OPENACC\n        IMPLICIT NONE\n        INCLUDE \"acc_testsuite.Fh\"\n        INTEGER :: errors = 0\n\n        !$acc shutdown device_type(nvidia)\n\n        IF (errors .eq. 0) THEN\n          test1 = .FALSE.\n        ELSE\n          test1 = .TRUE.\n        END IF\n      END\n#endif\n#ifndef T1\n        LOGICAL :: test1\n#endif\n#ifndef T1\n        DO testrun = 1, NUM_TEST_CALLS\n          failed = failed .or. test1()\n        END DO\n        IF (failed) THEN\n          failcode = failcode + 2 ** 0\n          failed = .FALSE.\n        END IF\n#endif\n",
                        "tags": [
                            "runtime",
                            "construct-independent",
                            "internal-control-values",
                            "shutdown",
                            "nonvalidating"
                        ],
                        "versions": [
                            "2.5",
                            "2.6",
                            "2.7"
                        ]
                    }
                }
            }
        }
    ]
}
